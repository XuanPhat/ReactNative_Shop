{"version":3,"sources":["ToggleButton.tsx"],"names":["ToggleButton","onPress","rest","borderRadius","theme","context","checked","status","backgroundColor","e","disabled","selected","styles","borderColor","white","black","ToggleButtonGroup","ToggleButtonRow","content","width","height","margin","ToggleButtonWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { black, white } from '../../styles/colors';\nimport type { IconSource } from '../Icon';\nimport { ToggleButtonRow, ToggleButtonGroup } from './ToggleButtonElements';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = ({\n  icon,\n  size,\n  theme,\n  accessibilityLabel,\n  disabled,\n  style,\n  value,\n  status,\n  onPress,\n  ...rest\n}: Props) => {\n  const borderRadius = theme.roundness;\n\n  return (\n    <ToggleButtonGroupContext.Consumer>\n      {(context: { value: string; onValueChange: Function } | null) => {\n        let backgroundColor;\n\n        const checked: boolean | null =\n          (context && context.value === value) || status === 'checked';\n\n        if (checked) {\n          backgroundColor = theme.dark\n            ? 'rgba(255, 255, 255, .12)'\n            : 'rgba(0, 0, 0, .08)';\n        } else {\n          backgroundColor = 'transparent';\n        }\n\n        return (\n          <IconButton\n            borderless={false}\n            icon={icon}\n            onPress={(e?: GestureResponderEvent | string) => {\n              if (onPress) {\n                onPress(e);\n              }\n\n              if (context) {\n                context.onValueChange(!checked ? value : null);\n              }\n            }}\n            size={size}\n            accessibilityLabel={accessibilityLabel}\n            accessibilityState={{ disabled, selected: checked }}\n            disabled={disabled}\n            style={[\n              styles.content,\n              {\n                backgroundColor,\n                borderRadius,\n                borderColor: color(theme.dark ? white : black)\n                  .alpha(0.29)\n                  .rgb()\n                  .string(),\n              },\n              style,\n            ]}\n            {...rest}\n          />\n        );\n      }}\n    </ToggleButtonGroupContext.Consumer>\n  );\n};\n\n// @component ./ToggleButtonGroup.tsx\nToggleButton.Group = ToggleButtonGroup;\n\n// @component ./ToggleButtonRow.tsx\nToggleButton.Row = ToggleButtonRow;\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n\n// @component-docs ignore-next-line\nconst ToggleButtonWithTheme = withTheme(ToggleButton);\n// @component-docs ignore-next-line\nexport { ToggleButtonWithTheme as ToggleButton };\n"]}