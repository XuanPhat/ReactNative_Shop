aa604d39010026d2ccb2199d5bb3e51d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _colors = require("../styles/colors");

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _theming = require("../core/theming");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var version = _reactNative.NativeModules.PlatformConstants ? _reactNative.NativeModules.PlatformConstants.reactNativeVersion : undefined;

var Switch = function Switch(_ref) {
  var value = _ref.value,
      disabled = _ref.disabled,
      onValueChange = _ref.onValueChange,
      color = _ref.color,
      theme = _ref.theme,
      rest = _objectWithoutProperties(_ref, ["value", "disabled", "onValueChange", "color", "theme"]);

  var checkedColor = color || theme.colors.accent;
  var onTintColor = _reactNative.Platform.OS === 'ios' ? checkedColor : disabled ? theme.dark ? (0, _color.default)(_colors.white).alpha(0.1).rgb().string() : (0, _color.default)(_colors.black).alpha(0.12).rgb().string() : (0, _color.default)(checkedColor).alpha(0.5).rgb().string();
  var thumbTintColor = _reactNative.Platform.OS === 'ios' ? undefined : disabled ? theme.dark ? _colors.grey800 : _colors.grey400 : value ? checkedColor : theme.dark ? _colors.grey400 : _colors.grey50;
  var props = version && version.major === 0 && version.minor <= 56 ? {
    onTintColor: onTintColor,
    thumbTintColor: thumbTintColor
  } : _reactNative.Platform.OS === 'web' ? {
    activeTrackColor: onTintColor,
    thumbColor: thumbTintColor,
    activeThumbColor: checkedColor
  } : {
    thumbColor: thumbTintColor,
    trackColor: {
      true: onTintColor,
      false: ''
    }
  };
  return React.createElement(_reactNative.Switch, _extends({
    value: value,
    disabled: disabled,
    onValueChange: disabled ? undefined : onValueChange
  }, props, rest));
};

var _default = (0, _theming.withTheme)(Switch);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN3aXRjaC50c3giXSwibmFtZXMiOlsidmVyc2lvbiIsIk5hdGl2ZU1vZHVsZXMiLCJTd2l0Y2giLCJ0aGVtZSIsInJlc3QiLCJjaGVja2VkQ29sb3IiLCJjb2xvciIsIm9uVGludENvbG9yIiwiUGxhdGZvcm0iLCJkaXNhYmxlZCIsIndoaXRlIiwiYmxhY2siLCJ0aHVtYlRpbnRDb2xvciIsImdyZXk4MDAiLCJncmV5NDAwIiwidmFsdWUiLCJncmV5NTAiLCJwcm9wcyIsImFjdGl2ZVRyYWNrQ29sb3IiLCJ0aHVtYkNvbG9yIiwiYWN0aXZlVGh1bWJDb2xvciIsInRyYWNrQ29sb3IiLCJ0cnVlIiwiZmFsc2UiLCJvblZhbHVlQ2hhbmdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQSxLQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLGtCQUFBLENBQUE7O0FBQ0EsSUFBQSxZQUFBLEdBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQTs7QUFPQSxJQUFBLE1BQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLFFBQUEsR0FBQSxPQUFBLENBQUEsaUJBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTUEsT0FBTyxHQUFHQyxZQUFBQSxDQUFBQSxhQUFBQSxDQUFBQSxpQkFBQUEsR0FDWkEsWUFBQUEsQ0FBQUEsYUFBQUEsQ0FBQUEsaUJBQUFBLENBRFlBLGtCQUFBQSxHQUFoQixTQUFBOztBQWtFQSxJQUFNQyxNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFBLElBQUEsRUFPRjtBQUFBLE1BUEcsS0FPSCxHQUFBLElBQUEsQ0FQRyxLQU9IO0FBQUEsTUFQRyxRQU9ILEdBQUEsSUFBQSxDQVBHLFFBT0g7QUFBQSxNQVBHLGFBT0gsR0FBQSxJQUFBLENBUEcsYUFPSDtBQUFBLE1BUEcsS0FPSCxHQUFBLElBQUEsQ0FQRyxLQU9IO0FBQUEsTUFGWEMsS0FFVyxHQUFBLElBQUEsQ0FGWEEsS0FFVztBQUFBLE1BRFJDLElBQ1EsR0FBQSx3QkFBQSxDQUFBLElBQUEsRUFBQSxDQUFBLE9BQUEsRUFBQSxVQUFBLEVBQUEsZUFBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLENBQUEsQ0FBQTs7QUFDWCxNQUFNQyxZQUFZLEdBQUdDLEtBQUssSUFBSUgsS0FBSyxDQUFMQSxNQUFBQSxDQUE5QixNQUFBO0FBRUEsTUFBTUksV0FBVyxHQUNmQyxZQUFBQSxDQUFBQSxRQUFBQSxDQUFBQSxFQUFBQSxLQUFBQSxLQUFBQSxHQUFBQSxZQUFBQSxHQUVJQyxRQUFRLEdBQ1JOLEtBQUssQ0FBTEEsSUFBQUEsR0FDRSxDQUFBLEdBQUEsTUFBQSxDQUFBLE9BQUEsRUFBU08sT0FBQUEsQ0FBVCxLQUFBLEVBQUEsS0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLEdBREZQLE1BQ0UsRUFERkEsR0FFRSxDQUFBLEdBQUEsTUFBQSxDQUFBLE9BQUEsRUFBU1EsT0FBQUEsQ0FBVCxLQUFBLEVBQUEsS0FBQSxDQUFBLElBQUEsRUFBQSxHQUFBLEdBSE0sTUFHTixFQUhNLEdBSVIsQ0FBQSxHQUFBLE1BQUEsQ0FBQSxPQUFBLEVBQUEsWUFBQSxFQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxHQVBOLE1BT00sRUFQTjtBQVNBLE1BQU1DLGNBQWMsR0FDbEJKLFlBQUFBLENBQUFBLFFBQUFBLENBQUFBLEVBQUFBLEtBQUFBLEtBQUFBLEdBQUFBLFNBQUFBLEdBRUlDLFFBQVEsR0FDUk4sS0FBSyxDQUFMQSxJQUFBQSxHQUNFVSxPQUFBQSxDQURGVixPQUFBQSxHQUVFVyxPQUFBQSxDQUhNLE9BQUEsR0FJUkMsS0FBSyxHQUFBLFlBQUEsR0FFTFosS0FBSyxDQUFMQSxJQUFBQSxHQUNBVyxPQUFBQSxDQURBWCxPQUFBQSxHQUVBYSxPQUFBQSxDQVhOLE1BQUE7QUFhQSxNQUFNQyxLQUFLLEdBQ1QsT0FBTyxJQUFJakIsT0FBTyxDQUFQQSxLQUFBQSxLQUFYLENBQUEsSUFBa0NBLE9BQU8sQ0FBUEEsS0FBQUEsSUFBbEMsRUFBQSxHQUNJO0FBQ0VPLElBQUFBLFdBREYsRUFDRUEsV0FERjtBQUVFSyxJQUFBQSxjQUFBQSxFQUFBQTtBQUZGLEdBREosR0FLSSxZQUFBLENBQUEsUUFBQSxDQUFBLEVBQUEsS0FBQSxLQUFBLEdBQ0E7QUFDRU0sSUFBQUEsZ0JBQWdCLEVBRGxCLFdBQUE7QUFFRUMsSUFBQUEsVUFBVSxFQUZaLGNBQUE7QUFHRUMsSUFBQUEsZ0JBQWdCLEVBQUVmO0FBSHBCLEdBREEsR0FNQTtBQUNFYyxJQUFBQSxVQUFVLEVBRFosY0FBQTtBQUVFRSxJQUFBQSxVQUFVLEVBQUU7QUFDVkMsTUFBQUEsSUFBSSxFQURNLFdBQUE7QUFFVkMsTUFBQUEsS0FBSyxFQUFFO0FBRkc7QUFGZCxHQVpOO0FBb0JBLFNBQ0UsS0FBQSxDQUFBLGFBQUEsQ0FBQyxZQUFBLENBQUQsTUFBQSxFQUFBLFFBQUEsQ0FBQTtBQUNFLElBQUEsS0FBSyxFQURQLEtBQUE7QUFFRSxJQUFBLFFBQVEsRUFGVixRQUFBO0FBR0UsSUFBQSxhQUFhLEVBQUVkLFFBQVEsR0FBQSxTQUFBLEdBQWVlO0FBSHhDLEdBQUEsRUFBQSxLQUFBLEVBREYsSUFDRSxDQUFBLENBREY7QUFwREYsQ0FBQTs7ZUErRGUsQ0FBQSxHQUFBLFFBQUEsQ0FBQSxTQUFBLEVBQUEsTUFBQSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ3JleTQwMCwgZ3JleTgwMCwgZ3JleTUwLCB3aGl0ZSwgYmxhY2sgfSBmcm9tICcuLi9zdHlsZXMvY29sb3JzJztcbmltcG9ydCB7XG4gIE5hdGl2ZU1vZHVsZXMsXG4gIFBsYXRmb3JtLFxuICBTdHlsZVByb3AsXG4gIFN3aXRjaCBhcyBOYXRpdmVTd2l0Y2gsXG4gIFZpZXdTdHlsZSxcbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBzZXRDb2xvciBmcm9tICdjb2xvcic7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb3JlL3RoZW1pbmcnO1xuXG5jb25zdCB2ZXJzaW9uID0gTmF0aXZlTW9kdWxlcy5QbGF0Zm9ybUNvbnN0YW50c1xuICA/IE5hdGl2ZU1vZHVsZXMuUGxhdGZvcm1Db25zdGFudHMucmVhY3ROYXRpdmVWZXJzaW9uXG4gIDogdW5kZWZpbmVkO1xuXG50eXBlIFByb3BzID0gUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRoUmVmPHR5cGVvZiBOYXRpdmVTd2l0Y2g+ICYge1xuICAvKipcbiAgICogRGlzYWJsZSB0b2dnbGluZyB0aGUgc3dpdGNoLlxuICAgKi9cbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICAvKipcbiAgICogVmFsdWUgb2YgdGhlIHN3aXRjaCwgdHJ1ZSBtZWFucyAnb24nLCBmYWxzZSBtZWFucyAnb2ZmJy5cbiAgICovXG4gIHZhbHVlPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEN1c3RvbSBjb2xvciBmb3Igc3dpdGNoLlxuICAgKi9cbiAgY29sb3I/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2l0aCB0aGUgbmV3IHZhbHVlIHdoZW4gaXQgY2hhbmdlcy5cbiAgICovXG4gIG9uVmFsdWVDaGFuZ2U/OiBGdW5jdGlvbjtcbiAgc3R5bGU/OiBTdHlsZVByb3A8Vmlld1N0eWxlPjtcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgdGhlbWU6IFJlYWN0TmF0aXZlUGFwZXIuVGhlbWU7XG59O1xuXG4vKipcbiAqIFN3aXRjaCBpcyBhIHZpc3VhbCB0b2dnbGUgYmV0d2VlbiB0d28gbXV0dWFsbHkgZXhjbHVzaXZlIHN0YXRlcyDigJQgb24gYW5kIG9mZi5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwic2NyZWVuc2hvdHNcIj5cbiAqICAgPGZpZ3VyZT5cbiAqICAgICA8aW1nIHNyYz1cInNjcmVlbnNob3RzL3N3aXRjaC1lbmFibGVkLmFuZHJvaWQucG5nXCIgLz5cbiAqICAgICA8ZmlnY2FwdGlvbj5BbmRyb2lkIChlbmFibGVkKTwvZmlnY2FwdGlvbj5cbiAqICAgPC9maWd1cmU+XG4gKiAgIDxmaWd1cmU+XG4gKiAgICAgPGltZyBzcmM9XCJzY3JlZW5zaG90cy9zd2l0Y2gtZGlzYWJsZWQuYW5kcm9pZC5wbmdcIiAvPlxuICogICAgIDxmaWdjYXB0aW9uPkFuZHJvaWQgKGRpc2FibGVkKTwvZmlnY2FwdGlvbj5cbiAqICAgPC9maWd1cmU+XG4gKiAgIDxmaWd1cmU+XG4gKiAgICAgPGltZyBzcmM9XCJzY3JlZW5zaG90cy9zd2l0Y2gtZW5hYmxlZC5pb3MucG5nXCIgLz5cbiAqICAgICA8ZmlnY2FwdGlvbj5pT1MgKGVuYWJsZWQpPC9maWdjYXB0aW9uPlxuICogICA8L2ZpZ3VyZT5cbiAqICAgPGZpZ3VyZT5cbiAqICAgICA8aW1nIHNyYz1cInNjcmVlbnNob3RzL3N3aXRjaC1kaXNhYmxlZC5pb3MucG5nXCIgLz5cbiAqICAgICA8ZmlnY2FwdGlvbj5pT1MgKGRpc2FibGVkKTwvZmlnY2FwdGlvbj5cbiAqICAgPC9maWd1cmU+XG4gKiA8L2Rpdj5cbiAqXG4gKiAjIyBVc2FnZVxuICogYGBganNcbiAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbiAqIGltcG9ydCB7IFN3aXRjaCB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1wYXBlcic7XG4gKlxuICogY29uc3QgTXlDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IFtpc1N3aXRjaE9uLCBzZXRJc1N3aXRjaE9uXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAqXG4gKiAgIGNvbnN0IG9uVG9nZ2xlU3dpdGNoID0gKCkgPT4gc2V0SXNTd2l0Y2hPbighaXNTd2l0Y2hPbik7XG4gKlxuICogICByZXR1cm4gPFN3aXRjaCB2YWx1ZT17aXNTd2l0Y2hPbn0gb25WYWx1ZUNoYW5nZT17b25Ub2dnbGVTd2l0Y2h9IC8+O1xuICogfTtcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBNeUNvbXBvbmVudDtcbiAqIGBgYFxuICovXG5jb25zdCBTd2l0Y2ggPSAoe1xuICB2YWx1ZSxcbiAgZGlzYWJsZWQsXG4gIG9uVmFsdWVDaGFuZ2UsXG4gIGNvbG9yLFxuICB0aGVtZSxcbiAgLi4ucmVzdFxufTogUHJvcHMpID0+IHtcbiAgY29uc3QgY2hlY2tlZENvbG9yID0gY29sb3IgfHwgdGhlbWUuY29sb3JzLmFjY2VudDtcblxuICBjb25zdCBvblRpbnRDb2xvciA9XG4gICAgUGxhdGZvcm0uT1MgPT09ICdpb3MnXG4gICAgICA/IGNoZWNrZWRDb2xvclxuICAgICAgOiBkaXNhYmxlZFxuICAgICAgPyB0aGVtZS5kYXJrXG4gICAgICAgID8gc2V0Q29sb3Iod2hpdGUpLmFscGhhKDAuMSkucmdiKCkuc3RyaW5nKClcbiAgICAgICAgOiBzZXRDb2xvcihibGFjaykuYWxwaGEoMC4xMikucmdiKCkuc3RyaW5nKClcbiAgICAgIDogc2V0Q29sb3IoY2hlY2tlZENvbG9yKS5hbHBoYSgwLjUpLnJnYigpLnN0cmluZygpO1xuXG4gIGNvbnN0IHRodW1iVGludENvbG9yID1cbiAgICBQbGF0Zm9ybS5PUyA9PT0gJ2lvcydcbiAgICAgID8gdW5kZWZpbmVkXG4gICAgICA6IGRpc2FibGVkXG4gICAgICA/IHRoZW1lLmRhcmtcbiAgICAgICAgPyBncmV5ODAwXG4gICAgICAgIDogZ3JleTQwMFxuICAgICAgOiB2YWx1ZVxuICAgICAgPyBjaGVja2VkQ29sb3JcbiAgICAgIDogdGhlbWUuZGFya1xuICAgICAgPyBncmV5NDAwXG4gICAgICA6IGdyZXk1MDtcblxuICBjb25zdCBwcm9wcyA9XG4gICAgdmVyc2lvbiAmJiB2ZXJzaW9uLm1ham9yID09PSAwICYmIHZlcnNpb24ubWlub3IgPD0gNTZcbiAgICAgID8ge1xuICAgICAgICAgIG9uVGludENvbG9yLFxuICAgICAgICAgIHRodW1iVGludENvbG9yLFxuICAgICAgICB9XG4gICAgICA6IFBsYXRmb3JtLk9TID09PSAnd2ViJ1xuICAgICAgPyB7XG4gICAgICAgICAgYWN0aXZlVHJhY2tDb2xvcjogb25UaW50Q29sb3IsXG4gICAgICAgICAgdGh1bWJDb2xvcjogdGh1bWJUaW50Q29sb3IsXG4gICAgICAgICAgYWN0aXZlVGh1bWJDb2xvcjogY2hlY2tlZENvbG9yLFxuICAgICAgICB9XG4gICAgICA6IHtcbiAgICAgICAgICB0aHVtYkNvbG9yOiB0aHVtYlRpbnRDb2xvcixcbiAgICAgICAgICB0cmFja0NvbG9yOiB7XG4gICAgICAgICAgICB0cnVlOiBvblRpbnRDb2xvcixcbiAgICAgICAgICAgIGZhbHNlOiAnJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gIHJldHVybiAoXG4gICAgPE5hdGl2ZVN3aXRjaFxuICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgb25WYWx1ZUNoYW5nZT17ZGlzYWJsZWQgPyB1bmRlZmluZWQgOiBvblZhbHVlQ2hhbmdlfVxuICAgICAgey4uLnByb3BzfVxuICAgICAgey4uLnJlc3R9XG4gICAgLz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShTd2l0Y2gpO1xuIl19