{"version":3,"sources":["ThemeProvider.js"],"names":["ThemeContext","React","createContext","theme","colors","ThemeProvider","props","updateTheme","updates","setState","replaceTheme","defaultTheme","getTheme","state","defaultColors","useDark","darkColors","children","Component","defaultProps","ThemeConsumer","Consumer"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAEO,IAAMA,YAAY,GAAGC,eAAMC,aAAN,CAAoB;AAC5CC,EAAAA,KAAK,EAAE;AACHC,IAAAA,MAAM,EAANA;AADG;AADqC,CAApB,CAArB;;;;IAKcC,a;;;;;AACjB,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACf,8BAAMA,KAAN;;AACA,UAAKC,WAAL,GAAmB,UAACC,OAAD,EAAa;AAC5B,YAAKC,QAAL,CAAc;AAAA,YAAGN,KAAH,QAAGA,KAAH;AAAA,eAAgB;AAC1BA,UAAAA,KAAK,EAAE,wBAAUA,KAAV,EAAiBK,OAAjB;AADmB,SAAhB;AAAA,OAAd;AAGH,KAJD;;AAKA,UAAKE,YAAL,GAAoB,UAACP,KAAD,EAAW;AAC3B,YAAKM,QAAL,CAAc;AAAA,eAAO;AACjBN,UAAAA,KAAK,EAAE,wBAAU,MAAKQ,YAAf,EAA6BR,KAA7B;AADU,SAAP;AAAA,OAAd;AAGH,KAJD;;AAKA,UAAKS,QAAL,GAAgB;AAAA,aAAM,MAAKC,KAAL,CAAWV,KAAjB;AAAA,KAAhB;;AACA,QAAMW,aAAa,GAAGR,KAAK,CAACS,OAAN,GAAgBC,mBAAhB,GAA6BZ,eAAnD;AACA,UAAKO,YAAL,GAAoB,wBAAU;AAC1BP,MAAAA,MAAM,EAAEU;AADkB,KAAV,EAEjBR,KAAK,CAACH,KAFW,CAApB;AAGA,UAAKU,KAAL,GAAa;AACTV,MAAAA,KAAK,EAAE,MAAKQ,YADH;AAETI,MAAAA,OAAO,EAAET,KAAK,CAACS;AAFN,KAAb;AAjBe;AAqBlB;;;;6BAcQ;AACL,aAAQ,6BAAC,YAAD,CAAc,QAAd;AAAuB,QAAA,KAAK,EAAE;AAClCZ,UAAAA,KAAK,EAAE,KAAKU,KAAL,CAAWV,KADgB;AAElCI,UAAAA,WAAW,EAAE,KAAKA,WAFgB;AAGlCG,UAAAA,YAAY,EAAE,KAAKA;AAHe;AAA9B,SAKP,KAAKJ,KAAL,CAAWW,QALJ,CAAR;AAOH;;;6CArB+BX,K,EAAOO,K,EAAO;AAAA,UAClCE,OADkC,GACtBT,KADsB,CAClCS,OADkC;;AAE1C,UAAIA,OAAO,KAAKF,KAAK,CAACE,OAAtB,EAA+B;AAC3B,YAAMD,aAAa,GAAGC,OAAO,GAAGC,mBAAH,GAAgBZ,eAA7C;AACA,eAAO;AACHD,UAAAA,KAAK,EAAE,wBAAUU,KAAK,CAACV,KAAhB,EAAuB,wBAAU;AACpCC,YAAAA,MAAM,EAAEU;AAD4B,WAAV,EAE3BR,KAAK,CAACH,KAFqB,CAAvB,CADJ;AAIHY,UAAAA,OAAO,EAAPA;AAJG,SAAP;AAMH;;AACD,aAAO,IAAP;AACH;;;EAnCsCd,eAAMiB,S;;;AA8CjDb,aAAa,CAACc,YAAd,GAA6B;AACzBhB,EAAAA,KAAK,EAAE,EADkB;AAEzBY,EAAAA,OAAO,EAAE;AAFgB,CAA7B;AAIO,IAAMK,aAAa,GAAGpB,YAAY,CAACqB,QAAnC","sourcesContent":["import React from 'react';\nimport deepmerge from 'deepmerge';\nimport colors from './colors';\nimport darkColors from './colorsDark';\n// @ts-ignore\nexport const ThemeContext = React.createContext({\n    theme: {\n        colors,\n    },\n});\nexport default class ThemeProvider extends React.Component {\n    constructor(props) {\n        super(props);\n        this.updateTheme = (updates) => {\n            this.setState(({ theme }) => ({\n                theme: deepmerge(theme, updates),\n            }));\n        };\n        this.replaceTheme = (theme) => {\n            this.setState(() => ({\n                theme: deepmerge(this.defaultTheme, theme),\n            }));\n        };\n        this.getTheme = () => this.state.theme;\n        const defaultColors = props.useDark ? darkColors : colors;\n        this.defaultTheme = deepmerge({\n            colors: defaultColors,\n        }, props.theme);\n        this.state = {\n            theme: this.defaultTheme,\n            useDark: props.useDark,\n        };\n    }\n    static getDerivedStateFromProps(props, state) {\n        const { useDark } = props;\n        if (useDark !== state.useDark) {\n            const defaultColors = useDark ? darkColors : colors;\n            return {\n                theme: deepmerge(state.theme, deepmerge({\n                    colors: defaultColors,\n                }, props.theme)),\n                useDark,\n            };\n        }\n        return null;\n    }\n    render() {\n        return (<ThemeContext.Provider value={{\n            theme: this.state.theme,\n            updateTheme: this.updateTheme,\n            replaceTheme: this.replaceTheme,\n        }}>\n        {this.props.children}\n      </ThemeContext.Provider>);\n    }\n}\nThemeProvider.defaultProps = {\n    theme: {},\n    useDark: false,\n};\nexport const ThemeConsumer = ThemeContext.Consumer;\n"]}