517c99238b5ebd8d07d40464f57e1d11
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));

var _ThemeProvider = require("./ThemeProvider");

var _theme = _interopRequireDefault(require("./theme"));

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var isClassComponent = function isClassComponent(Component) {
  return Boolean(Component.prototype && Component.prototype.isReactComponent);
};

var ThemedComponent = function ThemedComponent(WrappedComponent, themeKey, displayName) {
  return Object.assign(function (props, forwardedRef) {
    var children = props.children,
        rest = __rest(props, ["children"]);

    return _react.default.createElement(_ThemeProvider.ThemeConsumer, null, function (context) {
      if (!context) {
        var _newProps = Object.assign(Object.assign({}, rest), {
          theme: _theme.default,
          children: children
        });

        return isClassComponent(WrappedComponent) ? _react.default.createElement(WrappedComponent, (0, _extends2.default)({
          ref: forwardedRef
        }, _newProps)) : _react.default.createElement(WrappedComponent, _newProps);
      }

      var theme = context.theme,
          updateTheme = context.updateTheme,
          replaceTheme = context.replaceTheme;
      var newProps = Object.assign(Object.assign({
        theme: theme,
        updateTheme: updateTheme,
        replaceTheme: replaceTheme
      }, (0, _deepmerge.default)(themeKey && theme[themeKey] || {}, rest, {
        clone: false
      })), {
        children: children
      });

      if (isClassComponent(WrappedComponent)) {
        return _react.default.createElement(WrappedComponent, (0, _extends2.default)({
          ref: forwardedRef
        }, newProps));
      }

      return _react.default.createElement(WrappedComponent, newProps);
    });
  }, {
    displayName: displayName
  });
};

function withTheme(WrappedComponent, themeKey) {
  var name = themeKey ? "Themed." + themeKey : "Themed." + (WrappedComponent.displayName || WrappedComponent.name || 'Component');
  var Component = ThemedComponent(WrappedComponent, themeKey, name);

  if (isClassComponent(WrappedComponent)) {
    return (0, _hoistNonReactStatics.default)(_react.default.forwardRef(Component), WrappedComponent);
  }

  return Component;
}

var _default = withTheme;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndpdGhUaGVtZS5qcyJdLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImlzQ2xhc3NDb21wb25lbnQiLCJDb21wb25lbnQiLCJCb29sZWFuIiwiaXNSZWFjdENvbXBvbmVudCIsIlRoZW1lZENvbXBvbmVudCIsIldyYXBwZWRDb21wb25lbnQiLCJ0aGVtZUtleSIsImRpc3BsYXlOYW1lIiwiYXNzaWduIiwicHJvcHMiLCJmb3J3YXJkZWRSZWYiLCJjaGlsZHJlbiIsInJlc3QiLCJjb250ZXh0IiwibmV3UHJvcHMiLCJ0aGVtZSIsIkRlZmF1bHRUaGVtZSIsInVwZGF0ZVRoZW1lIiwicmVwbGFjZVRoZW1lIiwiY2xvbmUiLCJ3aXRoVGhlbWUiLCJuYW1lIiwiUmVhY3QiLCJmb3J3YXJkUmVmIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFXQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFmQSxJQUFJQSxNQUFNLEdBQUksUUFBUSxLQUFLQSxNQUFkLElBQXlCLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUNsRCxNQUFJQyxDQUFDLEdBQUcsRUFBUjs7QUFDQSxPQUFLLElBQUlDLENBQVQsSUFBY0gsQ0FBZDtBQUFpQixRQUFJSSxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ1AsQ0FBckMsRUFBd0NHLENBQXhDLEtBQThDRixDQUFDLENBQUNPLE9BQUYsQ0FBVUwsQ0FBVixJQUFlLENBQWpFLEVBQ2JELENBQUMsQ0FBQ0MsQ0FBRCxDQUFELEdBQU9ILENBQUMsQ0FBQ0csQ0FBRCxDQUFSO0FBREo7O0FBRUEsTUFBSUgsQ0FBQyxJQUFJLElBQUwsSUFBYSxPQUFPSSxNQUFNLENBQUNLLHFCQUFkLEtBQXdDLFVBQXpELEVBQ0ksS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBUixFQUFXUCxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0sscUJBQVAsQ0FBNkJULENBQTdCLENBQXBCLEVBQXFEVSxDQUFDLEdBQUdQLENBQUMsQ0FBQ1EsTUFBM0QsRUFBbUVELENBQUMsRUFBcEUsRUFBd0U7QUFDcEUsUUFBSVQsQ0FBQyxDQUFDTyxPQUFGLENBQVVMLENBQUMsQ0FBQ08sQ0FBRCxDQUFYLElBQWtCLENBQWxCLElBQXVCTixNQUFNLENBQUNDLFNBQVAsQ0FBaUJPLG9CQUFqQixDQUFzQ0wsSUFBdEMsQ0FBMkNQLENBQTNDLEVBQThDRyxDQUFDLENBQUNPLENBQUQsQ0FBL0MsQ0FBM0IsRUFDSVIsQ0FBQyxDQUFDQyxDQUFDLENBQUNPLENBQUQsQ0FBRixDQUFELEdBQVVWLENBQUMsQ0FBQ0csQ0FBQyxDQUFDTyxDQUFELENBQUYsQ0FBWDtBQUNQO0FBQ0wsU0FBT1IsQ0FBUDtBQUNILENBVkQ7O0FBZ0JBLElBQU1XLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBQ0MsU0FBRDtBQUFBLFNBQWVDLE9BQU8sQ0FBQ0QsU0FBUyxDQUFDVCxTQUFWLElBQXVCUyxTQUFTLENBQUNULFNBQVYsQ0FBb0JXLGdCQUE1QyxDQUF0QjtBQUFBLENBQXpCOztBQUNBLElBQU1DLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBQ0MsZ0JBQUQsRUFBbUJDLFFBQW5CLEVBQTZCQyxXQUE3QixFQUE2QztBQUNqRSxTQUFPaEIsTUFBTSxDQUFDaUIsTUFBUCxDQUFjLFVBQUNDLEtBQUQsRUFBUUMsWUFBUixFQUF5QjtBQUVwQyxRQUFFQyxRQUFGLEdBQWVGLEtBQWYsQ0FBRUUsUUFBRjtBQUFBLFFBQXNCQyxJQUF0QixHQUE2QjFCLE1BQU0sQ0FBQ3VCLEtBQUQsRUFBUSxDQUFDLFVBQUQsQ0FBUixDQUFuQzs7QUFDTixXQUFRLDZCQUFDLDRCQUFELFFBQ0wsVUFBQ0ksT0FBRCxFQUFhO0FBRVosVUFBSSxDQUFDQSxPQUFMLEVBQWM7QUFDVixZQUFNQyxTQUFRLEdBQUd2QixNQUFNLENBQUNpQixNQUFQLENBQWNqQixNQUFNLENBQUNpQixNQUFQLENBQWMsRUFBZCxFQUFrQkksSUFBbEIsQ0FBZCxFQUF1QztBQUFFRyxVQUFBQSxLQUFLLEVBQUVDLGNBQVQ7QUFBdUJMLFVBQUFBLFFBQVEsRUFBUkE7QUFBdkIsU0FBdkMsQ0FBakI7O0FBQ0EsZUFBT1gsZ0JBQWdCLENBQUNLLGdCQUFELENBQWhCLEdBQXNDLDZCQUFDLGdCQUFEO0FBQWtCLFVBQUEsR0FBRyxFQUFFSztBQUF2QixXQUF5Q0ksU0FBekMsRUFBdEMsR0FBK0YsNkJBQUMsZ0JBQUQsRUFBc0JBLFNBQXRCLENBQXRHO0FBQ0g7O0FBTFcsVUFNSkMsS0FOSSxHQU1pQ0YsT0FOakMsQ0FNSkUsS0FOSTtBQUFBLFVBTUdFLFdBTkgsR0FNaUNKLE9BTmpDLENBTUdJLFdBTkg7QUFBQSxVQU1nQkMsWUFOaEIsR0FNaUNMLE9BTmpDLENBTWdCSyxZQU5oQjtBQU9aLFVBQU1KLFFBQVEsR0FBR3ZCLE1BQU0sQ0FBQ2lCLE1BQVAsQ0FBY2pCLE1BQU0sQ0FBQ2lCLE1BQVAsQ0FBYztBQUFFTyxRQUFBQSxLQUFLLEVBQUxBLEtBQUY7QUFDekNFLFFBQUFBLFdBQVcsRUFBWEEsV0FEeUM7QUFFekNDLFFBQUFBLFlBQVksRUFBWkE7QUFGeUMsT0FBZCxFQUVYLHdCQUFXWixRQUFRLElBQUlTLEtBQUssQ0FBQ1QsUUFBRCxDQUFsQixJQUFpQyxFQUEzQyxFQUErQ00sSUFBL0MsRUFBcUQ7QUFDckVPLFFBQUFBLEtBQUssRUFBRTtBQUQ4RCxPQUFyRCxDQUZXLENBQWQsRUFJWjtBQUFFUixRQUFBQSxRQUFRLEVBQVJBO0FBQUYsT0FKWSxDQUFqQjs7QUFLQSxVQUFJWCxnQkFBZ0IsQ0FBQ0ssZ0JBQUQsQ0FBcEIsRUFBd0M7QUFDcEMsZUFBTyw2QkFBQyxnQkFBRDtBQUFrQixVQUFBLEdBQUcsRUFBRUs7QUFBdkIsV0FBeUNJLFFBQXpDLEVBQVA7QUFDSDs7QUFDRCxhQUFPLDZCQUFDLGdCQUFELEVBQXNCQSxRQUF0QixDQUFQO0FBQ0gsS0FqQk8sQ0FBUjtBQW1CSCxHQXRCTSxFQXNCSjtBQUFFUCxJQUFBQSxXQUFXLEVBQUVBO0FBQWYsR0F0QkksQ0FBUDtBQXVCSCxDQXhCRDs7QUF5QkEsU0FBU2EsU0FBVCxDQUFtQmYsZ0JBQW5CLEVBQXFDQyxRQUFyQyxFQUErQztBQUMzQyxNQUFNZSxJQUFJLEdBQUdmLFFBQVEsZUFDTEEsUUFESyxnQkFFTEQsZ0JBQWdCLENBQUNFLFdBQWpCLElBQWdDRixnQkFBZ0IsQ0FBQ2dCLElBQWpELElBQXlELFdBRnBELENBQXJCO0FBR0EsTUFBTXBCLFNBQVMsR0FBR0csZUFBZSxDQUFDQyxnQkFBRCxFQUFtQkMsUUFBbkIsRUFBNkJlLElBQTdCLENBQWpDOztBQUNBLE1BQUlyQixnQkFBZ0IsQ0FBQ0ssZ0JBQUQsQ0FBcEIsRUFBd0M7QUFDcEMsV0FBTyxtQ0FBcUJpQixlQUFNQyxVQUFOLENBQWlCdEIsU0FBakIsQ0FBckIsRUFBa0RJLGdCQUFsRCxDQUFQO0FBQ0g7O0FBQ0QsU0FBT0osU0FBUDtBQUNIOztlQUNjbUIsUyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ2RlZXBtZXJnZSc7XG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IHsgVGhlbWVDb25zdW1lciB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgRGVmYXVsdFRoZW1lIGZyb20gJy4vdGhlbWUnO1xuY29uc3QgaXNDbGFzc0NvbXBvbmVudCA9IChDb21wb25lbnQpID0+IEJvb2xlYW4oQ29tcG9uZW50LnByb3RvdHlwZSAmJiBDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpO1xuY29uc3QgVGhlbWVkQ29tcG9uZW50ID0gKFdyYXBwZWRDb21wb25lbnQsIHRoZW1lS2V5LCBkaXNwbGF5TmFtZSkgPT4ge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKChwcm9wcywgZm9yd2FyZGVkUmVmKSA9PiB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gcHJvcHMsIHJlc3QgPSBfX3Jlc3QocHJvcHMsIFtcImNoaWxkcmVuXCJdKTtcbiAgICAgICAgcmV0dXJuICg8VGhlbWVDb25zdW1lcj5cbiAgICAgICAgICB7KGNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIC8vIElmIHVzZXIgaXNuJ3QgdXNpbmcgVGhlbWVQcm92aWRlclxuICAgICAgICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3UHJvcHMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3QpLCB7IHRoZW1lOiBEZWZhdWx0VGhlbWUsIGNoaWxkcmVuIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0NsYXNzQ29tcG9uZW50KFdyYXBwZWRDb21wb25lbnQpID8gKDxXcmFwcGVkQ29tcG9uZW50IHJlZj17Zm9yd2FyZGVkUmVmfSB7Li4ubmV3UHJvcHN9Lz4pIDogKDxXcmFwcGVkQ29tcG9uZW50IHsuLi5uZXdQcm9wc30vPik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IHRoZW1lLCB1cGRhdGVUaGVtZSwgcmVwbGFjZVRoZW1lIH0gPSBjb250ZXh0O1xuICAgICAgICAgICAgY29uc3QgbmV3UHJvcHMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyB0aGVtZSxcbiAgICAgICAgICAgICAgICB1cGRhdGVUaGVtZSxcbiAgICAgICAgICAgICAgICByZXBsYWNlVGhlbWUgfSwgZGVlcG1lcmdlKCh0aGVtZUtleSAmJiB0aGVtZVt0aGVtZUtleV0pIHx8IHt9LCByZXN0LCB7XG4gICAgICAgICAgICAgICAgY2xvbmU6IGZhbHNlLFxuICAgICAgICAgICAgfSkpLCB7IGNoaWxkcmVuIH0pO1xuICAgICAgICAgICAgaWYgKGlzQ2xhc3NDb21wb25lbnQoV3JhcHBlZENvbXBvbmVudCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gPFdyYXBwZWRDb21wb25lbnQgcmVmPXtmb3J3YXJkZWRSZWZ9IHsuLi5uZXdQcm9wc30vPjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiA8V3JhcHBlZENvbXBvbmVudCB7Li4ubmV3UHJvcHN9Lz47XG4gICAgICAgIH19XG4gICAgICAgIDwvVGhlbWVDb25zdW1lcj4pO1xuICAgIH0sIHsgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lIH0pO1xufTtcbmZ1bmN0aW9uIHdpdGhUaGVtZShXcmFwcGVkQ29tcG9uZW50LCB0aGVtZUtleSkge1xuICAgIGNvbnN0IG5hbWUgPSB0aGVtZUtleVxuICAgICAgICA/IGBUaGVtZWQuJHt0aGVtZUtleX1gXG4gICAgICAgIDogYFRoZW1lZC4ke1dyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnfWA7XG4gICAgY29uc3QgQ29tcG9uZW50ID0gVGhlbWVkQ29tcG9uZW50KFdyYXBwZWRDb21wb25lbnQsIHRoZW1lS2V5LCBuYW1lKTtcbiAgICBpZiAoaXNDbGFzc0NvbXBvbmVudChXcmFwcGVkQ29tcG9uZW50KSkge1xuICAgICAgICByZXR1cm4gaG9pc3ROb25SZWFjdFN0YXRpY3MoUmVhY3QuZm9yd2FyZFJlZihDb21wb25lbnQpLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIENvbXBvbmVudDtcbn1cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZTtcbiJdfQ==