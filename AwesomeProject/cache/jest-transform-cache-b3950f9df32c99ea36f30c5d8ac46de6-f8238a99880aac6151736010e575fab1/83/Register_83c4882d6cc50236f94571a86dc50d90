d2741e4327e864782ba340a29cc36ef5
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var Animatable = _interopRequireWildcard(require("react-native-animatable"));

var Yup = _interopRequireWildcard(require("yup"));

var _react = _interopRequireDefault(require("react"));

var _reactNativePaper = require("react-native-paper");

var _reactNative = require("react-native");

var _reactRedux = require("react-redux");

var _native = require("@react-navigation/native");

var _formik = require("formik");

var _MaterialCommunityIcons = _interopRequireDefault(require("react-native-vector-icons/MaterialCommunityIcons"));

var _firestore = _interopRequireDefault(require("@react-native-firebase/firestore"));

var _auth = _interopRequireWildcard(require("@react-native-firebase/auth"));

var _Texbox = _interopRequireDefault(require("../../../components/Texbox"));

var _color = _interopRequireDefault(require("../../../constants/color"));

var _actions = require("../actions/");

var _reactNativeExpoFancyAlerts = require("react-native-expo-fancy-alerts");

var RegisterSchema = Yup.object().shape({
  email: Yup.string().required('Địa chỉ email không được trống'),
  password: Yup.string().required('Mật khẩu không được trống').min(6, 'mật khẩu phải lớn hơn 5 kí tự'),
  name: Yup.string().required('Tên không được trống'),
  confirmPassword: Yup.string().required('Mật khẩu không được để trống').when('password', {
    is: function is(val) {
      return val && val.length > 0 ? true : false;
    },
    then: Yup.string().oneOf([Yup.ref('password')], 'Mật khẩu bạn nhập không khớp')
  })
});

var SignIn = function SignIn() {
  var _React$useState = _react.default.useState(false),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      visible = _React$useState2[0],
      setVisible = _React$useState2[1];

  var Touch = _reactNative.Platform.OS === 'ios' ? _reactNative.TouchableOpacity : _reactNative.TouchableWithoutFeedback;

  var _React$useState3 = _react.default.useState(false),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      loading = _React$useState4[0],
      setLoading = _React$useState4[1];

  var dispatch = (0, _reactRedux.useDispatch)();
  var paperColor = (0, _reactNativePaper.useTheme)().colors;
  var navigation = (0, _native.useNavigation)();
  return _react.default.createElement(_reactNative.View, {
    style: {
      flex: 1
    }
  }, _react.default.createElement(_reactNative.TouchableOpacity, {
    activeOpacity: 1,
    style: {
      flex: 1,
      backgroundColor: _color.default.WHITE
    },
    onPress: _reactNative.Keyboard.dismiss
  }, _react.default.createElement(_reactNative.KeyboardAvoidingView, {
    behavior: _reactNative.Platform.OS === 'ios' ? 'padding' : undefined,
    style: {
      flex: 1
    }
  }, _react.default.createElement(_formik.Formik, {
    initialValues: {
      email: '',
      password: '',
      role: 'User',
      name: '',
      confirmPassword: ''
    },
    validationSchema: RegisterSchema,
    onSubmit: function onSubmit(values) {
      setLoading(true);
      (0, _auth.default)().createUserWithEmailAndPassword(values.email, values.password).then(function () {
        var uid = (0, _auth.default)().currentUser.uid;
        (0, _auth.default)().currentUser.updateProfile({
          displayName: values.name
        });
        (0, _firestore.default)().collection('Profiles').doc(uid).set({
          role: 'User',
          name: values.name
        });
        setVisible(true);
      }).catch(function (error) {
        if (error.code === 'auth/email-already-in-use') {
          setLoading(false);

          _reactNative.Alert.alert('Email này đã tồn tại!');
        }

        if (error.code === 'auth/invalid-email') {
          setLoading(false);

          _reactNative.Alert.alert('Địa chỉ email không hợp lệ!');
        }
      });
    }
  }, function (formik) {
    return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.View, {
      style: {
        alignItems: 'center',
        padding: 16,
        paddingTop: 36
      }
    }, _react.default.createElement(_reactNativePaper.Headline, {
      style: {
        color: paperColor.primary,
        fontWeight: '400'
      }
    }, "\u0110\u0102NG K\xDD")), _react.default.createElement(_reactNative.View, {
      style: {
        flex: 0,
        justifyContent: 'flex-start',
        padding: 16
      }
    }, _react.default.createElement(_Texbox.default, {
      name: "name",
      disabled: loading,
      iconName: "account",
      placeholder: "H\u1ECD T\xEAn ",
      containerStyle: {
        borderWidth: 0,
        backgroundColor: 'white'
      },
      inputContainerStyle: {
        borderBottomWidth: 1.5
      },
      leftIconContainerStyle: {
        marginLeft: 12
      },
      onBlur: function onBlur() {
        return formik.handleBlur('name');
      },
      onChangeText: formik.handleChange('name'),
      value: formik.values.name
    }), _react.default.createElement(_Texbox.default, {
      name: "email",
      autoCapitalize: "none",
      iconName: "email",
      disabled: loading,
      placeholder: "T\xE0i kho\u1EA3n gmail",
      containerStyle: {
        borderWidth: 0,
        backgroundColor: 'white'
      },
      inputContainerStyle: {
        borderBottomWidth: 1.5
      },
      leftIconContainerStyle: {
        marginLeft: 12
      },
      onBlur: function onBlur() {
        return formik.handleBlur('email');
      },
      onChangeText: formik.handleChange('email'),
      value: formik.values.email
    }), _react.default.createElement(_reactNative.View, {
      height: 16
    }), _react.default.createElement(_Texbox.default, {
      name: "password",
      iconName: "lock",
      secureTextEntry: true,
      disabled: loading,
      placeholder: "M\u1EADt kh\u1EA9u",
      containerStyle: {
        borderWidth: 0,
        backgroundColor: 'white'
      },
      inputContainerStyle: {
        borderBottomWidth: 1.5
      },
      leftIconContainerStyle: {
        marginLeft: 12
      },
      onBlur: function onBlur() {
        return formik.handleBlur('password');
      },
      onChangeText: formik.handleChange('password'),
      value: formik.values.password
    }), _react.default.createElement(_Texbox.default, {
      name: "confirmPassword",
      iconName: "shield-lock",
      secureTextEntry: true,
      disabled: loading,
      placeholder: "Nh\u1EADp l\u1EA1i m\u1EADt kh\u1EA9u",
      containerStyle: {
        borderWidth: 0,
        backgroundColor: 'white'
      },
      inputContainerStyle: {
        borderBottomWidth: 1.5
      },
      leftIconContainerStyle: {
        marginLeft: 12
      },
      onBlur: function onBlur() {
        return formik.handleBlur('confirmPassword');
      },
      onChangeText: formik.handleChange('confirmPassword'),
      value: formik.values.confirmPassword
    }), _react.default.createElement(_reactNative.TouchableOpacity, {
      onPress: function onPress() {
        navigation.navigate('SignInScreen');
      }
    }, _react.default.createElement(_reactNative.View, {
      style: {
        alignItems: 'flex-end',
        padding: 12
      }
    }, _react.default.createElement(_reactNative.Text, null, "\u0110\xE3 c\xF3 t\xE0i kho\u1EA3n")))), _react.default.createElement(Animatable.View, {
      animation: "slideInUp",
      duration: 1000,
      style: {
        flex: 1,
        padding: 16,
        justifyContent: 'flex-end'
      }
    }, !visible && _react.default.createElement(_reactNativePaper.Button, {
      disabled: loading,
      loading: loading,
      labelStyle: {
        fontSize: 18
      },
      contentStyle: {
        height: 48,
        alignItems: 'center',
        justifyContent: 'center'
      },
      style: {
        elevation: 0
      },
      uppercase: false,
      icon: "key",
      mode: "contained",
      onPress: formik.handleSubmit,
      dark: true
    }, loading ? 'Đang đăng ký ...' : 'Đăng ký'), visible && _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNativeExpoFancyAlerts.FancyAlert, {
      visible: visible,
      icon: _react.default.createElement(_reactNative.View, {
        style: {
          flex: 1,
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          backgroundColor: '#4CB748',
          borderRadius: 50,
          width: '100%'
        }
      }, _react.default.createElement(_reactNative.Text, null, _react.default.createElement(_MaterialCommunityIcons.default, {
        name: "check",
        size: 30,
        color: "white"
      }))),
      style: {
        backgroundColor: 'white'
      }
    }, _react.default.createElement(_reactNative.View, {
      style: styles.content
    }, _react.default.createElement(_reactNative.Text, {
      style: {}
    }, "\u0110\u0103ng k\xFD th\xE0nh c\xF4ng ..!"), _react.default.createElement(_reactNative.TouchableOpacity, {
      style: styles.btn,
      onPress: function onPress() {
        setVisible(false);
        navigation.navigate('SignInScreen');
      }
    }, _react.default.createElement(_reactNative.Text, {
      style: styles.btnText
    }, "OK"))))), _react.default.createElement(Touch, {
      onPress: function onPress() {
        navigation.navigate('SignInScreen');
      }
    }, _react.default.createElement(_reactNative.View, {
      style: {
        alignItems: 'center',
        padding: 12
      }
    }))));
  }))));
};

var styles = _reactNative.StyleSheet.create({
  alert: {
    backgroundColor: '#EEEEEE'
  },
  icon: {
    flex: 1,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#C3272B',
    width: '100%'
  },
  content: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: -16,
    marginBottom: 16
  },
  contentText: {
    textAlign: 'center'
  },
  btn: {
    borderRadius: 32,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 8,
    paddingVertical: 8,
    alignSelf: 'stretch',
    backgroundColor: '#4CB748',
    marginTop: 16,
    minWidth: '50%',
    paddingHorizontal: 16
  },
  btnText: {
    color: '#FFFFFF'
  }
});

var _default = SignIn;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,