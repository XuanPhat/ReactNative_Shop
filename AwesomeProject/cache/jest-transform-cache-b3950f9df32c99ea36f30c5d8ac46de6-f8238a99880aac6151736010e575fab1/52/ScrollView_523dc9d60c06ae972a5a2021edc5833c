d506c19092cc86d19679a2670de136bb
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _ScrollViewNativeComponent = _interopRequireDefault(require("./ScrollViewNativeComponent"));

var _ScrollContentViewNativeComponent = _interopRequireDefault(require("./ScrollContentViewNativeComponent"));

var _AndroidHorizontalScrollViewNativeComponent = _interopRequireDefault(require("./AndroidHorizontalScrollViewNativeComponent"));

var _AndroidHorizontalScrollContentViewNativeComponent = _interopRequireDefault(require("./AndroidHorizontalScrollContentViewNativeComponent"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var AnimatedImplementation = require('../../Animated/src/AnimatedImplementation');

var Platform = require('../../Utilities/Platform');

var React = require('react');

var ReactNative = require('../../Renderer/shims/ReactNative');

require('../../Renderer/shims/ReactNative');

var ScrollResponder = require('../ScrollResponder');

var ScrollViewStickyHeader = require('./ScrollViewStickyHeader');

var StyleSheet = require('../../StyleSheet/StyleSheet');

var View = require('../View/View');

var dismissKeyboard = require('../../Utilities/dismissKeyboard');

var flattenStyle = require('../../StyleSheet/flattenStyle');

var invariant = require('invariant');

var processDecelerationRate = require('./processDecelerationRate');

var resolveAssetSource = require('../../Image/resolveAssetSource');

var splitLayoutProps = require('../../StyleSheet/splitLayoutProps');

var setAndForwardRef = require('../../Utilities/setAndForwardRef');

var AndroidScrollView;
var AndroidHorizontalScrollContentView;
var AndroidHorizontalScrollView;
var RCTScrollView;
var RCTScrollContentView;

if (Platform.OS === 'android') {
  AndroidScrollView = _ScrollViewNativeComponent.default;
  AndroidHorizontalScrollView = _AndroidHorizontalScrollViewNativeComponent.default;
  AndroidHorizontalScrollContentView = _AndroidHorizontalScrollContentViewNativeComponent.default;
} else {
  RCTScrollView = _ScrollViewNativeComponent.default;
  RCTScrollContentView = _ScrollContentViewNativeComponent.default;
}

function createScrollResponder(node) {
  var scrollResponder = _objectSpread({}, ScrollResponder.Mixin);

  for (var key in scrollResponder) {
    if (typeof scrollResponder[key] === 'function') {
      scrollResponder[key] = scrollResponder[key].bind(node);
    }
  }

  return scrollResponder;
}

var Context = React.createContext(null);
var standardHorizontalContext = Object.freeze({
  horizontal: true
});
var standardVerticalContext = Object.freeze({
  horizontal: false
});

var ScrollView = function (_React$Component) {
  (0, _inherits2.default)(ScrollView, _React$Component);

  var _super = _createSuper(ScrollView);

  function ScrollView(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ScrollView);
    _this = _super.call(this, props);
    _this._scrollResponder = createScrollResponder((0, _assertThisInitialized2.default)(_this));
    _this._scrollAnimatedValue = new AnimatedImplementation.Value(0);
    _this._scrollAnimatedValueAttachment = null;
    _this._stickyHeaderRefs = new Map();
    _this._headerLayoutYs = new Map();
    _this.state = _objectSpread({
      layoutHeight: null
    }, ScrollResponder.Mixin.scrollResponderMixinGetInitialState());
    _this._setNativeRef = setAndForwardRef({
      getForwardedRef: function getForwardedRef() {
        return _this.props.scrollViewRef;
      },
      setLocalRef: function setLocalRef(ref) {
        _this._scrollViewRef = ref;

        if (ref) {
          ref.getScrollResponder = _this.getScrollResponder;
          ref.getScrollableNode = _this.getScrollableNode;
          ref.getInnerViewNode = _this.getInnerViewNode;
          ref.getInnerViewRef = _this.getInnerViewRef;
          ref.getNativeScrollRef = _this.getNativeScrollRef;
          ref.scrollTo = _this.scrollTo;
          ref.scrollToEnd = _this.scrollToEnd;
          ref.flashScrollIndicators = _this.flashScrollIndicators;
          ref.scrollResponderZoomTo = _this.scrollResponderZoomTo;
          ref.scrollResponderScrollNativeHandleToKeyboard = _this.scrollResponderScrollNativeHandleToKeyboard;
        }
      }
    });

    _this.getScrollResponder = function () {
      return (0, _assertThisInitialized2.default)(_this);
    };

    _this.getScrollableNode = function () {
      return ReactNative.findNodeHandle(_this._scrollViewRef);
    };

    _this.getNativeScrollRef = function () {
      return _this._scrollViewRef;
    };

    _this.scrollTo = function (options, deprecatedX, deprecatedAnimated) {
      var x, y, animated;

      if (typeof options === 'number') {
        console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' + 'animated: true})` instead.');
        y = options;
        x = deprecatedX;
        animated = deprecatedAnimated;
      } else if (options) {
        y = options.y;
        x = options.x;
        animated = options.animated;
      }

      _this._scrollResponder.scrollResponderScrollTo({
        x: x || 0,
        y: y || 0,
        animated: animated !== false
      });
    };

    _this.scrollToEnd = function (options) {
      var animated = (options && options.animated) !== false;

      _this._scrollResponder.scrollResponderScrollToEnd({
        animated: animated
      });
    };

    _this.flashScrollIndicators = function () {
      _this._scrollResponder.scrollResponderFlashScrollIndicators();
    };

    _this._handleScroll = function (e) {
      if (__DEV__) {
        if (_this.props.onScroll && _this.props.scrollEventThrottle == null && Platform.OS === 'ios') {
          console.log('You specified `onScroll` on a <ScrollView> but not ' + '`scrollEventThrottle`. You will only receive one event. ' + 'Using `16` you get all the events but be aware that it may ' + "cause frame drops, use a bigger number if you don't need as " + 'much precision.');
        }
      }

      if (Platform.OS === 'android') {
        if (_this.props.keyboardDismissMode === 'on-drag' && _this.state.isTouching) {
          dismissKeyboard();
        }
      }

      _this._scrollResponder.scrollResponderHandleScroll(e);
    };

    _this._handleLayout = function (e) {
      if (_this.props.invertStickyHeaders === true) {
        _this.setState({
          layoutHeight: e.nativeEvent.layout.height
        });
      }

      if (_this.props.onLayout) {
        _this.props.onLayout(e);
      }
    };

    _this._handleContentOnLayout = function (e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          width = _e$nativeEvent$layout.width,
          height = _e$nativeEvent$layout.height;
      _this.props.onContentSizeChange && _this.props.onContentSizeChange(width, height);
    };

    _this._scrollViewRef = null;
    _this._innerViewRef = null;
    _this._setInnerViewRef = setAndForwardRef({
      getForwardedRef: function getForwardedRef() {
        return _this.props.innerViewRef;
      },
      setLocalRef: function setLocalRef(ref) {
        _this._innerViewRef = ref;
      }
    });

    for (var key in ScrollResponder.Mixin) {
      if (typeof ScrollResponder.Mixin[key] === 'function' && key.startsWith('scrollResponder')) {
        (0, _assertThisInitialized2.default)(_this)[key] = ScrollResponder.Mixin[key].bind((0, _assertThisInitialized2.default)(_this));
      }
    }

    Object.keys(ScrollResponder.Mixin).filter(function (key) {
      return typeof ScrollResponder.Mixin[key] !== 'function';
    }).forEach(function (key) {
      (0, _assertThisInitialized2.default)(_this)[key] = ScrollResponder.Mixin[key];
    });
    return _this;
  }

  (0, _createClass2.default)(ScrollView, [{
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      var _this$props$contentOf, _this$props$contentOf2, _this$props$contentIn, _this$props$contentIn2;

      this._scrollResponder.UNSAFE_componentWillMount();

      this._scrollAnimatedValue = new AnimatedImplementation.Value((_this$props$contentOf = (_this$props$contentOf2 = this.props.contentOffset) == null ? void 0 : _this$props$contentOf2.y) != null ? _this$props$contentOf : 0);

      this._scrollAnimatedValue.setOffset((_this$props$contentIn = (_this$props$contentIn2 = this.props.contentInset) == null ? void 0 : _this$props$contentIn2.top) != null ? _this$props$contentIn : 0);

      this._stickyHeaderRefs = new Map();
      this._headerLayoutYs = new Map();
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var currentContentInsetTop = this.props.contentInset ? this.props.contentInset.top : 0;
      var nextContentInsetTop = nextProps.contentInset ? nextProps.contentInset.top : 0;

      if (currentContentInsetTop !== nextContentInsetTop) {
        this._scrollAnimatedValue.setOffset(nextContentInsetTop || 0);
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._updateAnimatedNodeAttachment();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this._updateAnimatedNodeAttachment();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._scrollResponder.componentWillUnmount();

      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }
    }
  }, {
    key: "getInnerViewNode",
    value: function getInnerViewNode() {
      return ReactNative.findNodeHandle(this._innerViewRef);
    }
  }, {
    key: "getInnerViewRef",
    value: function getInnerViewRef() {
      return this._innerViewRef;
    }
  }, {
    key: "_getKeyForIndex",
    value: function _getKeyForIndex(index, childArray) {
      var child = childArray[index];
      return child && child.key;
    }
  }, {
    key: "_updateAnimatedNodeAttachment",
    value: function _updateAnimatedNodeAttachment() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }

      if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
        this._scrollAnimatedValueAttachment = AnimatedImplementation.attachNativeEvent(this._scrollViewRef, 'onScroll', [{
          nativeEvent: {
            contentOffset: {
              y: this._scrollAnimatedValue
            }
          }
        }]);
      }
    }
  }, {
    key: "_setStickyHeaderRef",
    value: function _setStickyHeaderRef(key, ref) {
      if (ref) {
        this._stickyHeaderRefs.set(key, ref);
      } else {
        this._stickyHeaderRefs.delete(key);
      }
    }
  }, {
    key: "_onStickyHeaderLayout",
    value: function _onStickyHeaderLayout(index, event, key) {
      var stickyHeaderIndices = this.props.stickyHeaderIndices;

      if (!stickyHeaderIndices) {
        return;
      }

      var childArray = React.Children.toArray(this.props.children);

      if (key !== this._getKeyForIndex(index, childArray)) {
        return;
      }

      var layoutY = event.nativeEvent.layout.y;

      this._headerLayoutYs.set(key, layoutY);

      var indexOfIndex = stickyHeaderIndices.indexOf(index);
      var previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];

      if (previousHeaderIndex != null) {
        var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));

        previousHeader && previousHeader.setNextHeaderY && previousHeader.setNextHeaderY(layoutY);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var ScrollViewClass;
      var ScrollContentContainerViewClass;

      if (Platform.OS === 'android') {
        if (this.props.horizontal === true) {
          ScrollViewClass = AndroidHorizontalScrollView;
          ScrollContentContainerViewClass = AndroidHorizontalScrollContentView;
        } else {
          ScrollViewClass = AndroidScrollView;
          ScrollContentContainerViewClass = View;
        }
      } else {
        ScrollViewClass = RCTScrollView;
        ScrollContentContainerViewClass = RCTScrollContentView;
      }

      invariant(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');
      invariant(ScrollContentContainerViewClass !== undefined, 'ScrollContentContainerViewClass must not be undefined');
      var contentContainerStyle = [this.props.horizontal === true && styles.contentContainerHorizontal, this.props.contentContainerStyle];

      if (__DEV__ && this.props.style !== undefined) {
        var style = flattenStyle(this.props.style);
        var childLayoutProps = ['alignItems', 'justifyContent'].filter(function (prop) {
          return style && style[prop] !== undefined;
        });
        invariant(childLayoutProps.length === 0, 'ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');
      }

      var contentSizeChangeProps = {};

      if (this.props.onContentSizeChange) {
        contentSizeChangeProps = {
          onLayout: this._handleContentOnLayout
        };
      }

      var stickyHeaderIndices = this.props.stickyHeaderIndices;
      var children = this.props.children;

      if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {
        var childArray = React.Children.toArray(this.props.children);
        children = childArray.map(function (child, index) {
          var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;

          if (indexOfIndex > -1) {
            var key = child.key;
            var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
            var StickyHeaderComponent = _this2.props.StickyHeaderComponent || ScrollViewStickyHeader;
            return React.createElement(StickyHeaderComponent, {
              key: key,
              ref: function ref(_ref) {
                return _this2._setStickyHeaderRef(key, _ref);
              },
              nextHeaderLayoutY: _this2._headerLayoutYs.get(_this2._getKeyForIndex(nextIndex, childArray)),
              onLayout: function onLayout(event) {
                return _this2._onStickyHeaderLayout(index, event, key);
              },
              scrollAnimatedValue: _this2._scrollAnimatedValue,
              inverted: _this2.props.invertStickyHeaders,
              scrollViewHeight: _this2.state.layoutHeight
            }, child);
          } else {
            return child;
          }
        });
      }

      children = React.createElement(Context.Provider, {
        value: this.props.horizontal === true ? standardHorizontalContext : standardVerticalContext
      }, children);
      var hasStickyHeaders = Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;
      var contentContainer = React.createElement(ScrollContentContainerViewClass, (0, _extends2.default)({}, contentSizeChangeProps, {
        ref: this._setInnerViewRef,
        style: contentContainerStyle,
        removeClippedSubviews: Platform.OS === 'android' && hasStickyHeaders ? false : this.props.removeClippedSubviews,
        collapsable: false
      }), children);
      var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;
      var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;
      var DEPRECATED_sendUpdatedChildFrames = !!this.props.DEPRECATED_sendUpdatedChildFrames;
      var baseStyle = this.props.horizontal === true ? styles.baseHorizontal : styles.baseVertical;

      var props = _objectSpread(_objectSpread({}, this.props), {}, {
        alwaysBounceHorizontal: alwaysBounceHorizontal,
        alwaysBounceVertical: alwaysBounceVertical,
        style: [baseStyle, this.props.style],
        onContentSizeChange: null,
        onLayout: this._handleLayout,
        onMomentumScrollBegin: this._scrollResponder.scrollResponderHandleMomentumScrollBegin,
        onMomentumScrollEnd: this._scrollResponder.scrollResponderHandleMomentumScrollEnd,
        onResponderGrant: this._scrollResponder.scrollResponderHandleResponderGrant,
        onResponderReject: this._scrollResponder.scrollResponderHandleResponderReject,
        onResponderRelease: this._scrollResponder.scrollResponderHandleResponderRelease,
        onResponderTerminationRequest: this._scrollResponder.scrollResponderHandleTerminationRequest,
        onScrollBeginDrag: this._scrollResponder.scrollResponderHandleScrollBeginDrag,
        onScrollEndDrag: this._scrollResponder.scrollResponderHandleScrollEndDrag,
        onScrollShouldSetResponder: this._scrollResponder.scrollResponderHandleScrollShouldSetResponder,
        onStartShouldSetResponder: this._scrollResponder.scrollResponderHandleStartShouldSetResponder,
        onStartShouldSetResponderCapture: this._scrollResponder.scrollResponderHandleStartShouldSetResponderCapture,
        onTouchEnd: this._scrollResponder.scrollResponderHandleTouchEnd,
        onTouchMove: this._scrollResponder.scrollResponderHandleTouchMove,
        onTouchStart: this._scrollResponder.scrollResponderHandleTouchStart,
        onTouchCancel: this._scrollResponder.scrollResponderHandleTouchCancel,
        onScroll: this._handleScroll,
        scrollBarThumbImage: resolveAssetSource(this.props.scrollBarThumbImage),
        scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
        sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
        DEPRECATED_sendUpdatedChildFrames: DEPRECATED_sendUpdatedChildFrames,
        snapToStart: this.props.snapToStart !== false,
        snapToEnd: this.props.snapToEnd !== false,
        pagingEnabled: Platform.select({
          ios: this.props.pagingEnabled === true && this.props.snapToInterval == null && this.props.snapToOffsets == null,
          android: this.props.pagingEnabled === true || this.props.snapToInterval != null || this.props.snapToOffsets != null
        })
      });

      var decelerationRate = this.props.decelerationRate;

      if (decelerationRate != null) {
        props.decelerationRate = processDecelerationRate(decelerationRate);
      }

      var refreshControl = this.props.refreshControl;

      if (refreshControl) {
        if (Platform.OS === 'ios') {
          return React.createElement(ScrollViewClass, (0, _extends2.default)({}, props, {
            ref: this._setNativeRef
          }), Platform.isTV ? null : refreshControl, contentContainer);
        } else if (Platform.OS === 'android') {
          var _splitLayoutProps = splitLayoutProps(flattenStyle(props.style)),
              outer = _splitLayoutProps.outer,
              inner = _splitLayoutProps.inner;

          return React.cloneElement(refreshControl, {
            style: [baseStyle, outer]
          }, React.createElement(ScrollViewClass, (0, _extends2.default)({}, props, {
            style: [baseStyle, inner],
            ref: this._setNativeRef
          }), contentContainer));
        }
      }

      return React.createElement(ScrollViewClass, (0, _extends2.default)({}, props, {
        ref: this._setNativeRef
      }), contentContainer);
    }
  }]);
  return ScrollView;
}(React.Component);

ScrollView.Context = Context;
var styles = StyleSheet.create({
  baseVertical: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'column',
    overflow: 'scroll'
  },
  baseHorizontal: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'row',
    overflow: 'scroll'
  },
  contentContainerHorizontal: {
    flexDirection: 'row'
  }
});

function Wrapper(props, ref) {
  return React.createElement(ScrollView, (0, _extends2.default)({}, props, {
    scrollViewRef: ref
  }));
}

Wrapper.displayName = 'ScrollView';
var ForwardedScrollView = React.forwardRef(Wrapper);
ForwardedScrollView.Context = Context;
ForwardedScrollView.displayName = 'ScrollView';
module.exports = ForwardedScrollView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjcm9sbFZpZXcuanMiXSwibmFtZXMiOlsiQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbiIsInJlcXVpcmUiLCJQbGF0Zm9ybSIsIlJlYWN0IiwiUmVhY3ROYXRpdmUiLCJTY3JvbGxSZXNwb25kZXIiLCJTY3JvbGxWaWV3U3RpY2t5SGVhZGVyIiwiU3R5bGVTaGVldCIsIlZpZXciLCJkaXNtaXNzS2V5Ym9hcmQiLCJmbGF0dGVuU3R5bGUiLCJpbnZhcmlhbnQiLCJwcm9jZXNzRGVjZWxlcmF0aW9uUmF0ZSIsInJlc29sdmVBc3NldFNvdXJjZSIsInNwbGl0TGF5b3V0UHJvcHMiLCJzZXRBbmRGb3J3YXJkUmVmIiwiQW5kcm9pZFNjcm9sbFZpZXciLCJBbmRyb2lkSG9yaXpvbnRhbFNjcm9sbENvbnRlbnRWaWV3IiwiQW5kcm9pZEhvcml6b250YWxTY3JvbGxWaWV3IiwiUkNUU2Nyb2xsVmlldyIsIlJDVFNjcm9sbENvbnRlbnRWaWV3IiwiT1MiLCJTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50IiwiQW5kcm9pZEhvcml6b250YWxTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50IiwiQW5kcm9pZEhvcml6b250YWxTY3JvbGxDb250ZW50Vmlld05hdGl2ZUNvbXBvbmVudCIsIlNjcm9sbENvbnRlbnRWaWV3TmF0aXZlQ29tcG9uZW50IiwiY3JlYXRlU2Nyb2xsUmVzcG9uZGVyIiwibm9kZSIsInNjcm9sbFJlc3BvbmRlciIsIk1peGluIiwia2V5IiwiYmluZCIsIkNvbnRleHQiLCJjcmVhdGVDb250ZXh0Iiwic3RhbmRhcmRIb3Jpem9udGFsQ29udGV4dCIsIk9iamVjdCIsImZyZWV6ZSIsImhvcml6b250YWwiLCJzdGFuZGFyZFZlcnRpY2FsQ29udGV4dCIsIlNjcm9sbFZpZXciLCJwcm9wcyIsIl9zY3JvbGxSZXNwb25kZXIiLCJfc2Nyb2xsQW5pbWF0ZWRWYWx1ZSIsIlZhbHVlIiwiX3Njcm9sbEFuaW1hdGVkVmFsdWVBdHRhY2htZW50IiwiX3N0aWNreUhlYWRlclJlZnMiLCJNYXAiLCJfaGVhZGVyTGF5b3V0WXMiLCJzdGF0ZSIsImxheW91dEhlaWdodCIsInNjcm9sbFJlc3BvbmRlck1peGluR2V0SW5pdGlhbFN0YXRlIiwiX3NldE5hdGl2ZVJlZiIsImdldEZvcndhcmRlZFJlZiIsInNjcm9sbFZpZXdSZWYiLCJzZXRMb2NhbFJlZiIsInJlZiIsIl9zY3JvbGxWaWV3UmVmIiwiZ2V0U2Nyb2xsUmVzcG9uZGVyIiwiZ2V0U2Nyb2xsYWJsZU5vZGUiLCJnZXRJbm5lclZpZXdOb2RlIiwiZ2V0SW5uZXJWaWV3UmVmIiwiZ2V0TmF0aXZlU2Nyb2xsUmVmIiwic2Nyb2xsVG8iLCJzY3JvbGxUb0VuZCIsImZsYXNoU2Nyb2xsSW5kaWNhdG9ycyIsInNjcm9sbFJlc3BvbmRlclpvb21UbyIsInNjcm9sbFJlc3BvbmRlclNjcm9sbE5hdGl2ZUhhbmRsZVRvS2V5Ym9hcmQiLCJmaW5kTm9kZUhhbmRsZSIsIm9wdGlvbnMiLCJkZXByZWNhdGVkWCIsImRlcHJlY2F0ZWRBbmltYXRlZCIsIngiLCJ5IiwiYW5pbWF0ZWQiLCJjb25zb2xlIiwid2FybiIsInNjcm9sbFJlc3BvbmRlclNjcm9sbFRvIiwic2Nyb2xsUmVzcG9uZGVyU2Nyb2xsVG9FbmQiLCJzY3JvbGxSZXNwb25kZXJGbGFzaFNjcm9sbEluZGljYXRvcnMiLCJfaGFuZGxlU2Nyb2xsIiwiZSIsIl9fREVWX18iLCJvblNjcm9sbCIsInNjcm9sbEV2ZW50VGhyb3R0bGUiLCJsb2ciLCJrZXlib2FyZERpc21pc3NNb2RlIiwiaXNUb3VjaGluZyIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbCIsIl9oYW5kbGVMYXlvdXQiLCJpbnZlcnRTdGlja3lIZWFkZXJzIiwic2V0U3RhdGUiLCJuYXRpdmVFdmVudCIsImxheW91dCIsImhlaWdodCIsIm9uTGF5b3V0IiwiX2hhbmRsZUNvbnRlbnRPbkxheW91dCIsIndpZHRoIiwib25Db250ZW50U2l6ZUNoYW5nZSIsIl9pbm5lclZpZXdSZWYiLCJfc2V0SW5uZXJWaWV3UmVmIiwiaW5uZXJWaWV3UmVmIiwic3RhcnRzV2l0aCIsImtleXMiLCJmaWx0ZXIiLCJmb3JFYWNoIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbnRlbnRPZmZzZXQiLCJzZXRPZmZzZXQiLCJjb250ZW50SW5zZXQiLCJ0b3AiLCJuZXh0UHJvcHMiLCJjdXJyZW50Q29udGVudEluc2V0VG9wIiwibmV4dENvbnRlbnRJbnNldFRvcCIsIl91cGRhdGVBbmltYXRlZE5vZGVBdHRhY2htZW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJkZXRhY2giLCJpbmRleCIsImNoaWxkQXJyYXkiLCJjaGlsZCIsInN0aWNreUhlYWRlckluZGljZXMiLCJsZW5ndGgiLCJhdHRhY2hOYXRpdmVFdmVudCIsInNldCIsImRlbGV0ZSIsImV2ZW50IiwiQ2hpbGRyZW4iLCJ0b0FycmF5IiwiY2hpbGRyZW4iLCJfZ2V0S2V5Rm9ySW5kZXgiLCJsYXlvdXRZIiwiaW5kZXhPZkluZGV4IiwiaW5kZXhPZiIsInByZXZpb3VzSGVhZGVySW5kZXgiLCJwcmV2aW91c0hlYWRlciIsImdldCIsInNldE5leHRIZWFkZXJZIiwiU2Nyb2xsVmlld0NsYXNzIiwiU2Nyb2xsQ29udGVudENvbnRhaW5lclZpZXdDbGFzcyIsInVuZGVmaW5lZCIsImNvbnRlbnRDb250YWluZXJTdHlsZSIsInN0eWxlcyIsImNvbnRlbnRDb250YWluZXJIb3Jpem9udGFsIiwic3R5bGUiLCJjaGlsZExheW91dFByb3BzIiwicHJvcCIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb250ZW50U2l6ZUNoYW5nZVByb3BzIiwibWFwIiwibmV4dEluZGV4IiwiU3RpY2t5SGVhZGVyQ29tcG9uZW50IiwiX3NldFN0aWNreUhlYWRlclJlZiIsIl9vblN0aWNreUhlYWRlckxheW91dCIsImhhc1N0aWNreUhlYWRlcnMiLCJBcnJheSIsImlzQXJyYXkiLCJjb250ZW50Q29udGFpbmVyIiwicmVtb3ZlQ2xpcHBlZFN1YnZpZXdzIiwiYWx3YXlzQm91bmNlSG9yaXpvbnRhbCIsImFsd2F5c0JvdW5jZVZlcnRpY2FsIiwiREVQUkVDQVRFRF9zZW5kVXBkYXRlZENoaWxkRnJhbWVzIiwiYmFzZVN0eWxlIiwiYmFzZUhvcml6b250YWwiLCJiYXNlVmVydGljYWwiLCJvbk1vbWVudHVtU2Nyb2xsQmVnaW4iLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVNb21lbnR1bVNjcm9sbEJlZ2luIiwib25Nb21lbnR1bVNjcm9sbEVuZCIsInNjcm9sbFJlc3BvbmRlckhhbmRsZU1vbWVudHVtU2Nyb2xsRW5kIiwib25SZXNwb25kZXJHcmFudCIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVJlc3BvbmRlckdyYW50Iiwib25SZXNwb25kZXJSZWplY3QiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVSZXNwb25kZXJSZWplY3QiLCJvblJlc3BvbmRlclJlbGVhc2UiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVSZXNwb25kZXJSZWxlYXNlIiwib25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3QiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVUZXJtaW5hdGlvblJlcXVlc3QiLCJvblNjcm9sbEJlZ2luRHJhZyIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbEJlZ2luRHJhZyIsIm9uU2Nyb2xsRW5kRHJhZyIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbEVuZERyYWciLCJvblNjcm9sbFNob3VsZFNldFJlc3BvbmRlciIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbFNob3VsZFNldFJlc3BvbmRlciIsIm9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXIiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVTdGFydFNob3VsZFNldFJlc3BvbmRlciIsIm9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlIiwic2Nyb2xsUmVzcG9uZGVySGFuZGxlU3RhcnRTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlIiwib25Ub3VjaEVuZCIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVRvdWNoRW5kIiwib25Ub3VjaE1vdmUiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaE1vdmUiLCJvblRvdWNoU3RhcnQiLCJzY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaFN0YXJ0Iiwib25Ub3VjaENhbmNlbCIsInNjcm9sbFJlc3BvbmRlckhhbmRsZVRvdWNoQ2FuY2VsIiwic2Nyb2xsQmFyVGh1bWJJbWFnZSIsInNlbmRNb21lbnR1bUV2ZW50cyIsInNuYXBUb1N0YXJ0Iiwic25hcFRvRW5kIiwicGFnaW5nRW5hYmxlZCIsInNlbGVjdCIsImlvcyIsInNuYXBUb0ludGVydmFsIiwic25hcFRvT2Zmc2V0cyIsImFuZHJvaWQiLCJkZWNlbGVyYXRpb25SYXRlIiwicmVmcmVzaENvbnRyb2wiLCJpc1RWIiwib3V0ZXIiLCJpbm5lciIsImNsb25lRWxlbWVudCIsIkNvbXBvbmVudCIsImNyZWF0ZSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImZsZXhEaXJlY3Rpb24iLCJvdmVyZmxvdyIsIldyYXBwZXIiLCJkaXNwbGF5TmFtZSIsIkZvcndhcmRlZFNjcm9sbFZpZXciLCJmb3J3YXJkUmVmIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0NBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7Ozs7O0FBbkNBLElBQU1BLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsMkNBQUQsQ0FBdEM7O0FBQ0EsSUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsMEJBQUQsQ0FBeEI7O0FBQ0EsSUFBTUUsS0FBSyxHQUFHRixPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxJQUFNRyxXQUFXLEdBQUdILE9BQU8sQ0FBQyxrQ0FBRCxDQUEzQjs7QUFDQUEsT0FBTyxDQUFDLGtDQUFELENBQVA7O0FBQ0EsSUFBTUksZUFBZSxHQUFHSixPQUFPLENBQUMsb0JBQUQsQ0FBL0I7O0FBQ0EsSUFBTUssc0JBQXNCLEdBQUdMLE9BQU8sQ0FBQywwQkFBRCxDQUF0Qzs7QUFDQSxJQUFNTSxVQUFVLEdBQUdOLE9B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QVIsR0FBc0IsWUFBdEI7QUFDQSxJQUFNQyxtQkFBbUIsR0FBR3ZOLEtBQUssQ0FBQ3dOLFVBQU4sQ0FBaUJILE9BQWpCLENBQTVCO0FBR0FFLG1CQUFtQixDQUFDMUwsT0FBcEIsR0FBOEJBLE9BQTlCO0FBRUEwTCxtQkFBbUIsQ0FBQ0QsV0FBcEIsR0FBa0MsWUFBbEM7QUFFQUcsTUFBTSxDQUFDQyxPQUFQLEdBQW1CSCxtQkFBbkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL0FuaW1hdGVkL3NyYy9BbmltYXRlZEltcGxlbWVudGF0aW9uJyk7XG5jb25zdCBQbGF0Zm9ybSA9IHJlcXVpcmUoJy4uLy4uL1V0aWxpdGllcy9QbGF0Zm9ybScpO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgUmVhY3ROYXRpdmUgPSByZXF1aXJlKCcuLi8uLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpO1xucmVxdWlyZSgnLi4vLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmUnKTsgLy8gRm9yY2Ugc2lkZSBlZmZlY3RzIHRvIHByZXZlbnQgVDU1NzQ0MzExXG5jb25zdCBTY3JvbGxSZXNwb25kZXIgPSByZXF1aXJlKCcuLi9TY3JvbGxSZXNwb25kZXInKTtcbmNvbnN0IFNjcm9sbFZpZXdTdGlja3lIZWFkZXIgPSByZXF1aXJlKCcuL1Njcm9sbFZpZXdTdGlja3lIZWFkZXInKTtcbmNvbnN0IFN0eWxlU2hlZXQgPSByZXF1aXJlKCcuLi8uLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnKTtcbmNvbnN0IFZpZXcgPSByZXF1aXJlKCcuLi9WaWV3L1ZpZXcnKTtcblxuY29uc3QgZGlzbWlzc0tleWJvYXJkID0gcmVxdWlyZSgnLi4vLi4vVXRpbGl0aWVzL2Rpc21pc3NLZXlib2FyZCcpO1xuY29uc3QgZmxhdHRlblN0eWxlID0gcmVxdWlyZSgnLi4vLi4vU3R5bGVTaGVldC9mbGF0dGVuU3R5bGUnKTtcbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuY29uc3QgcHJvY2Vzc0RlY2VsZXJhdGlvblJhdGUgPSByZXF1aXJlKCcuL3Byb2Nlc3NEZWNlbGVyYXRpb25SYXRlJyk7XG5jb25zdCByZXNvbHZlQXNzZXRTb3VyY2UgPSByZXF1aXJlKCcuLi8uLi9JbWFnZS9yZXNvbHZlQXNzZXRTb3VyY2UnKTtcbmNvbnN0IHNwbGl0TGF5b3V0UHJvcHMgPSByZXF1aXJlKCcuLi8uLi9TdHlsZVNoZWV0L3NwbGl0TGF5b3V0UHJvcHMnKTtcbmNvbnN0IHNldEFuZEZvcndhcmRSZWYgPSByZXF1aXJlKCcuLi8uLi9VdGlsaXRpZXMvc2V0QW5kRm9yd2FyZFJlZicpO1xuXG5pbXBvcnQgdHlwZSB7RWRnZUluc2V0c1Byb3B9IGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvRWRnZUluc2V0c1Byb3BUeXBlJztcbmltcG9ydCB0eXBlIHtQb2ludFByb3B9IGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvUG9pbnRQcm9wVHlwZSc7XG5pbXBvcnQgdHlwZSB7Vmlld1N0eWxlUHJvcH0gZnJvbSAnLi4vLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcbmltcG9ydCB0eXBlIHtDb2xvclZhbHVlfSBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXRUeXBlcyc7XG5pbXBvcnQgdHlwZSB7XG4gIFByZXNzRXZlbnQsXG4gIFNjcm9sbEV2ZW50LFxuICBMYXlvdXRFdmVudCxcbn0gZnJvbSAnLi4vLi4vVHlwZXMvQ29yZUV2ZW50VHlwZXMnO1xuaW1wb3J0IHR5cGUge0hvc3RDb21wb25lbnR9IGZyb20gJy4uLy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuaW1wb3J0IHR5cGUge1N0YXRlIGFzIFNjcm9sbFJlc3BvbmRlclN0YXRlfSBmcm9tICcuLi9TY3JvbGxSZXNwb25kZXInO1xuaW1wb3J0IHR5cGUge1ZpZXdQcm9wc30gZnJvbSAnLi4vVmlldy9WaWV3UHJvcFR5cGVzJztcbmltcG9ydCB0eXBlIHtQcm9wcyBhcyBTY3JvbGxWaWV3U3RpY2t5SGVhZGVyUHJvcHN9IGZyb20gJy4vU2Nyb2xsVmlld1N0aWNreUhlYWRlcic7XG5cbmltcG9ydCBTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50IGZyb20gJy4vU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgU2Nyb2xsQ29udGVudFZpZXdOYXRpdmVDb21wb25lbnQgZnJvbSAnLi9TY3JvbGxDb250ZW50Vmlld05hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgQW5kcm9pZEhvcml6b250YWxTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50IGZyb20gJy4vQW5kcm9pZEhvcml6b250YWxTY3JvbGxWaWV3TmF0aXZlQ29tcG9uZW50JztcbmltcG9ydCBBbmRyb2lkSG9yaXpvbnRhbFNjcm9sbENvbnRlbnRWaWV3TmF0aXZlQ29tcG9uZW50IGZyb20gJy4vQW5kcm9pZEhvcml6b250YWxTY3JvbGxDb250ZW50Vmlld05hdGl2ZUNvbXBvbmVudCc7XG5cbmxldCBBbmRyb2lkU2Nyb2xsVmlldztcbmxldCBBbmRyb2lkSG9yaXpvbnRhbFNjcm9sbENvbnRlbnRWaWV3O1xubGV0IEFuZHJvaWRIb3Jpem9udGFsU2Nyb2xsVmlldztcbmxldCBSQ1RTY3JvbGxWaWV3O1xubGV0IFJDVFNjcm9sbENvbnRlbnRWaWV3O1xuXG5pZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICBBbmRyb2lkU2Nyb2xsVmlldyA9IFNjcm9sbFZpZXdOYXRpdmVDb21wb25lbnQ7XG4gIEFuZHJvaWRIb3Jpem9udGFsU2Nyb2xsVmlldyA9IEFuZHJvaWRIb3Jpem9udGFsU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudDtcbiAgQW5kcm9pZEhvcml6b250YWxTY3JvbGxDb250ZW50VmlldyA9IEFuZHJvaWRIb3Jpem9udGFsU2Nyb2xsQ29udGVudFZpZXdOYXRpdmVDb21wb25lbnQ7XG59IGVsc2Uge1xuICBSQ1RTY3JvbGxWaWV3ID0gU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudDtcbiAgUkNUU2Nyb2xsQ29udGVudFZpZXcgPSBTY3JvbGxDb250ZW50Vmlld05hdGl2ZUNvbXBvbmVudDtcbn1cblxuLy8gUHVibGljIG1ldGhvZHMgZm9yIFNjcm9sbFZpZXdcbmV4cG9ydCB0eXBlIFNjcm9sbFZpZXdJbXBlcmF0aXZlTWV0aG9kcyA9ICRSZWFkT25seTx7fFxuICBnZXRTY3JvbGxSZXNwb25kZXI6ICRQcm9wZXJ0eVR5cGU8U2Nyb2xsVmlldywgJ2dldFNjcm9sbFJlc3BvbmRlcic+LFxuICBnZXRTY3JvbGxhYmxlTm9kZTogJFByb3BlcnR5VHlwZTxTY3JvbGxWaWV3LCAnZ2V0U2Nyb2xsYWJsZU5vZGUnPixcbiAgZ2V0SW5uZXJWaWV3Tm9kZTogJFByb3BlcnR5VHlwZTxTY3JvbGxWaWV3LCAnZ2V0SW5uZXJWaWV3Tm9kZSc+LFxuICBnZXRJbm5lclZpZXdSZWY6ICRQcm9wZXJ0eVR5cGU8U2Nyb2xsVmlldywgJ2dldElubmVyVmlld1JlZic+LFxuICBnZXROYXRpdmVTY3JvbGxSZWY6ICRQcm9wZXJ0eVR5cGU8U2Nyb2xsVmlldywgJ2dldE5hdGl2ZVNjcm9sbFJlZic+LFxuICBzY3JvbGxUbzogJFByb3BlcnR5VHlwZTxTY3JvbGxWaWV3LCAnc2Nyb2xsVG8nPixcbiAgc2Nyb2xsVG9FbmQ6ICRQcm9wZXJ0eVR5cGU8U2Nyb2xsVmlldywgJ3Njcm9sbFRvRW5kJz4sXG4gIGZsYXNoU2Nyb2xsSW5kaWNhdG9yczogJFByb3BlcnR5VHlwZTxTY3JvbGxWaWV3LCAnZmxhc2hTY3JvbGxJbmRpY2F0b3JzJz4sXG5cbiAgLy8gU2Nyb2xsUmVzcG9uZGVyLk1peGluIHB1YmxpYyBtZXRob2RzXG4gIHNjcm9sbFJlc3BvbmRlclpvb21UbzogJFByb3BlcnR5VHlwZTxcbiAgICB0eXBlb2YgU2Nyb2xsUmVzcG9uZGVyLk1peGluLFxuICAgICdzY3JvbGxSZXNwb25kZXJab29tVG8nLFxuICA+LFxuICBzY3JvbGxSZXNwb25kZXJTY3JvbGxOYXRpdmVIYW5kbGVUb0tleWJvYXJkOiAkUHJvcGVydHlUeXBlPFxuICAgIHR5cGVvZiBTY3JvbGxSZXNwb25kZXIuTWl4aW4sXG4gICAgJ3Njcm9sbFJlc3BvbmRlclNjcm9sbE5hdGl2ZUhhbmRsZVRvS2V5Ym9hcmQnLFxuICA+LFxufH0+O1xuXG5leHBvcnQgdHlwZSBTY3JvbGxSZXNwb25kZXJUeXBlID0gU2Nyb2xsVmlld0ltcGVyYXRpdmVNZXRob2RzO1xuXG50eXBlIElPU1Byb3BzID0gJFJlYWRPbmx5PHt8XG4gIC8qKlxuICAgKiBDb250cm9scyB3aGV0aGVyIGlPUyBzaG91bGQgYXV0b21hdGljYWxseSBhZGp1c3QgdGhlIGNvbnRlbnQgaW5zZXRcbiAgICogZm9yIHNjcm9sbCB2aWV3cyB0aGF0IGFyZSBwbGFjZWQgYmVoaW5kIGEgbmF2aWdhdGlvbiBiYXIgb3JcbiAgICogdGFiIGJhci8gdG9vbGJhci4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgYXV0b21hdGljYWxseUFkanVzdENvbnRlbnRJbnNldHM/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIFRoZSBhbW91bnQgYnkgd2hpY2ggdGhlIHNjcm9sbCB2aWV3IGNvbnRlbnQgaXMgaW5zZXQgZnJvbSB0aGUgZWRnZXNcbiAgICogb2YgdGhlIHNjcm9sbCB2aWV3LiBEZWZhdWx0cyB0byBge3RvcDogMCwgbGVmdDogMCwgYm90dG9tOiAwLCByaWdodDogMH1gLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBjb250ZW50SW5zZXQ/OiA/RWRnZUluc2V0c1Byb3AsXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hbnVhbGx5IHNldCB0aGUgc3RhcnRpbmcgc2Nyb2xsIG9mZnNldC5cbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgYHt4OiAwLCB5OiAwfWAuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGNvbnRlbnRPZmZzZXQ/OiA/UG9pbnRQcm9wLFxuICAvKipcbiAgICogV2hlbiB0cnVlLCB0aGUgc2Nyb2xsIHZpZXcgYm91bmNlcyB3aGVuIGl0IHJlYWNoZXMgdGhlIGVuZCBvZiB0aGVcbiAgICogY29udGVudCBpZiB0aGUgY29udGVudCBpcyBsYXJnZXIgdGhlbiB0aGUgc2Nyb2xsIHZpZXcgYWxvbmcgdGhlIGF4aXMgb2ZcbiAgICogdGhlIHNjcm9sbCBkaXJlY3Rpb24uIFdoZW4gZmFsc2UsIGl0IGRpc2FibGVzIGFsbCBib3VuY2luZyBldmVuIGlmXG4gICAqIHRoZSBgYWx3YXlzQm91bmNlKmAgcHJvcHMgYXJlIHRydWUuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWUuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGJvdW5jZXM/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQsIFNjcm9sbFZpZXcgaGFzIGFuIGFjdGl2ZSBwYW4gcmVzcG9uZGVyIHRoYXQgaGlqYWNrcyBwYW5yZXNwb25kZXJzXG4gICAqIGRlZXBlciBpbiB0aGUgcmVuZGVyIHRyZWUgaW4gb3JkZXIgdG8gcHJldmVudCBhY2NpZGVudGFsIHRvdWNoZXMgd2hpbGUgc2Nyb2xsaW5nLlxuICAgKiBIb3dldmVyLCBpbiBjZXJ0YWluIG9jY2FzaW9ucyAoc3VjaCBhcyB3aGVuIHVzaW5nIHNuYXBUb0ludGVydmFsKSBpbiBhIHZlcnRpY2FsIHNjcm9sbHZpZXdcbiAgICogWW91IG1heSB3YW50IHRvIGRpc2FibGUgdGhpcyBiZWhhdmlvciBpbiBvcmRlciB0byBwcmV2ZW50IHRoZSBTY3JvbGxWaWV3IGZyb20gYmxvY2tpbmcgdG91Y2hlc1xuICAgKi9cbiAgZGlzYWJsZVNjcm9sbFZpZXdQYW5SZXNwb25kZXI/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgZ2VzdHVyZXMgY2FuIGRyaXZlIHpvb20gcGFzdCBtaW4vbWF4IGFuZCB0aGUgem9vbSB3aWxsIGFuaW1hdGVcbiAgICogdG8gdGhlIG1pbi9tYXggdmFsdWUgYXQgZ2VzdHVyZSBlbmQsIG90aGVyd2lzZSB0aGUgem9vbSB3aWxsIG5vdCBleGNlZWRcbiAgICogdGhlIGxpbWl0cy5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgYm91bmNlc1pvb20/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgdGhlIHNjcm9sbCB2aWV3IGJvdW5jZXMgaG9yaXpvbnRhbGx5IHdoZW4gaXQgcmVhY2hlcyB0aGUgZW5kXG4gICAqIGV2ZW4gaWYgdGhlIGNvbnRlbnQgaXMgc21hbGxlciB0aGFuIHRoZSBzY3JvbGwgdmlldyBpdHNlbGYuIFRoZSBkZWZhdWx0XG4gICAqIHZhbHVlIGlzIHRydWUgd2hlbiBgaG9yaXpvbnRhbD17dHJ1ZX1gIGFuZCBmYWxzZSBvdGhlcndpc2UuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGFsd2F5c0JvdW5jZUhvcml6b250YWw/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgdGhlIHNjcm9sbCB2aWV3IGJvdW5jZXMgdmVydGljYWxseSB3aGVuIGl0IHJlYWNoZXMgdGhlIGVuZFxuICAgKiBldmVuIGlmIHRoZSBjb250ZW50IGlzIHNtYWxsZXIgdGhhbiB0aGUgc2Nyb2xsIHZpZXcgaXRzZWxmLiBUaGUgZGVmYXVsdFxuICAgKiB2YWx1ZSBpcyBmYWxzZSB3aGVuIGBob3Jpem9udGFsPXt0cnVlfWAgYW5kIHRydWUgb3RoZXJ3aXNlLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBhbHdheXNCb3VuY2VWZXJ0aWNhbD86ID9ib29sZWFuLFxuICAvKipcbiAgICogV2hlbiB0cnVlLCB0aGUgc2Nyb2xsIHZpZXcgYXV0b21hdGljYWxseSBjZW50ZXJzIHRoZSBjb250ZW50IHdoZW4gdGhlXG4gICAqIGNvbnRlbnQgaXMgc21hbGxlciB0aGFuIHRoZSBzY3JvbGwgdmlldyBib3VuZHM7IHdoZW4gdGhlIGNvbnRlbnQgaXNcbiAgICogbGFyZ2VyIHRoYW4gdGhlIHNjcm9sbCB2aWV3LCB0aGlzIHByb3BlcnR5IGhhcyBubyBlZmZlY3QuIFRoZSBkZWZhdWx0XG4gICAqIHZhbHVlIGlzIGZhbHNlLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBjZW50ZXJDb250ZW50PzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBUaGUgc3R5bGUgb2YgdGhlIHNjcm9sbCBpbmRpY2F0b3JzLlxuICAgKlxuICAgKiAgIC0gYCdkZWZhdWx0J2AgKHRoZSBkZWZhdWx0KSwgc2FtZSBhcyBgYmxhY2tgLlxuICAgKiAgIC0gYCdibGFjaydgLCBzY3JvbGwgaW5kaWNhdG9yIGlzIGJsYWNrLiBUaGlzIHN0eWxlIGlzIGdvb2QgYWdhaW5zdCBhIGxpZ2h0IGJhY2tncm91bmQuXG4gICAqICAgLSBgJ3doaXRlJ2AsIHNjcm9sbCBpbmRpY2F0b3IgaXMgd2hpdGUuIFRoaXMgc3R5bGUgaXMgZ29vZCBhZ2FpbnN0IGEgZGFyayBiYWNrZ3JvdW5kLlxuICAgKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBpbmRpY2F0b3JTdHlsZT86ID8oJ2RlZmF1bHQnIHwgJ2JsYWNrJyB8ICd3aGl0ZScpLFxuICAvKipcbiAgICogV2hlbiB0cnVlLCB0aGUgU2Nyb2xsVmlldyB3aWxsIHRyeSB0byBsb2NrIHRvIG9ubHkgdmVydGljYWwgb3IgaG9yaXpvbnRhbFxuICAgKiBzY3JvbGxpbmcgd2hpbGUgZHJhZ2dpbmcuICBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBmYWxzZS5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgZGlyZWN0aW9uYWxMb2NrRW5hYmxlZD86ID9ib29sZWFuLFxuICAvKipcbiAgICogV2hlbiBmYWxzZSwgb25jZSB0cmFja2luZyBzdGFydHMsIHdvbid0IHRyeSB0byBkcmFnIGlmIHRoZSB0b3VjaCBtb3Zlcy5cbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgY2FuQ2FuY2VsQ29udGVudFRvdWNoZXM/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIFdoZW4gc2V0LCB0aGUgc2Nyb2xsIHZpZXcgd2lsbCBhZGp1c3QgdGhlIHNjcm9sbCBwb3NpdGlvbiBzbyB0aGF0IHRoZSBmaXJzdCBjaGlsZCB0aGF0IGlzXG4gICAqIGN1cnJlbnRseSB2aXNpYmxlIGFuZCBhdCBvciBiZXlvbmQgYG1pbkluZGV4Rm9yVmlzaWJsZWAgd2lsbCBub3QgY2hhbmdlIHBvc2l0aW9uLiBUaGlzIGlzXG4gICAqIHVzZWZ1bCBmb3IgbGlzdHMgdGhhdCBhcmUgbG9hZGluZyBjb250ZW50IGluIGJvdGggZGlyZWN0aW9ucywgZS5nLiBhIGNoYXQgdGhyZWFkLCB3aGVyZSBuZXdcbiAgICogbWVzc2FnZXMgY29taW5nIGluIG1pZ2h0IG90aGVyd2lzZSBjYXVzZSB0aGUgc2Nyb2xsIHBvc2l0aW9uIHRvIGp1bXAuIEEgdmFsdWUgb2YgMCBpcyBjb21tb24sXG4gICAqIGJ1dCBvdGhlciB2YWx1ZXMgc3VjaCBhcyAxIGNhbiBiZSB1c2VkIHRvIHNraXAgbG9hZGluZyBzcGlubmVycyBvciBvdGhlciBjb250ZW50IHRoYXQgc2hvdWxkXG4gICAqIG5vdCBtYWludGFpbiBwb3NpdGlvbi5cbiAgICpcbiAgICogVGhlIG9wdGlvbmFsIGBhdXRvc2Nyb2xsVG9Ub3BUaHJlc2hvbGRgIGNhbiBiZSB1c2VkIHRvIG1ha2UgdGhlIGNvbnRlbnQgYXV0b21hdGljYWxseSBzY3JvbGxcbiAgICogdG8gdGhlIHRvcCBhZnRlciBtYWtpbmcgdGhlIGFkanVzdG1lbnQgaWYgdGhlIHVzZXIgd2FzIHdpdGhpbiB0aGUgdGhyZXNob2xkIG9mIHRoZSB0b3AgYmVmb3JlXG4gICAqIHRoZSBhZGp1c3RtZW50IHdhcyBtYWRlLiBUaGlzIGlzIGFsc28gdXNlZnVsIGZvciBjaGF0LWxpa2UgYXBwbGljYXRpb25zIHdoZXJlIHlvdSB3YW50IHRvIHNlZVxuICAgKiBuZXcgbWVzc2FnZXMgc2Nyb2xsIGludG8gcGxhY2UsIGJ1dCBub3QgaWYgdGhlIHVzZXIgaGFzIHNjcm9sbGVkIHVwIGEgd2F5cyBhbmQgaXQgd291bGQgYmVcbiAgICogZGlzcnVwdGl2ZSB0byBzY3JvbGwgYSBidW5jaC5cbiAgICpcbiAgICogQ2F2ZWF0IDE6IFJlb3JkZXJpbmcgZWxlbWVudHMgaW4gdGhlIHNjcm9sbHZpZXcgd2l0aCB0aGlzIGVuYWJsZWQgd2lsbCBwcm9iYWJseSBjYXVzZVxuICAgKiBqdW1waW5lc3MgYW5kIGphbmsuIEl0IGNhbiBiZSBmaXhlZCwgYnV0IHRoZXJlIGFyZSBjdXJyZW50bHkgbm8gcGxhbnMgdG8gZG8gc28uIEZvciBub3csXG4gICAqIGRvbid0IHJlLW9yZGVyIHRoZSBjb250ZW50IG9mIGFueSBTY3JvbGxWaWV3cyBvciBMaXN0cyB0aGF0IHVzZSB0aGlzIGZlYXR1cmUuXG4gICAqXG4gICAqIENhdmVhdCAyOiBUaGlzIHNpbXBseSB1c2VzIGBjb250ZW50T2Zmc2V0YCBhbmQgYGZyYW1lLm9yaWdpbmAgaW4gbmF0aXZlIGNvZGUgdG8gY29tcHV0ZVxuICAgKiB2aXNpYmlsaXR5LiBPY2NsdXNpb24sIHRyYW5zZm9ybXMsIGFuZCBvdGhlciBjb21wbGV4aXR5IHdvbid0IGJlIHRha2VuIGludG8gYWNjb3VudCBhcyB0b1xuICAgKiB3aGV0aGVyIGNvbnRlbnQgaXMgXCJ2aXNpYmxlXCIgb3Igbm90LlxuICAgKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBtYWludGFpblZpc2libGVDb250ZW50UG9zaXRpb24/OiA/JFJlYWRPbmx5PHt8XG4gICAgbWluSW5kZXhGb3JWaXNpYmxlOiBudW1iZXIsXG4gICAgYXV0b3Njcm9sbFRvVG9wVGhyZXNob2xkPzogP251bWJlcixcbiAgfH0+LFxuICAvKipcbiAgICogVGhlIG1heGltdW0gYWxsb3dlZCB6b29tIHNjYWxlLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAxLjAuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIG1heGltdW1ab29tU2NhbGU/OiA/bnVtYmVyLFxuICAvKipcbiAgICogVGhlIG1pbmltdW0gYWxsb3dlZCB6b29tIHNjYWxlLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAxLjAuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIG1pbmltdW1ab29tU2NhbGU/OiA/bnVtYmVyLFxuICAvKipcbiAgICogV2hlbiB0cnVlLCBTY3JvbGxWaWV3IGFsbG93cyB1c2Ugb2YgcGluY2ggZ2VzdHVyZXMgdG8gem9vbSBpbiBhbmQgb3V0LlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBwaW5jaEdlc3R1cmVFbmFibGVkPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBUaGlzIGNvbnRyb2xzIGhvdyBvZnRlbiB0aGUgc2Nyb2xsIGV2ZW50IHdpbGwgYmUgZmlyZWQgd2hpbGUgc2Nyb2xsaW5nXG4gICAqIChhcyBhIHRpbWUgaW50ZXJ2YWwgaW4gbXMpLiBBIGxvd2VyIG51bWJlciB5aWVsZHMgYmV0dGVyIGFjY3VyYWN5IGZvciBjb2RlXG4gICAqIHRoYXQgaXMgdHJhY2tpbmcgdGhlIHNjcm9sbCBwb3NpdGlvbiwgYnV0IGNhbiBsZWFkIHRvIHNjcm9sbCBwZXJmb3JtYW5jZVxuICAgKiBwcm9ibGVtcyBkdWUgdG8gdGhlIHZvbHVtZSBvZiBpbmZvcm1hdGlvbiBiZWluZyBzZW5kIG92ZXIgdGhlIGJyaWRnZS5cbiAgICpcbiAgICogVmFsdWVzIGJldHdlZW4gMCBhbmQgMTdtcyBpbmRpY2F0ZSA2MGZwcyB1cGRhdGVzIGFyZSBuZWVkZWQgYW5kIHRocm90dGxpbmdcbiAgICogd2lsbCBiZSBkaXNhYmxlZC5cbiAgICpcbiAgICogSWYgeW91IGRvIG5vdCBuZWVkIHByZWNpc2Ugc2Nyb2xsIHBvc2l0aW9uIHRyYWNraW5nLCBzZXQgdGhpcyB2YWx1ZSBoaWdoZXJcbiAgICogdG8gbGltaXQgdGhlIGluZm9ybWF0aW9uIGJlaW5nIHNlbnQgYWNyb3NzIHRoZSBicmlkZ2UuXG4gICAqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHplcm8sIHdoaWNoIHJlc3VsdHMgaW4gdGhlIHNjcm9sbCBldmVudCBiZWluZyBzZW50IG9ubHlcbiAgICogb25jZSBlYWNoIHRpbWUgdGhlIHZpZXcgaXMgc2Nyb2xsZWQuXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHNjcm9sbEV2ZW50VGhyb3R0bGU/OiA/bnVtYmVyLFxuICAvKipcbiAgICogVGhlIGFtb3VudCBieSB3aGljaCB0aGUgc2Nyb2xsIHZpZXcgaW5kaWNhdG9ycyBhcmUgaW5zZXQgZnJvbSB0aGUgZWRnZXNcbiAgICogb2YgdGhlIHNjcm9sbCB2aWV3LiBUaGlzIHNob3VsZCBub3JtYWxseSBiZSBzZXQgdG8gdGhlIHNhbWUgdmFsdWUgYXNcbiAgICogdGhlIGBjb250ZW50SW5zZXRgLiBEZWZhdWx0cyB0byBgezAsIDAsIDAsIDB9YC5cbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgc2Nyb2xsSW5kaWNhdG9ySW5zZXRzPzogP0VkZ2VJbnNldHNQcm9wLFxuICAvKipcbiAgICogV2hlbiB0cnVlLCB0aGUgc2Nyb2xsIHZpZXcgY2FuIGJlIHByb2dyYW1tYXRpY2FsbHkgc2Nyb2xsZWQgYmV5b25kIGl0c1xuICAgKiBjb250ZW50IHNpemUuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGZhbHNlLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBzY3JvbGxUb092ZXJmbG93RW5hYmxlZD86ID9ib29sZWFuLFxuICAvKipcbiAgICogV2hlbiB0cnVlLCB0aGUgc2Nyb2xsIHZpZXcgc2Nyb2xscyB0byB0b3Agd2hlbiB0aGUgc3RhdHVzIGJhciBpcyB0YXBwZWQuXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWUuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHNjcm9sbHNUb1RvcD86ID9ib29sZWFuLFxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgc2Nyb2xsIHZpZXcgc2Nyb2xscyB0byB0b3AgYWZ0ZXIgdGhlIHN0YXR1cyBiYXIgaGFzIGJlZW4gdGFwcGVkXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIG9uU2Nyb2xsVG9Ub3A/OiAoZXZlbnQ6IFNjcm9sbEV2ZW50KSA9PiB2b2lkLFxuICAvKipcbiAgICogV2hlbiB0cnVlLCBzaG93cyBhIGhvcml6b250YWwgc2Nyb2xsIGluZGljYXRvci5cbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICovXG4gIHNob3dzSG9yaXpvbnRhbFNjcm9sbEluZGljYXRvcj86ID9ib29sZWFuLFxuICAvKipcbiAgICogV2hlbiBgc25hcFRvSW50ZXJ2YWxgIGlzIHNldCwgYHNuYXBUb0FsaWdubWVudGAgd2lsbCBkZWZpbmUgdGhlIHJlbGF0aW9uc2hpcFxuICAgKiBvZiB0aGUgc25hcHBpbmcgdG8gdGhlIHNjcm9sbCB2aWV3LlxuICAgKlxuICAgKiAgIC0gYCdzdGFydCdgICh0aGUgZGVmYXVsdCkgd2lsbCBhbGlnbiB0aGUgc25hcCBhdCB0aGUgbGVmdCAoaG9yaXpvbnRhbCkgb3IgdG9wICh2ZXJ0aWNhbClcbiAgICogICAtIGAnY2VudGVyJ2Agd2lsbCBhbGlnbiB0aGUgc25hcCBpbiB0aGUgY2VudGVyXG4gICAqICAgLSBgJ2VuZCdgIHdpbGwgYWxpZ24gdGhlIHNuYXAgYXQgdGhlIHJpZ2h0IChob3Jpem9udGFsKSBvciBib3R0b20gKHZlcnRpY2FsKVxuICAgKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBzbmFwVG9BbGlnbm1lbnQ/OiA/KCdzdGFydCcgfCAnY2VudGVyJyB8ICdlbmQnKSxcbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IHNjYWxlIG9mIHRoZSBzY3JvbGwgdmlldyBjb250ZW50LiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAxLjAuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHpvb21TY2FsZT86ID9udW1iZXIsXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IHNwZWNpZmllcyBob3cgdGhlIHNhZmUgYXJlYSBpbnNldHMgYXJlIHVzZWQgdG8gbW9kaWZ5IHRoZVxuICAgKiBjb250ZW50IGFyZWEgb2YgdGhlIHNjcm9sbCB2aWV3LiBUaGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGlzIHByb3BlcnR5IGlzXG4gICAqIFwibmV2ZXJcIi4gQXZhaWxhYmxlIG9uIGlPUyAxMSBhbmQgbGF0ZXIuXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGNvbnRlbnRJbnNldEFkanVzdG1lbnRCZWhhdmlvcj86ID8oXG4gICAgfCAnYXV0b21hdGljJ1xuICAgIHwgJ3Njcm9sbGFibGVBeGVzJ1xuICAgIHwgJ25ldmVyJ1xuICAgIHwgJ2Fsd2F5cydcbiAgKSxcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgU2Nyb2xsVmlldyB3aWxsIGVtaXQgdXBkYXRlQ2hpbGRGcmFtZXMgZGF0YSBpbiBzY3JvbGwgZXZlbnRzLFxuICAgKiBvdGhlcndpc2Ugd2lsbCBub3QgY29tcHV0ZSBvciBlbWl0IGNoaWxkIGZyYW1lIGRhdGEuICBUaGlzIG9ubHkgZXhpc3RzXG4gICAqIHRvIHN1cHBvcnQgbGVnYWN5IGlzc3VlcywgYG9uTGF5b3V0YCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkIHRvIHJldHJpZXZlXG4gICAqIGZyYW1lIGRhdGEuXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGZhbHNlLlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBERVBSRUNBVEVEX3NlbmRVcGRhdGVkQ2hpbGRGcmFtZXM/OiA/Ym9vbGVhbixcbnx9PjtcblxudHlwZSBBbmRyb2lkUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgLyoqXG4gICAqIEVuYWJsZXMgbmVzdGVkIHNjcm9sbGluZyBmb3IgQW5kcm9pZCBBUEkgbGV2ZWwgMjErLlxuICAgKiBOZXN0ZWQgc2Nyb2xsaW5nIGlzIHN1cHBvcnRlZCBieSBkZWZhdWx0IG9uIGlPU1xuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgbmVzdGVkU2Nyb2xsRW5hYmxlZD86ID9ib29sZWFuLFxuICAvKipcbiAgICogU29tZXRpbWVzIGEgc2Nyb2xsdmlldyB0YWtlcyB1cCBtb3JlIHNwYWNlIHRoYW4gaXRzIGNvbnRlbnQgZmlsbHMuIFdoZW4gdGhpcyBpc1xuICAgKiB0aGUgY2FzZSwgdGhpcyBwcm9wIHdpbGwgZmlsbCB0aGUgcmVzdCBvZiB0aGUgc2Nyb2xsdmlldyB3aXRoIGEgY29sb3IgdG8gYXZvaWQgc2V0dGluZ1xuICAgKiBhIGJhY2tncm91bmQgYW5kIGNyZWF0aW5nIHVubmVjZXNzYXJ5IG92ZXJkcmF3LiBUaGlzIGlzIGFuIGFkdmFuY2VkIG9wdGltaXphdGlvblxuICAgKiB0aGF0IGlzIG5vdCBuZWVkZWQgaW4gdGhlIGdlbmVyYWwgY2FzZS5cbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIGVuZEZpbGxDb2xvcj86ID9Db2xvclZhbHVlLFxuICAvKipcbiAgICogVGFnIHVzZWQgdG8gbG9nIHNjcm9sbCBwZXJmb3JtYW5jZSBvbiB0aGlzIHNjcm9sbCB2aWV3LiBXaWxsIGZvcmNlXG4gICAqIG1vbWVudHVtIGV2ZW50cyB0byBiZSB0dXJuZWQgb24gKHNlZSBzZW5kTW9tZW50dW1FdmVudHMpLiBUaGlzIGRvZXNuJ3QgZG9cbiAgICogYW55dGhpbmcgb3V0IG9mIHRoZSBib3ggYW5kIHlvdSBuZWVkIHRvIGltcGxlbWVudCBhIGN1c3RvbSBuYXRpdmVcbiAgICogRnBzTGlzdGVuZXIgZm9yIGl0IHRvIGJlIHVzZWZ1bC5cbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIHNjcm9sbFBlcmZUYWc/OiA/c3RyaW5nLFxuICAvKipcbiAgICogVXNlZCB0byBvdmVycmlkZSBkZWZhdWx0IHZhbHVlIG9mIG92ZXJTY3JvbGwgbW9kZS5cbiAgICpcbiAgICogUG9zc2libGUgdmFsdWVzOlxuICAgKlxuICAgKiAgLSBgJ2F1dG8nYCAtIERlZmF1bHQgdmFsdWUsIGFsbG93IGEgdXNlciB0byBvdmVyLXNjcm9sbFxuICAgKiAgICB0aGlzIHZpZXcgb25seSBpZiB0aGUgY29udGVudCBpcyBsYXJnZSBlbm91Z2ggdG8gbWVhbmluZ2Z1bGx5IHNjcm9sbC5cbiAgICogIC0gYCdhbHdheXMnYCAtIEFsd2F5cyBhbGxvdyBhIHVzZXIgdG8gb3Zlci1zY3JvbGwgdGhpcyB2aWV3LlxuICAgKiAgLSBgJ25ldmVyJ2AgLSBOZXZlciBhbGxvdyBhIHVzZXIgdG8gb3Zlci1zY3JvbGwgdGhpcyB2aWV3LlxuICAgKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgb3ZlclNjcm9sbE1vZGU/OiA/KCdhdXRvJyB8ICdhbHdheXMnIHwgJ25ldmVyJyksXG4gIC8qKlxuICAgKiBDYXVzZXMgdGhlIHNjcm9sbGJhcnMgbm90IHRvIHR1cm4gdHJhbnNwYXJlbnQgd2hlbiB0aGV5IGFyZSBub3QgaW4gdXNlLlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBmYWxzZS5cbiAgICpcbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIHBlcnNpc3RlbnRTY3JvbGxiYXI/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIEZhZGVzIG91dCB0aGUgZWRnZXMgb2YgdGhlIHRoZSBzY3JvbGwgY29udGVudC5cbiAgICpcbiAgICogSWYgdGhlIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiAwLCB0aGUgZmFkaW5nIGVkZ2VzIHdpbGwgYmUgc2V0IGFjY29yZGluZ2x5XG4gICAqIHRvIHRoZSBjdXJyZW50IHNjcm9sbCBkaXJlY3Rpb24gYW5kIHBvc2l0aW9uLFxuICAgKiBpbmRpY2F0aW5nIGlmIHRoZXJlIGlzIG1vcmUgY29udGVudCB0byBzaG93LlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAwLlxuICAgKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgZmFkaW5nRWRnZUxlbmd0aD86ID9udW1iZXIsXG58fT47XG5cbnR5cGUgVlJQcm9wcyA9ICRSZWFkT25seTx7fFxuICAvKipcbiAgICogT3B0aW9uYWxseSBhbiBpbWFnZSBjYW4gYmUgdXNlZCBmb3IgdGhlIHNjcm9sbCBiYXIgdGh1bWIuIFRoaXMgd2lsbFxuICAgKiBvdmVycmlkZSB0aGUgY29sb3IuIFdoaWxlIHRoZSBpbWFnZSBpcyBsb2FkaW5nIG9yIHRoZSBpbWFnZSBmYWlscyB0b1xuICAgKiBsb2FkIHRoZSBjb2xvciB3aWxsIGJlIHVzZWQgaW5zdGVhZC4gVXNlIGFuIGFscGhhIG9mIDAgaW4gdGhlIGNvbG9yXG4gICAqIHRvIGF2b2lkIHNlZWluZyBpdCB3aGlsZSB0aGUgaW1hZ2UgaXMgbG9hZGluZy5cbiAgICpcbiAgICogLSBgdXJpYCAtIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcmVzb3VyY2UgaWRlbnRpZmllciBmb3IgdGhlIGltYWdlLCB3aGljaFxuICAgKiBzaG91bGQgYmUgZWl0aGVyIGEgbG9jYWwgZmlsZSBwYXRoIG9yIHRoZSBuYW1lIG9mIGEgc3RhdGljIGltYWdlIHJlc291cmNlXG4gICAqIC0gYG51bWJlcmAgLSBPcGFxdWUgdHlwZSByZXR1cm5lZCBieSBzb21ldGhpbmcgbGlrZVxuICAgKiBgaW1wb3J0IElNQUdFIGZyb20gJy4vaW1hZ2UuanBnJ2AuXG4gICAqIEBwbGF0Zm9ybSB2clxuICAgKi9cbiAgc2Nyb2xsQmFyVGh1bWJJbWFnZT86ID8oJFJlYWRPbmx5PHt8fH0+IHwgbnVtYmVyKSwgLy8gT3BhcXVlIHR5cGUgcmV0dXJuZWQgYnkgaW1wb3J0IElNQUdFIGZyb20gJy4vaW1hZ2UuanBnJ1xufH0+O1xuXG50eXBlIFN0aWNreUhlYWRlckNvbXBvbmVudFR5cGUgPSBSZWFjdC5BYnN0cmFjdENvbXBvbmVudDxcbiAgU2Nyb2xsVmlld1N0aWNreUhlYWRlclByb3BzLFxuICAkUmVhZE9ubHk8e3NldE5leHRIZWFkZXJZOiBudW1iZXIgPT4gdm9pZCwgLi4ufT4sXG4+O1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9ICRSZWFkT25seTx7fFxuICAuLi5WaWV3UHJvcHMsXG4gIC4uLklPU1Byb3BzLFxuICAuLi5BbmRyb2lkUHJvcHMsXG4gIC4uLlZSUHJvcHMsXG5cbiAgLyoqXG4gICAqIFRoZXNlIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHNjcm9sbCB2aWV3IGNvbnRlbnQgY29udGFpbmVyIHdoaWNoXG4gICAqIHdyYXBzIGFsbCBvZiB0aGUgY2hpbGQgdmlld3MuIEV4YW1wbGU6XG4gICAqXG4gICAqIGBgYFxuICAgKiByZXR1cm4gKFxuICAgKiAgIDxTY3JvbGxWaWV3IGNvbnRlbnRDb250YWluZXJTdHlsZT17c3R5bGVzLmNvbnRlbnRDb250YWluZXJ9PlxuICAgKiAgIDwvU2Nyb2xsVmlldz5cbiAgICogKTtcbiAgICogLi4uXG4gICAqIGNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICogICBjb250ZW50Q29udGFpbmVyOiB7XG4gICAqICAgICBwYWRkaW5nVmVydGljYWw6IDIwXG4gICAqICAgfVxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBjb250ZW50Q29udGFpbmVyU3R5bGU/OiA/Vmlld1N0eWxlUHJvcCxcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgdGhlIHNjcm9sbCB2aWV3IHN0b3BzIG9uIHRoZSBuZXh0IGluZGV4IChpbiByZWxhdGlvbiB0byBzY3JvbGxcbiAgICogcG9zaXRpb24gYXQgcmVsZWFzZSkgcmVnYXJkbGVzcyBvZiBob3cgZmFzdCB0aGUgZ2VzdHVyZSBpcy4gVGhpcyBjYW4gYmVcbiAgICogdXNlZCBmb3IgcGFnaW5hdGlvbiB3aGVuIHRoZSBwYWdlIGlzIGxlc3MgdGhhbiB0aGUgd2lkdGggb2YgdGhlXG4gICAqIGhvcml6b250YWwgU2Nyb2xsVmlldyBvciB0aGUgaGVpZ2h0IG9mIHRoZSB2ZXJ0aWNhbCBTY3JvbGxWaWV3LiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBmYWxzZS5cbiAgICovXG4gIGRpc2FibGVJbnRlcnZhbE1vbWVudHVtPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBBIGZsb2F0aW5nLXBvaW50IG51bWJlciB0aGF0IGRldGVybWluZXMgaG93IHF1aWNrbHkgdGhlIHNjcm9sbCB2aWV3XG4gICAqIGRlY2VsZXJhdGVzIGFmdGVyIHRoZSB1c2VyIGxpZnRzIHRoZWlyIGZpbmdlci4gWW91IG1heSBhbHNvIHVzZSBzdHJpbmdcbiAgICogc2hvcnRjdXRzIGBcIm5vcm1hbFwiYCBhbmQgYFwiZmFzdFwiYCB3aGljaCBtYXRjaCB0aGUgdW5kZXJseWluZyBpT1Mgc2V0dGluZ3NcbiAgICogZm9yIGBVSVNjcm9sbFZpZXdEZWNlbGVyYXRpb25SYXRlTm9ybWFsYCBhbmRcbiAgICogYFVJU2Nyb2xsVmlld0RlY2VsZXJhdGlvblJhdGVGYXN0YCByZXNwZWN0aXZlbHkuXG4gICAqXG4gICAqICAgLSBgJ25vcm1hbCdgOiAwLjk5OCBvbiBpT1MsIDAuOTg1IG9uIEFuZHJvaWQgKHRoZSBkZWZhdWx0KVxuICAgKiAgIC0gYCdmYXN0J2A6IDAuOTkgb24gaU9TLCAwLjkgb24gQW5kcm9pZFxuICAgKi9cbiAgZGVjZWxlcmF0aW9uUmF0ZT86ID8oJ2Zhc3QnIHwgJ25vcm1hbCcgfCBudW1iZXIpLFxuICAvKipcbiAgICogV2hlbiB0cnVlLCB0aGUgc2Nyb2xsIHZpZXcncyBjaGlsZHJlbiBhcmUgYXJyYW5nZWQgaG9yaXpvbnRhbGx5IGluIGEgcm93XG4gICAqIGluc3RlYWQgb2YgdmVydGljYWxseSBpbiBhIGNvbHVtbi4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgZmFsc2UuXG4gICAqL1xuICBob3Jpem9udGFsPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBJZiBzdGlja3kgaGVhZGVycyBzaG91bGQgc3RpY2sgYXQgdGhlIGJvdHRvbSBpbnN0ZWFkIG9mIHRoZSB0b3Agb2YgdGhlXG4gICAqIFNjcm9sbFZpZXcuIFRoaXMgaXMgdXN1YWxseSB1c2VkIHdpdGggaW52ZXJ0ZWQgU2Nyb2xsVmlld3MuXG4gICAqL1xuICBpbnZlcnRTdGlja3lIZWFkZXJzPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGtleWJvYXJkIGdldHMgZGlzbWlzc2VkIGluIHJlc3BvbnNlIHRvIGEgZHJhZy5cbiAgICpcbiAgICogKkNyb3NzIHBsYXRmb3JtKlxuICAgKlxuICAgKiAgIC0gYCdub25lJ2AgKHRoZSBkZWZhdWx0KSwgZHJhZ3MgZG8gbm90IGRpc21pc3MgdGhlIGtleWJvYXJkLlxuICAgKiAgIC0gYCdvbi1kcmFnJ2AsIHRoZSBrZXlib2FyZCBpcyBkaXNtaXNzZWQgd2hlbiBhIGRyYWcgYmVnaW5zLlxuICAgKlxuICAgKiAqaU9TIE9ubHkqXG4gICAqXG4gICAqICAgLSBgJ2ludGVyYWN0aXZlJ2AsIHRoZSBrZXlib2FyZCBpcyBkaXNtaXNzZWQgaW50ZXJhY3RpdmVseSB3aXRoIHRoZSBkcmFnIGFuZCBtb3ZlcyBpblxuICAgKiAgICAgc3luY2hyb255IHdpdGggdGhlIHRvdWNoOyBkcmFnZ2luZyB1cHdhcmRzIGNhbmNlbHMgdGhlIGRpc21pc3NhbC5cbiAgICogICAgIE9uIGFuZHJvaWQgdGhpcyBpcyBub3Qgc3VwcG9ydGVkIGFuZCBpdCB3aWxsIGhhdmUgdGhlIHNhbWUgYmVoYXZpb3IgYXMgJ25vbmUnLlxuICAgKi9cbiAga2V5Ym9hcmREaXNtaXNzTW9kZT86ID8vLyBkZWZhdWx0XG4gICh8ICdub25lJyAvLyBjcm9zcy1wbGF0Zm9ybVxuICAgIHwgJ29uLWRyYWcnXG4gICAgfCAnaW50ZXJhY3RpdmUnXG4gICksIC8vIGlvcyBvbmx5XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZW4gdGhlIGtleWJvYXJkIHNob3VsZCBzdGF5IHZpc2libGUgYWZ0ZXIgYSB0YXAuXG4gICAqXG4gICAqICAgLSBgJ25ldmVyJ2AgKHRoZSBkZWZhdWx0KSwgdGFwcGluZyBvdXRzaWRlIG9mIHRoZSBmb2N1c2VkIHRleHQgaW5wdXQgd2hlbiB0aGUga2V5Ym9hcmRcbiAgICogICAgIGlzIHVwIGRpc21pc3NlcyB0aGUga2V5Ym9hcmQuIFdoZW4gdGhpcyBoYXBwZW5zLCBjaGlsZHJlbiB3b24ndCByZWNlaXZlIHRoZSB0YXAuXG4gICAqICAgLSBgJ2Fsd2F5cydgLCB0aGUga2V5Ym9hcmQgd2lsbCBub3QgZGlzbWlzcyBhdXRvbWF0aWNhbGx5LCBhbmQgdGhlIHNjcm9sbCB2aWV3IHdpbGwgbm90XG4gICAqICAgICBjYXRjaCB0YXBzLCBidXQgY2hpbGRyZW4gb2YgdGhlIHNjcm9sbCB2aWV3IGNhbiBjYXRjaCB0YXBzLlxuICAgKiAgIC0gYCdoYW5kbGVkJ2AsIHRoZSBrZXlib2FyZCB3aWxsIG5vdCBkaXNtaXNzIGF1dG9tYXRpY2FsbHkgd2hlbiB0aGUgdGFwIHdhcyBoYW5kbGVkIGJ5XG4gICAqICAgICBhIGNoaWxkcmVuLCAob3IgY2FwdHVyZWQgYnkgYW4gYW5jZXN0b3IpLlxuICAgKiAgIC0gYGZhbHNlYCwgZGVwcmVjYXRlZCwgdXNlICduZXZlcicgaW5zdGVhZFxuICAgKiAgIC0gYHRydWVgLCBkZXByZWNhdGVkLCB1c2UgJ2Fsd2F5cycgaW5zdGVhZFxuICAgKi9cbiAga2V5Ym9hcmRTaG91bGRQZXJzaXN0VGFwcz86ID8oJ2Fsd2F5cycgfCAnbmV2ZXInIHwgJ2hhbmRsZWQnIHwgdHJ1ZSB8IGZhbHNlKSxcbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSBtb21lbnR1bSBzY3JvbGwgc3RhcnRzIChzY3JvbGwgd2hpY2ggb2NjdXJzIGFzIHRoZSBTY3JvbGxWaWV3IGdsaWRlcyB0byBhIHN0b3ApLlxuICAgKi9cbiAgb25Nb21lbnR1bVNjcm9sbEJlZ2luPzogPyhldmVudDogU2Nyb2xsRXZlbnQpID0+IHZvaWQsXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgbW9tZW50dW0gc2Nyb2xsIGVuZHMgKHNjcm9sbCB3aGljaCBvY2N1cnMgYXMgdGhlIFNjcm9sbFZpZXcgZ2xpZGVzIHRvIGEgc3RvcCkuXG4gICAqL1xuICBvbk1vbWVudHVtU2Nyb2xsRW5kPzogPyhldmVudDogU2Nyb2xsRXZlbnQpID0+IHZvaWQsXG5cbiAgLyoqXG4gICAqIEZpcmVzIGF0IG1vc3Qgb25jZSBwZXIgZnJhbWUgZHVyaW5nIHNjcm9sbGluZy4gVGhlIGZyZXF1ZW5jeSBvZiB0aGVcbiAgICogZXZlbnRzIGNhbiBiZSBjb250cm9sbGVkIHVzaW5nIHRoZSBgc2Nyb2xsRXZlbnRUaHJvdHRsZWAgcHJvcC5cbiAgICovXG4gIG9uU2Nyb2xsPzogPyhldmVudDogU2Nyb2xsRXZlbnQpID0+IHZvaWQsXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdXNlciBiZWdpbnMgdG8gZHJhZyB0aGUgc2Nyb2xsIHZpZXcuXG4gICAqL1xuICBvblNjcm9sbEJlZ2luRHJhZz86ID8oZXZlbnQ6IFNjcm9sbEV2ZW50KSA9PiB2b2lkLFxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHVzZXIgc3RvcHMgZHJhZ2dpbmcgdGhlIHNjcm9sbCB2aWV3IGFuZCBpdCBlaXRoZXIgc3RvcHNcbiAgICogb3IgYmVnaW5zIHRvIGdsaWRlLlxuICAgKi9cbiAgb25TY3JvbGxFbmREcmFnPzogPyhldmVudDogU2Nyb2xsRXZlbnQpID0+IHZvaWQsXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBzY3JvbGxhYmxlIGNvbnRlbnQgdmlldyBvZiB0aGUgU2Nyb2xsVmlldyBjaGFuZ2VzLlxuICAgKlxuICAgKiBIYW5kbGVyIGZ1bmN0aW9uIGlzIHBhc3NlZCB0aGUgY29udGVudCB3aWR0aCBhbmQgY29udGVudCBoZWlnaHQgYXMgcGFyYW1ldGVyczpcbiAgICogYChjb250ZW50V2lkdGgsIGNvbnRlbnRIZWlnaHQpYFxuICAgKlxuICAgKiBJdCdzIGltcGxlbWVudGVkIHVzaW5nIG9uTGF5b3V0IGhhbmRsZXIgYXR0YWNoZWQgdG8gdGhlIGNvbnRlbnQgY29udGFpbmVyXG4gICAqIHdoaWNoIHRoaXMgU2Nyb2xsVmlldyByZW5kZXJzLlxuICAgKi9cbiAgb25Db250ZW50U2l6ZUNoYW5nZT86IChjb250ZW50V2lkdGg6IG51bWJlciwgY29udGVudEhlaWdodDogbnVtYmVyKSA9PiB2b2lkLFxuICBvbktleWJvYXJkRGlkU2hvdz86IChldmVudDogUHJlc3NFdmVudCkgPT4gdm9pZCxcbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgdGhlIHNjcm9sbCB2aWV3IHN0b3BzIG9uIG11bHRpcGxlcyBvZiB0aGUgc2Nyb2xsIHZpZXcncyBzaXplXG4gICAqIHdoZW4gc2Nyb2xsaW5nLiBUaGlzIGNhbiBiZSB1c2VkIGZvciBob3Jpem9udGFsIHBhZ2luYXRpb24uIFRoZSBkZWZhdWx0XG4gICAqIHZhbHVlIGlzIGZhbHNlLlxuICAgKlxuICAgKiBOb3RlOiBWZXJ0aWNhbCBwYWdpbmF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgb24gQW5kcm9pZC5cbiAgICovXG4gIHBhZ2luZ0VuYWJsZWQ/OiA/Ym9vbGVhbixcblxuICAvKipcbiAgICogV2hlbiBmYWxzZSwgdGhlIHZpZXcgY2Fubm90IGJlIHNjcm9sbGVkIHZpYSB0b3VjaCBpbnRlcmFjdGlvbi5cbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoZSB2aWV3IGNhbiBhbHdheXMgYmUgc2Nyb2xsZWQgYnkgY2FsbGluZyBgc2Nyb2xsVG9gLlxuICAgKi9cbiAgc2Nyb2xsRW5hYmxlZD86ID9ib29sZWFuLFxuICAvKipcbiAgICogV2hlbiB0cnVlLCBzaG93cyBhIHZlcnRpY2FsIHNjcm9sbCBpbmRpY2F0b3IuXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWUuXG4gICAqL1xuICBzaG93c1ZlcnRpY2FsU2Nyb2xsSW5kaWNhdG9yPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBjaGlsZCBpbmRpY2VzIGRldGVybWluaW5nIHdoaWNoIGNoaWxkcmVuIGdldCBkb2NrZWQgdG8gdGhlXG4gICAqIHRvcCBvZiB0aGUgc2NyZWVuIHdoZW4gc2Nyb2xsaW5nLiBGb3IgZXhhbXBsZSwgcGFzc2luZ1xuICAgKiBgc3RpY2t5SGVhZGVySW5kaWNlcz17WzBdfWAgd2lsbCBjYXVzZSB0aGUgZmlyc3QgY2hpbGQgdG8gYmUgZml4ZWQgdG8gdGhlXG4gICAqIHRvcCBvZiB0aGUgc2Nyb2xsIHZpZXcuIFRoaXMgcHJvcGVydHkgaXMgbm90IHN1cHBvcnRlZCBpbiBjb25qdW5jdGlvblxuICAgKiB3aXRoIGBob3Jpem9udGFsPXt0cnVlfWAuXG4gICAqL1xuICBzdGlja3lIZWFkZXJJbmRpY2VzPzogPyRSZWFkT25seUFycmF5PG51bWJlcj4sXG4gIC8qKlxuICAgKiBBIFJlYWN0IENvbXBvbmVudCB0aGF0IHdpbGwgYmUgdXNlZCB0byByZW5kZXIgc3RpY2t5IGhlYWRlcnMuXG4gICAqIFRvIGJlIHVzZWQgdG9nZXRoZXIgd2l0aCBgc3RpY2t5SGVhZGVySW5kaWNlc2Agb3Igd2l0aCBgU2VjdGlvbkxpc3RgLCBkZWZhdWx0cyB0byBgU2Nyb2xsVmlld1N0aWNreUhlYWRlcmAuXG4gICAqIFlvdSBtYXkgbmVlZCB0byBzZXQgdGhpcyBpZiB5b3VyIHN0aWNreSBoZWFkZXIgdXNlcyBjdXN0b20gdHJhbnNmb3JtcyAoZWcuIHRyYW5zbGF0aW9uKSxcbiAgICogZm9yIGV4YW1wbGUgd2hlbiB5b3Ugd2FudCB5b3VyIGxpc3QgdG8gaGF2ZSBhbiBhbmltYXRlZCBoaWRhYmxlIGhlYWRlci5cbiAgICovXG4gIFN0aWNreUhlYWRlckNvbXBvbmVudD86IFN0aWNreUhlYWRlckNvbXBvbmVudFR5cGUsXG4gIC8qKlxuICAgKiBXaGVuIHNldCwgY2F1c2VzIHRoZSBzY3JvbGwgdmlldyB0byBzdG9wIGF0IG11bHRpcGxlcyBvZiB0aGUgdmFsdWUgb2ZcbiAgICogYHNuYXBUb0ludGVydmFsYC4gVGhpcyBjYW4gYmUgdXNlZCBmb3IgcGFnaW5hdGluZyB0aHJvdWdoIGNoaWxkcmVuXG4gICAqIHRoYXQgaGF2ZSBsZW5ndGhzIHNtYWxsZXIgdGhhbiB0aGUgc2Nyb2xsIHZpZXcuIFR5cGljYWxseSB1c2VkIGluXG4gICAqIGNvbWJpbmF0aW9uIHdpdGggYHNuYXBUb0FsaWdubWVudGAgYW5kIGBkZWNlbGVyYXRpb25SYXRlPVwiZmFzdFwiYC5cbiAgICpcbiAgICogT3ZlcnJpZGVzIGxlc3MgY29uZmlndXJhYmxlIGBwYWdpbmdFbmFibGVkYCBwcm9wLlxuICAgKi9cbiAgc25hcFRvSW50ZXJ2YWw/OiA/bnVtYmVyLFxuICAvKipcbiAgICogV2hlbiBzZXQsIGNhdXNlcyB0aGUgc2Nyb2xsIHZpZXcgdG8gc3RvcCBhdCB0aGUgZGVmaW5lZCBvZmZzZXRzLlxuICAgKiBUaGlzIGNhbiBiZSB1c2VkIGZvciBwYWdpbmF0aW5nIHRocm91Z2ggdmFyaW91c2x5IHNpemVkIGNoaWxkcmVuXG4gICAqIHRoYXQgaGF2ZSBsZW5ndGhzIHNtYWxsZXIgdGhhbiB0aGUgc2Nyb2xsIHZpZXcuIFR5cGljYWxseSB1c2VkIGluXG4gICAqIGNvbWJpbmF0aW9uIHdpdGggYGRlY2VsZXJhdGlvblJhdGU9XCJmYXN0XCJgLlxuICAgKlxuICAgKiBPdmVycmlkZXMgbGVzcyBjb25maWd1cmFibGUgYHBhZ2luZ0VuYWJsZWRgIGFuZCBgc25hcFRvSW50ZXJ2YWxgIHByb3BzLlxuICAgKi9cbiAgc25hcFRvT2Zmc2V0cz86ID8kUmVhZE9ubHlBcnJheTxudW1iZXI+LFxuICAvKipcbiAgICogVXNlIGluIGNvbmp1bmN0aW9uIHdpdGggYHNuYXBUb09mZnNldHNgLiBCeSBkZWZhdWx0LCB0aGUgYmVnaW5uaW5nXG4gICAqIG9mIHRoZSBsaXN0IGNvdW50cyBhcyBhIHNuYXAgb2Zmc2V0LiBTZXQgYHNuYXBUb1N0YXJ0YCB0byBmYWxzZSB0byBkaXNhYmxlXG4gICAqIHRoaXMgYmVoYXZpb3IgYW5kIGFsbG93IHRoZSBsaXN0IHRvIHNjcm9sbCBmcmVlbHkgYmV0d2VlbiBpdHMgc3RhcnQgYW5kXG4gICAqIHRoZSBmaXJzdCBgc25hcFRvT2Zmc2V0c2Agb2Zmc2V0LlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKi9cbiAgc25hcFRvU3RhcnQ/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIFVzZSBpbiBjb25qdW5jdGlvbiB3aXRoIGBzbmFwVG9PZmZzZXRzYC4gQnkgZGVmYXVsdCwgdGhlIGVuZFxuICAgKiBvZiB0aGUgbGlzdCBjb3VudHMgYXMgYSBzbmFwIG9mZnNldC4gU2V0IGBzbmFwVG9FbmRgIHRvIGZhbHNlIHRvIGRpc2FibGVcbiAgICogdGhpcyBiZWhhdmlvciBhbmQgYWxsb3cgdGhlIGxpc3QgdG8gc2Nyb2xsIGZyZWVseSBiZXR3ZWVuIGl0cyBlbmQgYW5kXG4gICAqIHRoZSBsYXN0IGBzbmFwVG9PZmZzZXRzYCBvZmZzZXQuXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRydWUuXG4gICAqL1xuICBzbmFwVG9FbmQ/OiA/Ym9vbGVhbixcbiAgLyoqXG4gICAqIEV4cGVyaW1lbnRhbDogV2hlbiB0cnVlLCBvZmZzY3JlZW4gY2hpbGQgdmlld3MgKHdob3NlIGBvdmVyZmxvd2AgdmFsdWUgaXNcbiAgICogYGhpZGRlbmApIGFyZSByZW1vdmVkIGZyb20gdGhlaXIgbmF0aXZlIGJhY2tpbmcgc3VwZXJ2aWV3IHdoZW4gb2Zmc2NyZWVuLlxuICAgKiBUaGlzIGNhbiBpbXByb3ZlIHNjcm9sbGluZyBwZXJmb3JtYW5jZSBvbiBsb25nIGxpc3RzLiBUaGUgZGVmYXVsdCB2YWx1ZSBpc1xuICAgKiB0cnVlLlxuICAgKi9cbiAgcmVtb3ZlQ2xpcHBlZFN1YnZpZXdzPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBBIFJlZnJlc2hDb250cm9sIGNvbXBvbmVudCwgdXNlZCB0byBwcm92aWRlIHB1bGwtdG8tcmVmcmVzaFxuICAgKiBmdW5jdGlvbmFsaXR5IGZvciB0aGUgU2Nyb2xsVmlldy4gT25seSB3b3JrcyBmb3IgdmVydGljYWwgU2Nyb2xsVmlld3NcbiAgICogKGBob3Jpem9udGFsYCBwcm9wIG11c3QgYmUgYGZhbHNlYCkuXG4gICAqXG4gICAqIFNlZSBbUmVmcmVzaENvbnRyb2xdKGRvY3MvcmVmcmVzaGNvbnRyb2wuaHRtbCkuXG4gICAqL1xuICAvLyAkRmxvd0ZpeE1lIC0gaG93IHRvIGhhbmRsZSBnZW5lcmljIHR5cGUgd2l0aG91dCBleGlzdGVudGlhbCBvcGVyYXRvcj9cbiAgcmVmcmVzaENvbnRyb2w/OiA/UmVhY3QuRWxlbWVudDxhbnk+LFxuICBjaGlsZHJlbj86IFJlYWN0Lk5vZGUsXG4gIC8qKlxuICAgKiBBIHJlZiB0byB0aGUgaW5uZXIgVmlldyBlbGVtZW50IG9mIHRoZSBTY3JvbGxWaWV3LiBUaGlzIHNob3VsZCBiZSB1c2VkXG4gICAqIGluc3RlYWQgb2YgY2FsbGluZyBgZ2V0SW5uZXJWaWV3UmVmYC5cbiAgICovXG4gIGlubmVyVmlld1JlZj86IFJlYWN0LlJlZjx0eXBlb2YgVmlldz4sXG4gIC8qKlxuICAgKiBBIHJlZiB0byB0aGUgTmF0aXZlIFNjcm9sbFZpZXcgY29tcG9uZW50LiBUaGlzIHJlZiBjYW4gYmUgdXNlZCB0byBjYWxsXG4gICAqIGFsbCBvZiBTY3JvbGxWaWV3J3MgcHVibGljIG1ldGhvZHMsIGluIGFkZGl0aW9uIHRvIG5hdGl2ZSBtZXRob2RzIGxpa2VcbiAgICogbWVhc3VyZSwgbWVhc3VyZUxheW91dCwgZXRjLlxuICAgKi9cbiAgc2Nyb2xsVmlld1JlZj86IFJlYWN0LlJlZjxcbiAgICB0eXBlb2YgU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudCAmIFNjcm9sbFZpZXdJbXBlcmF0aXZlTWV0aG9kcyxcbiAgPixcbnx9PjtcblxudHlwZSBTdGF0ZSA9IHt8XG4gIGxheW91dEhlaWdodDogP251bWJlcixcbiAgLi4uU2Nyb2xsUmVzcG9uZGVyU3RhdGUsXG58fTtcblxuZnVuY3Rpb24gY3JlYXRlU2Nyb2xsUmVzcG9uZGVyKFxuICBub2RlOiBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBTY3JvbGxWaWV3Pixcbik6IHR5cGVvZiBTY3JvbGxSZXNwb25kZXIuTWl4aW4ge1xuICBjb25zdCBzY3JvbGxSZXNwb25kZXIgPSB7Li4uU2Nyb2xsUmVzcG9uZGVyLk1peGlufTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiBzY3JvbGxSZXNwb25kZXIpIHtcbiAgICBpZiAodHlwZW9mIHNjcm9sbFJlc3BvbmRlcltrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzY3JvbGxSZXNwb25kZXJba2V5XSA9IHNjcm9sbFJlc3BvbmRlcltrZXldLmJpbmQobm9kZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNjcm9sbFJlc3BvbmRlcjtcbn1cblxudHlwZSBDb250ZXh0VHlwZSA9IHt8aG9yaXpvbnRhbDogYm9vbGVhbnx9IHwgbnVsbDtcbmNvbnN0IENvbnRleHQ6IFJlYWN0LkNvbnRleHQ8Q29udGV4dFR5cGU+ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmNvbnN0IHN0YW5kYXJkSG9yaXpvbnRhbENvbnRleHQ6IENvbnRleHRUeXBlID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGhvcml6b250YWw6IHRydWUsXG59KTtcbmNvbnN0IHN0YW5kYXJkVmVydGljYWxDb250ZXh0OiBDb250ZXh0VHlwZSA9IE9iamVjdC5mcmVlemUoe2hvcml6b250YWw6IGZhbHNlfSk7XG50eXBlIFNjcm9sbFZpZXdDb21wb25lbnRTdGF0aWNzID0gJFJlYWRPbmx5PHt8XG4gIENvbnRleHQ6IHR5cGVvZiBDb250ZXh0LFxufH0+O1xuXG4vKipcbiAqIENvbXBvbmVudCB0aGF0IHdyYXBzIHBsYXRmb3JtIFNjcm9sbFZpZXcgd2hpbGUgcHJvdmlkaW5nXG4gKiBpbnRlZ3JhdGlvbiB3aXRoIHRvdWNoIGxvY2tpbmcgXCJyZXNwb25kZXJcIiBzeXN0ZW0uXG4gKlxuICogS2VlcCBpbiBtaW5kIHRoYXQgU2Nyb2xsVmlld3MgbXVzdCBoYXZlIGEgYm91bmRlZCBoZWlnaHQgaW4gb3JkZXIgdG8gd29yayxcbiAqIHNpbmNlIHRoZXkgY29udGFpbiB1bmJvdW5kZWQtaGVpZ2h0IGNoaWxkcmVuIGludG8gYSBib3VuZGVkIGNvbnRhaW5lciAodmlhXG4gKiBhIHNjcm9sbCBpbnRlcmFjdGlvbikuIEluIG9yZGVyIHRvIGJvdW5kIHRoZSBoZWlnaHQgb2YgYSBTY3JvbGxWaWV3LCBlaXRoZXJcbiAqIHNldCB0aGUgaGVpZ2h0IG9mIHRoZSB2aWV3IGRpcmVjdGx5IChkaXNjb3VyYWdlZCkgb3IgbWFrZSBzdXJlIGFsbCBwYXJlbnRcbiAqIHZpZXdzIGhhdmUgYm91bmRlZCBoZWlnaHQuIEZvcmdldHRpbmcgdG8gdHJhbnNmZXIgYHtmbGV4OiAxfWAgZG93biB0aGVcbiAqIHZpZXcgc3RhY2sgY2FuIGxlYWQgdG8gZXJyb3JzIGhlcmUsIHdoaWNoIHRoZSBlbGVtZW50IGluc3BlY3RvciBtYWtlc1xuICogZWFzeSB0byBkZWJ1Zy5cbiAqXG4gKiBEb2Vzbid0IHlldCBzdXBwb3J0IG90aGVyIGNvbnRhaW5lZCByZXNwb25kZXJzIGZyb20gYmxvY2tpbmcgdGhpcyBzY3JvbGxcbiAqIHZpZXcgZnJvbSBiZWNvbWluZyB0aGUgcmVzcG9uZGVyLlxuICpcbiAqXG4gKiBgPFNjcm9sbFZpZXc+YCB2cyBbYDxGbGF0TGlzdD5gXShodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL2ZsYXRsaXN0Lmh0bWwpIC0gd2hpY2ggb25lIHRvIHVzZT9cbiAqXG4gKiBgU2Nyb2xsVmlld2Agc2ltcGx5IHJlbmRlcnMgYWxsIGl0cyByZWFjdCBjaGlsZCBjb21wb25lbnRzIGF0IG9uY2UuIFRoYXRcbiAqIG1ha2VzIGl0IHZlcnkgZWFzeSB0byB1bmRlcnN0YW5kIGFuZCB1c2UuXG4gKlxuICogT24gdGhlIG90aGVyIGhhbmQsIHRoaXMgaGFzIGEgcGVyZm9ybWFuY2UgZG93bnNpZGUuIEltYWdpbmUgeW91IGhhdmUgYSB2ZXJ5XG4gKiBsb25nIGxpc3Qgb2YgaXRlbXMgeW91IHdhbnQgdG8gZGlzcGxheSwgbWF5YmUgc2V2ZXJhbCBzY3JlZW5zIHdvcnRoIG9mXG4gKiBjb250ZW50LiBDcmVhdGluZyBKUyBjb21wb25lbnRzIGFuZCBuYXRpdmUgdmlld3MgZm9yIGV2ZXJ5dGhpbmcgYWxsIGF0IG9uY2UsXG4gKiBtdWNoIG9mIHdoaWNoIG1heSBub3QgZXZlbiBiZSBzaG93biwgd2lsbCBjb250cmlidXRlIHRvIHNsb3cgcmVuZGVyaW5nIGFuZFxuICogaW5jcmVhc2VkIG1lbW9yeSB1c2FnZS5cbiAqXG4gKiBUaGlzIGlzIHdoZXJlIGBGbGF0TGlzdGAgY29tZXMgaW50byBwbGF5LiBgRmxhdExpc3RgIHJlbmRlcnMgaXRlbXMgbGF6aWx5LFxuICoganVzdCB3aGVuIHRoZXkgYXJlIGFib3V0IHRvIGFwcGVhciwgYW5kIHJlbW92ZXMgaXRlbXMgdGhhdCBzY3JvbGwgd2F5IG9mZlxuICogc2NyZWVuIHRvIHNhdmUgbWVtb3J5IGFuZCBwcm9jZXNzaW5nIHRpbWUuXG4gKlxuICogYEZsYXRMaXN0YCBpcyBhbHNvIGhhbmR5IGlmIHlvdSB3YW50IHRvIHJlbmRlciBzZXBhcmF0b3JzIGJldHdlZW4geW91ciBpdGVtcyxcbiAqIG11bHRpcGxlIGNvbHVtbnMsIGluZmluaXRlIHNjcm9sbCBsb2FkaW5nLCBvciBhbnkgbnVtYmVyIG9mIG90aGVyIGZlYXR1cmVzIGl0XG4gKiBzdXBwb3J0cyBvdXQgb2YgdGhlIGJveC5cbiAqL1xuY2xhc3MgU2Nyb2xsVmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgc3RhdGljIENvbnRleHQ6IFJlYWN0JENvbnRleHQ8Q29udGV4dFR5cGU+ID0gQ29udGV4dDtcbiAgLyoqXG4gICAqIFBhcnQgMTogUmVtb3ZpbmcgU2Nyb2xsUmVzcG9uZGVyLk1peGluOlxuICAgKlxuICAgKiAxLiBNaXhpbiBtZXRob2RzIHNob3VsZCBiZSBmbG93IHR5cGVkLiBUaGF0J3Mgd2h5IHdlIGNyZWF0ZSBhXG4gICAqICAgIGNvcHkgb2YgU2Nyb2xsUmVzcG9uZGVyLk1peGluIGFuZCBhdHRhY2ggaXQgdG8gdGhpcy5fc2Nyb2xsUmVzcG9uZGVyLlxuICAgKiAgICBPdGhlcndpc2UsIHdlJ2QgaGF2ZSB0byBtYW51YWxseSBkZWNsYXJlIGVhY2ggbWV0aG9kIG9uIHRoZSBjb21wb25lbnRcbiAgICogICAgY2xhc3MgYW5kIGFzc2lnbiBpdCBhIGZsb3cgdHlwZS5cbiAgICogMi4gTWl4aW4gbWV0aG9kcyBjYW4gY2FsbCBjb21wb25lbnQgbWV0aG9kcywgYW5kIGFjY2VzcyB0aGUgY29tcG9uZW50J3NcbiAgICogICAgcHJvcHMgYW5kIHN0YXRlLiBTbywgd2UgbmVlZCB0byBiaW5kIGFsbCBtaXhpbiBtZXRob2RzIHRvIHRoZVxuICAgKiAgICBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqIDMuIENvbnRpbnVlZC4uLlxuICAgKi9cbiAgX3Njcm9sbFJlc3BvbmRlcjogdHlwZW9mIFNjcm9sbFJlc3BvbmRlci5NaXhpbiA9IGNyZWF0ZVNjcm9sbFJlc3BvbmRlcih0aGlzKTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAvKipcbiAgICAgKiBQYXJ0IDI6IFJlbW92aW5nIFNjcm9sbFJlc3BvbmRlci5NaXhpblxuICAgICAqXG4gICAgICogMy4gTWl4aW4gbWV0aG9kcyBhY2Nlc3Mgb3RoZXIgbWl4aW4gbWV0aG9kcyB2aWEgZHluYW1pYyBkaXNwYXRjaCB1c2luZ1xuICAgICAqICAgIHRoaXMuIFNpbmNlIG1peGluIG1ldGhvZHMgYXJlIGJvdW5kIHRvIHRoZSBjb21wb25lbnQgaW5zdGFuY2UsIHdlIG5lZWRcbiAgICAgKiAgICB0byBjb3B5IGFsbCBtaXhpbiBtZXRob2RzIHRvIHRoZSBjb21wb25lbnQgaW5zdGFuY2UuIFRoaXMgaXMgYWxzb1xuICAgICAqICAgIG5lY2Vzc2FyeSBiZWNhdXNlIGdldFNjcm9sbFJlc3BvbmRlcigpIGlzIGEgcHVibGljIG1ldGhvZCB0aGF0IHJldHVybnNcbiAgICAgKiAgICBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byBleGVjdXRlIGFsbCBzY3JvbGxSZXNwb25kZXIgbWV0aG9kcy5cbiAgICAgKiAgICBTaW5jZSB0aGUgb2JqZWN0IHJldHVybmVkIGZyb20gdGhhdCBtZXRob2QgaXMgdGhlIFNjcm9sbFZpZXcgaW5zdGFuY2UsXG4gICAgICogICAgd2UgbmVlZCB0byBiaW5kIGFsbCBtaXhpbiBtZXRob2RzIHRvIHRoZSBTY3JvbGxWaWV3IGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZvciAoY29uc3Qga2V5IGluIFNjcm9sbFJlc3BvbmRlci5NaXhpbikge1xuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgU2Nyb2xsUmVzcG9uZGVyLk1peGluW2tleV0gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAga2V5LnN0YXJ0c1dpdGgoJ3Njcm9sbFJlc3BvbmRlcicpXG4gICAgICApIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZSAtIGR5bmFtaWNhbGx5IGFkZGluZyBwcm9wZXJ0aWVzIHRvIGEgY2xhc3NcbiAgICAgICAgKHRoaXM6IGFueSlba2V5XSA9IFNjcm9sbFJlc3BvbmRlci5NaXhpbltrZXldLmJpbmQodGhpcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFydCAzOiBSZW1vdmluZyBTY3JvbGxSZXNwb25kZXIuTWl4aW5cbiAgICAgKlxuICAgICAqIDQuIE1peGlucyBjYW4gaW5pdGlhbGl6ZSBwcm9wZXJ0aWVzIGFuZCB1c2UgcHJvcGVydGllcyBvbiB0aGUgY29tcG9uZW50XG4gICAgICogICAgaW5zdGFuY2UuXG4gICAgICovXG4gICAgT2JqZWN0LmtleXMoU2Nyb2xsUmVzcG9uZGVyLk1peGluKVxuICAgICAgLmZpbHRlcihrZXkgPT4gdHlwZW9mIFNjcm9sbFJlc3BvbmRlci5NaXhpbltrZXldICE9PSAnZnVuY3Rpb24nKVxuICAgICAgLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZSAtIGR5bmFtaWNhbGx5IGFkZGluZyBwcm9wZXJ0aWVzIHRvIGEgY2xhc3NcbiAgICAgICAgKHRoaXM6IGFueSlba2V5XSA9IFNjcm9sbFJlc3BvbmRlci5NaXhpbltrZXldO1xuICAgICAgfSk7XG4gIH1cblxuICBfc2Nyb2xsQW5pbWF0ZWRWYWx1ZTogQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbi5WYWx1ZSA9IG5ldyBBbmltYXRlZEltcGxlbWVudGF0aW9uLlZhbHVlKFxuICAgIDAsXG4gICk7XG4gIF9zY3JvbGxBbmltYXRlZFZhbHVlQXR0YWNobWVudDogP3tkZXRhY2g6ICgpID0+IHZvaWQsIC4uLn0gPSBudWxsO1xuICBfc3RpY2t5SGVhZGVyUmVmczogTWFwPFxuICAgIHN0cmluZyxcbiAgICBSZWFjdC5FbGVtZW50UmVmPFN0aWNreUhlYWRlckNvbXBvbmVudFR5cGU+LFxuICA+ID0gbmV3IE1hcCgpO1xuICBfaGVhZGVyTGF5b3V0WXM6IE1hcDxzdHJpbmcsIG51bWJlcj4gPSBuZXcgTWFwKCk7XG5cbiAgc3RhdGU6IFN0YXRlID0ge1xuICAgIGxheW91dEhlaWdodDogbnVsbCxcbiAgICAuLi5TY3JvbGxSZXNwb25kZXIuTWl4aW4uc2Nyb2xsUmVzcG9uZGVyTWl4aW5HZXRJbml0aWFsU3RhdGUoKSxcbiAgfTtcblxuICBVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMuX3Njcm9sbFJlc3BvbmRlci5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCk7XG4gICAgdGhpcy5fc2Nyb2xsQW5pbWF0ZWRWYWx1ZSA9IG5ldyBBbmltYXRlZEltcGxlbWVudGF0aW9uLlZhbHVlKFxuICAgICAgdGhpcy5wcm9wcy5jb250ZW50T2Zmc2V0Py55ID8/IDAsXG4gICAgKTtcbiAgICB0aGlzLl9zY3JvbGxBbmltYXRlZFZhbHVlLnNldE9mZnNldCh0aGlzLnByb3BzLmNvbnRlbnRJbnNldD8udG9wID8/IDApO1xuICAgIHRoaXMuX3N0aWNreUhlYWRlclJlZnMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5faGVhZGVyTGF5b3V0WXMgPSBuZXcgTWFwKCk7XG4gIH1cblxuICBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHM6IFByb3BzKSB7XG4gICAgY29uc3QgY3VycmVudENvbnRlbnRJbnNldFRvcCA9IHRoaXMucHJvcHMuY29udGVudEluc2V0XG4gICAgICA/IHRoaXMucHJvcHMuY29udGVudEluc2V0LnRvcFxuICAgICAgOiAwO1xuICAgIGNvbnN0IG5leHRDb250ZW50SW5zZXRUb3AgPSBuZXh0UHJvcHMuY29udGVudEluc2V0XG4gICAgICA/IG5leHRQcm9wcy5jb250ZW50SW5zZXQudG9wXG4gICAgICA6IDA7XG4gICAgaWYgKGN1cnJlbnRDb250ZW50SW5zZXRUb3AgIT09IG5leHRDb250ZW50SW5zZXRUb3ApIHtcbiAgICAgIHRoaXMuX3Njcm9sbEFuaW1hdGVkVmFsdWUuc2V0T2Zmc2V0KG5leHRDb250ZW50SW5zZXRUb3AgfHwgMCk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5fdXBkYXRlQW5pbWF0ZWROb2RlQXR0YWNobWVudCgpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMuX3VwZGF0ZUFuaW1hdGVkTm9kZUF0dGFjaG1lbnQoKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuX3Njcm9sbFJlc3BvbmRlci5jb21wb25lbnRXaWxsVW5tb3VudCgpO1xuICAgIGlmICh0aGlzLl9zY3JvbGxBbmltYXRlZFZhbHVlQXR0YWNobWVudCkge1xuICAgICAgdGhpcy5fc2Nyb2xsQW5pbWF0ZWRWYWx1ZUF0dGFjaG1lbnQuZGV0YWNoKCk7XG4gICAgfVxuICB9XG5cbiAgX3NldE5hdGl2ZVJlZiA9IHNldEFuZEZvcndhcmRSZWYoe1xuICAgIGdldEZvcndhcmRlZFJlZjogKCkgPT4gdGhpcy5wcm9wcy5zY3JvbGxWaWV3UmVmLFxuICAgIHNldExvY2FsUmVmOiByZWYgPT4ge1xuICAgICAgdGhpcy5fc2Nyb2xsVmlld1JlZiA9IHJlZjtcblxuICAgICAgLypcbiAgICAgICAgVGhpcyBpcyBhIGhhY2suIElkZWFsbHkgd2Ugd291bGQgZm9yd2FyZFJlZiB0byB0aGUgdW5kZXJseWluZ1xuICAgICAgICBob3N0IGNvbXBvbmVudC4gSG93ZXZlciwgc2luY2UgU2Nyb2xsVmlldyBoYXMgaXQncyBvd24gbWV0aG9kcyB0aGF0IGNhbiBiZVxuICAgICAgICBjYWxsZWQgYXMgd2VsbCwgaWYgd2UgdXNlZCB0aGUgc3RhbmRhcmQgZm9yd2FyZFJlZiB0aGVuIHRoZXNlXG4gICAgICAgIG1ldGhvZHMgd291bGRuJ3QgYmUgYWNjZXNzaWJsZSBhbmQgdGh1cyBiZSBhIGJyZWFraW5nIGNoYW5nZS5cblxuICAgICAgICBUaGVyZWZvcmUgd2UgZWRpdCByZWYgdG8gaW5jbHVkZSBTY3JvbGxWaWV3J3MgcHVibGljIG1ldGhvZHMgc28gdGhhdFxuICAgICAgICB0aGV5IGFyZSBjYWxsYWJsZSBmcm9tIHRoZSByZWYuXG4gICAgICAqL1xuICAgICAgaWYgKHJlZikge1xuICAgICAgICByZWYuZ2V0U2Nyb2xsUmVzcG9uZGVyID0gdGhpcy5nZXRTY3JvbGxSZXNwb25kZXI7XG4gICAgICAgIHJlZi5nZXRTY3JvbGxhYmxlTm9kZSA9IHRoaXMuZ2V0U2Nyb2xsYWJsZU5vZGU7XG4gICAgICAgIHJlZi5nZXRJbm5lclZpZXdOb2RlID0gdGhpcy5nZXRJbm5lclZpZXdOb2RlO1xuICAgICAgICByZWYuZ2V0SW5uZXJWaWV3UmVmID0gdGhpcy5nZXRJbm5lclZpZXdSZWY7XG4gICAgICAgIHJlZi5nZXROYXRpdmVTY3JvbGxSZWYgPSB0aGlzLmdldE5hdGl2ZVNjcm9sbFJlZjtcbiAgICAgICAgcmVmLnNjcm9sbFRvID0gdGhpcy5zY3JvbGxUbztcbiAgICAgICAgcmVmLnNjcm9sbFRvRW5kID0gdGhpcy5zY3JvbGxUb0VuZDtcbiAgICAgICAgcmVmLmZsYXNoU2Nyb2xsSW5kaWNhdG9ycyA9IHRoaXMuZmxhc2hTY3JvbGxJbmRpY2F0b3JzO1xuXG4gICAgICAgIC8vICRGbG93Rml4TWUgLSBUaGlzIG1ldGhvZCB3YXMgbWFudWFsbHkgYm91bmQgZnJvbSBTY3JvbGxSZXNwb25kZXIubWl4aW5cbiAgICAgICAgcmVmLnNjcm9sbFJlc3BvbmRlclpvb21UbyA9IHRoaXMuc2Nyb2xsUmVzcG9uZGVyWm9vbVRvO1xuICAgICAgICAvLyAkRmxvd0ZpeE1lIC0gVGhpcyBtZXRob2Qgd2FzIG1hbnVhbGx5IGJvdW5kIGZyb20gU2Nyb2xsUmVzcG9uZGVyLm1peGluXG4gICAgICAgIHJlZi5zY3JvbGxSZXNwb25kZXJTY3JvbGxOYXRpdmVIYW5kbGVUb0tleWJvYXJkID0gdGhpcy5zY3JvbGxSZXNwb25kZXJTY3JvbGxOYXRpdmVIYW5kbGVUb0tleWJvYXJkO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSB1bmRlcmx5aW5nIHNjcm9sbCByZXNwb25kZXIsIHdoaWNoIHN1cHBvcnRzXG4gICAqIG9wZXJhdGlvbnMgbGlrZSBgc2Nyb2xsVG9gLiBBbGwgU2Nyb2xsVmlldy1saWtlIGNvbXBvbmVudHMgc2hvdWxkXG4gICAqIGltcGxlbWVudCB0aGlzIG1ldGhvZCBzbyB0aGF0IHRoZXkgY2FuIGJlIGNvbXBvc2VkIHdoaWxlIHByb3ZpZGluZyBhY2Nlc3NcbiAgICogdG8gdGhlIHVuZGVybHlpbmcgc2Nyb2xsIHJlc3BvbmRlcidzIG1ldGhvZHMuXG4gICAqL1xuICBnZXRTY3JvbGxSZXNwb25kZXI6ICgpID0+IFNjcm9sbFJlc3BvbmRlclR5cGUgPSAoKSA9PiB7XG4gICAgLy8gJEZsb3dGaXhNZSAtIG92ZXJyaWRpbmcgdHlwZSB0byBpbmNsdWRlIFNjcm9sbFJlc3BvbmRlci5NaXhpblxuICAgIHJldHVybiAoKHRoaXM6IGFueSk6IFNjcm9sbFJlc3BvbmRlclR5cGUpO1xuICB9O1xuXG4gIGdldFNjcm9sbGFibGVOb2RlOiAoKSA9PiA/bnVtYmVyID0gKCkgPT4ge1xuICAgIHJldHVybiBSZWFjdE5hdGl2ZS5maW5kTm9kZUhhbmRsZSh0aGlzLl9zY3JvbGxWaWV3UmVmKTtcbiAgfTtcblxuICBnZXRJbm5lclZpZXdOb2RlKCk6ID9udW1iZXIge1xuICAgIHJldHVybiBSZWFjdE5hdGl2ZS5maW5kTm9kZUhhbmRsZSh0aGlzLl9pbm5lclZpZXdSZWYpO1xuICB9XG5cbiAgZ2V0SW5uZXJWaWV3UmVmKCk6ID9SZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBWaWV3PiB7XG4gICAgcmV0dXJuIHRoaXMuX2lubmVyVmlld1JlZjtcbiAgfVxuXG4gIGdldE5hdGl2ZVNjcm9sbFJlZjogKCkgPT4gP1JlYWN0LkVsZW1lbnRSZWY8SG9zdENvbXBvbmVudDxtaXhlZD4+ID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLl9zY3JvbGxWaWV3UmVmO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTY3JvbGxzIHRvIGEgZ2l2ZW4geCwgeSBvZmZzZXQsIGVpdGhlciBpbW1lZGlhdGVseSBvciB3aXRoIGEgc21vb3RoIGFuaW1hdGlvbi5cbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICpcbiAgICogYHNjcm9sbFRvKHt4OiAwLCB5OiAwLCBhbmltYXRlZDogdHJ1ZX0pYFxuICAgKlxuICAgKiBOb3RlOiBUaGUgd2VpcmQgZnVuY3Rpb24gc2lnbmF0dXJlIGlzIGR1ZSB0byB0aGUgZmFjdCB0aGF0LCBmb3IgaGlzdG9yaWNhbCByZWFzb25zLFxuICAgKiB0aGUgZnVuY3Rpb24gYWxzbyBhY2NlcHRzIHNlcGFyYXRlIGFyZ3VtZW50cyBhcyBhbiBhbHRlcm5hdGl2ZSB0byB0aGUgb3B0aW9ucyBvYmplY3QuXG4gICAqIFRoaXMgaXMgZGVwcmVjYXRlZCBkdWUgdG8gYW1iaWd1aXR5ICh5IGJlZm9yZSB4KSwgYW5kIFNIT1VMRCBOT1QgQkUgVVNFRC5cbiAgICovXG4gIHNjcm9sbFRvOiAoXG4gICAgb3B0aW9ucz86XG4gICAgICB8IHtcbiAgICAgICAgICB4PzogbnVtYmVyLFxuICAgICAgICAgIHk/OiBudW1iZXIsXG4gICAgICAgICAgYW5pbWF0ZWQ/OiBib29sZWFuLFxuICAgICAgICAgIC4uLlxuICAgICAgICB9XG4gICAgICB8IG51bWJlcixcbiAgICBkZXByZWNhdGVkWD86IG51bWJlcixcbiAgICBkZXByZWNhdGVkQW5pbWF0ZWQ/OiBib29sZWFuLFxuICApID0+IHZvaWQgPSAoXG4gICAgb3B0aW9ucz86XG4gICAgICB8IHtcbiAgICAgICAgICB4PzogbnVtYmVyLFxuICAgICAgICAgIHk/OiBudW1iZXIsXG4gICAgICAgICAgYW5pbWF0ZWQ/OiBib29sZWFuLFxuICAgICAgICAgIC4uLlxuICAgICAgICB9XG4gICAgICB8IG51bWJlcixcbiAgICBkZXByZWNhdGVkWD86IG51bWJlcixcbiAgICBkZXByZWNhdGVkQW5pbWF0ZWQ/OiBib29sZWFuLFxuICApID0+IHtcbiAgICBsZXQgeCwgeSwgYW5pbWF0ZWQ7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnYHNjcm9sbFRvKHksIHgsIGFuaW1hdGVkKWAgaXMgZGVwcmVjYXRlZC4gVXNlIGBzY3JvbGxUbyh7eDogNSwgeTogNSwgJyArXG4gICAgICAgICAgJ2FuaW1hdGVkOiB0cnVlfSlgIGluc3RlYWQuJyxcbiAgICAgICk7XG4gICAgICB5ID0gb3B0aW9ucztcbiAgICAgIHggPSBkZXByZWNhdGVkWDtcbiAgICAgIGFuaW1hdGVkID0gZGVwcmVjYXRlZEFuaW1hdGVkO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucykge1xuICAgICAgeSA9IG9wdGlvbnMueTtcbiAgICAgIHggPSBvcHRpb25zLng7XG4gICAgICBhbmltYXRlZCA9IG9wdGlvbnMuYW5pbWF0ZWQ7XG4gICAgfVxuICAgIHRoaXMuX3Njcm9sbFJlc3BvbmRlci5zY3JvbGxSZXNwb25kZXJTY3JvbGxUbyh7XG4gICAgICB4OiB4IHx8IDAsXG4gICAgICB5OiB5IHx8IDAsXG4gICAgICBhbmltYXRlZDogYW5pbWF0ZWQgIT09IGZhbHNlLFxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJZiB0aGlzIGlzIGEgdmVydGljYWwgU2Nyb2xsVmlldyBzY3JvbGxzIHRvIHRoZSBib3R0b20uXG4gICAqIElmIHRoaXMgaXMgYSBob3Jpem9udGFsIFNjcm9sbFZpZXcgc2Nyb2xscyB0byB0aGUgcmlnaHQuXG4gICAqXG4gICAqIFVzZSBgc2Nyb2xsVG9FbmQoe2FuaW1hdGVkOiB0cnVlfSlgIGZvciBzbW9vdGggYW5pbWF0ZWQgc2Nyb2xsaW5nLFxuICAgKiBgc2Nyb2xsVG9FbmQoe2FuaW1hdGVkOiBmYWxzZX0pYCBmb3IgaW1tZWRpYXRlIHNjcm9sbGluZy5cbiAgICogSWYgbm8gb3B0aW9ucyBhcmUgcGFzc2VkLCBgYW5pbWF0ZWRgIGRlZmF1bHRzIHRvIHRydWUuXG4gICAqL1xuICBzY3JvbGxUb0VuZDogKG9wdGlvbnM/OiA/e2FuaW1hdGVkPzogYm9vbGVhbiwgLi4ufSkgPT4gdm9pZCA9IChcbiAgICBvcHRpb25zPzogP3thbmltYXRlZD86IGJvb2xlYW4sIC4uLn0sXG4gICkgPT4ge1xuICAgIC8vIERlZmF1bHQgdG8gdHJ1ZVxuICAgIGNvbnN0IGFuaW1hdGVkID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmltYXRlZCkgIT09IGZhbHNlO1xuICAgIHRoaXMuX3Njcm9sbFJlc3BvbmRlci5zY3JvbGxSZXNwb25kZXJTY3JvbGxUb0VuZCh7XG4gICAgICBhbmltYXRlZDogYW5pbWF0ZWQsXG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIERpc3BsYXlzIHRoZSBzY3JvbGwgaW5kaWNhdG9ycyBtb21lbnRhcmlseS5cbiAgICpcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgZmxhc2hTY3JvbGxJbmRpY2F0b3JzOiAoKSA9PiB2b2lkID0gKCkgPT4ge1xuICAgIHRoaXMuX3Njcm9sbFJlc3BvbmRlci5zY3JvbGxSZXNwb25kZXJGbGFzaFNjcm9sbEluZGljYXRvcnMoKTtcbiAgfTtcblxuICBfZ2V0S2V5Rm9ySW5kZXgoaW5kZXgsIGNoaWxkQXJyYXkpIHtcbiAgICBjb25zdCBjaGlsZCA9IGNoaWxkQXJyYXlbaW5kZXhdO1xuICAgIHJldHVybiBjaGlsZCAmJiBjaGlsZC5rZXk7XG4gIH1cblxuICBfdXBkYXRlQW5pbWF0ZWROb2RlQXR0YWNobWVudCgpIHtcbiAgICBpZiAodGhpcy5fc2Nyb2xsQW5pbWF0ZWRWYWx1ZUF0dGFjaG1lbnQpIHtcbiAgICAgIHRoaXMuX3Njcm9sbEFuaW1hdGVkVmFsdWVBdHRhY2htZW50LmRldGFjaCgpO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICB0aGlzLnByb3BzLnN0aWNreUhlYWRlckluZGljZXMgJiZcbiAgICAgIHRoaXMucHJvcHMuc3RpY2t5SGVhZGVySW5kaWNlcy5sZW5ndGggPiAwXG4gICAgKSB7XG4gICAgICB0aGlzLl9zY3JvbGxBbmltYXRlZFZhbHVlQXR0YWNobWVudCA9IEFuaW1hdGVkSW1wbGVtZW50YXRpb24uYXR0YWNoTmF0aXZlRXZlbnQoXG4gICAgICAgIHRoaXMuX3Njcm9sbFZpZXdSZWYsXG4gICAgICAgICdvblNjcm9sbCcsXG4gICAgICAgIFt7bmF0aXZlRXZlbnQ6IHtjb250ZW50T2Zmc2V0OiB7eTogdGhpcy5fc2Nyb2xsQW5pbWF0ZWRWYWx1ZX19fV0sXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIF9zZXRTdGlja3lIZWFkZXJSZWYoXG4gICAga2V5OiBzdHJpbmcsXG4gICAgcmVmOiA/UmVhY3QuRWxlbWVudFJlZjxTdGlja3lIZWFkZXJDb21wb25lbnRUeXBlPixcbiAgKSB7XG4gICAgaWYgKHJlZikge1xuICAgICAgdGhpcy5fc3RpY2t5SGVhZGVyUmVmcy5zZXQoa2V5LCByZWYpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zdGlja3lIZWFkZXJSZWZzLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgfVxuXG4gIF9vblN0aWNreUhlYWRlckxheW91dChpbmRleCwgZXZlbnQsIGtleSkge1xuICAgIGNvbnN0IHtzdGlja3lIZWFkZXJJbmRpY2VzfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFzdGlja3lIZWFkZXJJbmRpY2VzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNoaWxkQXJyYXkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIGlmIChrZXkgIT09IHRoaXMuX2dldEtleUZvckluZGV4KGluZGV4LCBjaGlsZEFycmF5KSkge1xuICAgICAgLy8gaWdub3JlIHN0YWxlIGxheW91dCB1cGRhdGVcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBsYXlvdXRZID0gZXZlbnQubmF0aXZlRXZlbnQubGF5b3V0Lnk7XG4gICAgdGhpcy5faGVhZGVyTGF5b3V0WXMuc2V0KGtleSwgbGF5b3V0WSk7XG5cbiAgICBjb25zdCBpbmRleE9mSW5kZXggPSBzdGlja3lIZWFkZXJJbmRpY2VzLmluZGV4T2YoaW5kZXgpO1xuICAgIGNvbnN0IHByZXZpb3VzSGVhZGVySW5kZXggPSBzdGlja3lIZWFkZXJJbmRpY2VzW2luZGV4T2ZJbmRleCAtIDFdO1xuICAgIGlmIChwcmV2aW91c0hlYWRlckluZGV4ICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzSGVhZGVyID0gdGhpcy5fc3RpY2t5SGVhZGVyUmVmcy5nZXQoXG4gICAgICAgIHRoaXMuX2dldEtleUZvckluZGV4KHByZXZpb3VzSGVhZGVySW5kZXgsIGNoaWxkQXJyYXkpLFxuICAgICAgKTtcbiAgICAgIHByZXZpb3VzSGVhZGVyICYmXG4gICAgICAgIHByZXZpb3VzSGVhZGVyLnNldE5leHRIZWFkZXJZICYmXG4gICAgICAgIHByZXZpb3VzSGVhZGVyLnNldE5leHRIZWFkZXJZKGxheW91dFkpO1xuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVTY3JvbGwgPSAoZTogU2Nyb2xsRXZlbnQpID0+IHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnByb3BzLm9uU2Nyb2xsICYmXG4gICAgICAgIHRoaXMucHJvcHMuc2Nyb2xsRXZlbnRUaHJvdHRsZSA9PSBudWxsICYmXG4gICAgICAgIFBsYXRmb3JtLk9TID09PSAnaW9zJ1xuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICdZb3Ugc3BlY2lmaWVkIGBvblNjcm9sbGAgb24gYSA8U2Nyb2xsVmlldz4gYnV0IG5vdCAnICtcbiAgICAgICAgICAgICdgc2Nyb2xsRXZlbnRUaHJvdHRsZWAuIFlvdSB3aWxsIG9ubHkgcmVjZWl2ZSBvbmUgZXZlbnQuICcgK1xuICAgICAgICAgICAgJ1VzaW5nIGAxNmAgeW91IGdldCBhbGwgdGhlIGV2ZW50cyBidXQgYmUgYXdhcmUgdGhhdCBpdCBtYXkgJyArXG4gICAgICAgICAgICBcImNhdXNlIGZyYW1lIGRyb3BzLCB1c2UgYSBiaWdnZXIgbnVtYmVyIGlmIHlvdSBkb24ndCBuZWVkIGFzIFwiICtcbiAgICAgICAgICAgICdtdWNoIHByZWNpc2lvbi4nLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnByb3BzLmtleWJvYXJkRGlzbWlzc01vZGUgPT09ICdvbi1kcmFnJyAmJlxuICAgICAgICB0aGlzLnN0YXRlLmlzVG91Y2hpbmdcbiAgICAgICkge1xuICAgICAgICBkaXNtaXNzS2V5Ym9hcmQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fc2Nyb2xsUmVzcG9uZGVyLnNjcm9sbFJlc3BvbmRlckhhbmRsZVNjcm9sbChlKTtcbiAgfTtcblxuICBfaGFuZGxlTGF5b3V0ID0gKGU6IExheW91dEV2ZW50KSA9PiB7XG4gICAgaWYgKHRoaXMucHJvcHMuaW52ZXJ0U3RpY2t5SGVhZGVycyA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7bGF5b3V0SGVpZ2h0OiBlLm5hdGl2ZUV2ZW50LmxheW91dC5oZWlnaHR9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMub25MYXlvdXQpIHtcbiAgICAgIHRoaXMucHJvcHMub25MYXlvdXQoZSk7XG4gICAgfVxuICB9O1xuXG4gIF9oYW5kbGVDb250ZW50T25MYXlvdXQgPSAoZTogTGF5b3V0RXZlbnQpID0+IHtcbiAgICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSBlLm5hdGl2ZUV2ZW50LmxheW91dDtcbiAgICB0aGlzLnByb3BzLm9uQ29udGVudFNpemVDaGFuZ2UgJiZcbiAgICAgIHRoaXMucHJvcHMub25Db250ZW50U2l6ZUNoYW5nZSh3aWR0aCwgaGVpZ2h0KTtcbiAgfTtcblxuICBfc2Nyb2xsVmlld1JlZjogP1JlYWN0LkVsZW1lbnRSZWY8SG9zdENvbXBvbmVudDxtaXhlZD4+ID0gbnVsbDtcblxuICBfaW5uZXJWaWV3UmVmOiA/UmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgVmlldz4gPSBudWxsO1xuICBfc2V0SW5uZXJWaWV3UmVmID0gc2V0QW5kRm9yd2FyZFJlZih7XG4gICAgZ2V0Rm9yd2FyZGVkUmVmOiAoKSA9PiB0aGlzLnByb3BzLmlubmVyVmlld1JlZixcbiAgICBzZXRMb2NhbFJlZjogcmVmID0+IHtcbiAgICAgIHRoaXMuX2lubmVyVmlld1JlZiA9IHJlZjtcbiAgICB9LFxuICB9KTtcblxuICByZW5kZXIoKTogUmVhY3QuTm9kZSB8IFJlYWN0LkVsZW1lbnQ8c3RyaW5nPiB7XG4gICAgbGV0IFNjcm9sbFZpZXdDbGFzcztcbiAgICBsZXQgU2Nyb2xsQ29udGVudENvbnRhaW5lclZpZXdDbGFzcztcbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgaWYgKHRoaXMucHJvcHMuaG9yaXpvbnRhbCA9PT0gdHJ1ZSkge1xuICAgICAgICBTY3JvbGxWaWV3Q2xhc3MgPSBBbmRyb2lkSG9yaXpvbnRhbFNjcm9sbFZpZXc7XG4gICAgICAgIFNjcm9sbENvbnRlbnRDb250YWluZXJWaWV3Q2xhc3MgPSBBbmRyb2lkSG9yaXpvbnRhbFNjcm9sbENvbnRlbnRWaWV3O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgU2Nyb2xsVmlld0NsYXNzID0gQW5kcm9pZFNjcm9sbFZpZXc7XG4gICAgICAgIFNjcm9sbENvbnRlbnRDb250YWluZXJWaWV3Q2xhc3MgPSBWaWV3O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBTY3JvbGxWaWV3Q2xhc3MgPSBSQ1RTY3JvbGxWaWV3O1xuICAgICAgU2Nyb2xsQ29udGVudENvbnRhaW5lclZpZXdDbGFzcyA9IFJDVFNjcm9sbENvbnRlbnRWaWV3O1xuICAgIH1cblxuICAgIGludmFyaWFudChcbiAgICAgIFNjcm9sbFZpZXdDbGFzcyAhPT0gdW5kZWZpbmVkLFxuICAgICAgJ1Njcm9sbFZpZXdDbGFzcyBtdXN0IG5vdCBiZSB1bmRlZmluZWQnLFxuICAgICk7XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICBTY3JvbGxDb250ZW50Q29udGFpbmVyVmlld0NsYXNzICE9PSB1bmRlZmluZWQsXG4gICAgICAnU2Nyb2xsQ29udGVudENvbnRhaW5lclZpZXdDbGFzcyBtdXN0IG5vdCBiZSB1bmRlZmluZWQnLFxuICAgICk7XG5cbiAgICBjb25zdCBjb250ZW50Q29udGFpbmVyU3R5bGUgPSBbXG4gICAgICB0aGlzLnByb3BzLmhvcml6b250YWwgPT09IHRydWUgJiYgc3R5bGVzLmNvbnRlbnRDb250YWluZXJIb3Jpem9udGFsLFxuICAgICAgdGhpcy5wcm9wcy5jb250ZW50Q29udGFpbmVyU3R5bGUsXG4gICAgXTtcbiAgICBpZiAoX19ERVZfXyAmJiB0aGlzLnByb3BzLnN0eWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHN0eWxlID0gZmxhdHRlblN0eWxlKHRoaXMucHJvcHMuc3R5bGUpO1xuICAgICAgY29uc3QgY2hpbGRMYXlvdXRQcm9wcyA9IFsnYWxpZ25JdGVtcycsICdqdXN0aWZ5Q29udGVudCddLmZpbHRlcihcbiAgICAgICAgcHJvcCA9PiBzdHlsZSAmJiBzdHlsZVtwcm9wXSAhPT0gdW5kZWZpbmVkLFxuICAgICAgKTtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgY2hpbGRMYXlvdXRQcm9wcy5sZW5ndGggPT09IDAsXG4gICAgICAgICdTY3JvbGxWaWV3IGNoaWxkIGxheW91dCAoJyArXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkoY2hpbGRMYXlvdXRQcm9wcykgK1xuICAgICAgICAgICcpIG11c3QgYmUgYXBwbGllZCB0aHJvdWdoIHRoZSBjb250ZW50Q29udGFpbmVyU3R5bGUgcHJvcC4nLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBsZXQgY29udGVudFNpemVDaGFuZ2VQcm9wcyA9IHt9O1xuICAgIGlmICh0aGlzLnByb3BzLm9uQ29udGVudFNpemVDaGFuZ2UpIHtcbiAgICAgIGNvbnRlbnRTaXplQ2hhbmdlUHJvcHMgPSB7XG4gICAgICAgIG9uTGF5b3V0OiB0aGlzLl9oYW5kbGVDb250ZW50T25MYXlvdXQsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IHtzdGlja3lIZWFkZXJJbmRpY2VzfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIGlmIChzdGlja3lIZWFkZXJJbmRpY2VzICE9IG51bGwgJiYgc3RpY2t5SGVhZGVySW5kaWNlcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBjaGlsZEFycmF5ID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcblxuICAgICAgY2hpbGRyZW4gPSBjaGlsZEFycmF5Lm1hcCgoY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4T2ZJbmRleCA9IGNoaWxkID8gc3RpY2t5SGVhZGVySW5kaWNlcy5pbmRleE9mKGluZGV4KSA6IC0xO1xuICAgICAgICBpZiAoaW5kZXhPZkluZGV4ID4gLTEpIHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBjaGlsZC5rZXk7XG4gICAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gc3RpY2t5SGVhZGVySW5kaWNlc1tpbmRleE9mSW5kZXggKyAxXTtcbiAgICAgICAgICBjb25zdCBTdGlja3lIZWFkZXJDb21wb25lbnQgPVxuICAgICAgICAgICAgdGhpcy5wcm9wcy5TdGlja3lIZWFkZXJDb21wb25lbnQgfHwgU2Nyb2xsVmlld1N0aWNreUhlYWRlcjtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFN0aWNreUhlYWRlckNvbXBvbmVudFxuICAgICAgICAgICAgICBrZXk9e2tleX1cbiAgICAgICAgICAgICAgcmVmPXtyZWYgPT4gdGhpcy5fc2V0U3RpY2t5SGVhZGVyUmVmKGtleSwgcmVmKX1cbiAgICAgICAgICAgICAgbmV4dEhlYWRlckxheW91dFk9e3RoaXMuX2hlYWRlckxheW91dFlzLmdldChcbiAgICAgICAgICAgICAgICB0aGlzLl9nZXRLZXlGb3JJbmRleChuZXh0SW5kZXgsIGNoaWxkQXJyYXkpLFxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICBvbkxheW91dD17ZXZlbnQgPT4gdGhpcy5fb25TdGlja3lIZWFkZXJMYXlvdXQoaW5kZXgsIGV2ZW50LCBrZXkpfVxuICAgICAgICAgICAgICBzY3JvbGxBbmltYXRlZFZhbHVlPXt0aGlzLl9zY3JvbGxBbmltYXRlZFZhbHVlfVxuICAgICAgICAgICAgICBpbnZlcnRlZD17dGhpcy5wcm9wcy5pbnZlcnRTdGlja3lIZWFkZXJzfVxuICAgICAgICAgICAgICBzY3JvbGxWaWV3SGVpZ2h0PXt0aGlzLnN0YXRlLmxheW91dEhlaWdodH0+XG4gICAgICAgICAgICAgIHtjaGlsZH1cbiAgICAgICAgICAgIDwvU3RpY2t5SGVhZGVyQ29tcG9uZW50PlxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgY2hpbGRyZW4gPSAoXG4gICAgICA8Q29udGV4dC5Qcm92aWRlclxuICAgICAgICB2YWx1ZT17XG4gICAgICAgICAgdGhpcy5wcm9wcy5ob3Jpem9udGFsID09PSB0cnVlXG4gICAgICAgICAgICA/IHN0YW5kYXJkSG9yaXpvbnRhbENvbnRleHRcbiAgICAgICAgICAgIDogc3RhbmRhcmRWZXJ0aWNhbENvbnRleHRcbiAgICAgICAgfT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9Db250ZXh0LlByb3ZpZGVyPlxuICAgICk7XG5cbiAgICBjb25zdCBoYXNTdGlja3lIZWFkZXJzID1cbiAgICAgIEFycmF5LmlzQXJyYXkoc3RpY2t5SGVhZGVySW5kaWNlcykgJiYgc3RpY2t5SGVhZGVySW5kaWNlcy5sZW5ndGggPiAwO1xuXG4gICAgY29uc3QgY29udGVudENvbnRhaW5lciA9IChcbiAgICAgIC8qICRGbG93Rml4TWUoPj0wLjExMi4wIHNpdGU9cmVhY3RfbmF0aXZlX2ZiKSBUaGlzIGNvbW1lbnQgc3VwcHJlc3NlcyBhblxuICAgICAgICogZXJyb3IgZm91bmQgd2hlbiBGbG93IHYwLjExMiB3YXMgZGVwbG95ZWQuIFRvIHNlZSB0aGUgZXJyb3IsIGRlbGV0ZVxuICAgICAgICogdGhpcyBjb21tZW50IGFuZCBydW4gRmxvdy4gKi9cbiAgICAgIDxTY3JvbGxDb250ZW50Q29udGFpbmVyVmlld0NsYXNzXG4gICAgICAgIHsuLi5jb250ZW50U2l6ZUNoYW5nZVByb3BzfVxuICAgICAgICByZWY9e3RoaXMuX3NldElubmVyVmlld1JlZn1cbiAgICAgICAgc3R5bGU9e2NvbnRlbnRDb250YWluZXJTdHlsZX1cbiAgICAgICAgcmVtb3ZlQ2xpcHBlZFN1YnZpZXdzPXtcbiAgICAgICAgICAvLyBTdWJ2aWV3IGNsaXBwaW5nIGNhdXNlcyBpc3N1ZXMgd2l0aCBzdGlja3kgaGVhZGVycyBvbiBBbmRyb2lkIGFuZFxuICAgICAgICAgIC8vIHdvdWxkIGJlIGhhcmQgdG8gZml4IHByb3Blcmx5IGluIGEgcGVyZm9ybWFudCB3YXkuXG4gICAgICAgICAgUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJyAmJiBoYXNTdGlja3lIZWFkZXJzXG4gICAgICAgICAgICA/IGZhbHNlXG4gICAgICAgICAgICA6IHRoaXMucHJvcHMucmVtb3ZlQ2xpcHBlZFN1YnZpZXdzXG4gICAgICAgIH1cbiAgICAgICAgY29sbGFwc2FibGU9e2ZhbHNlfT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9TY3JvbGxDb250ZW50Q29udGFpbmVyVmlld0NsYXNzPlxuICAgICk7XG5cbiAgICBjb25zdCBhbHdheXNCb3VuY2VIb3Jpem9udGFsID1cbiAgICAgIHRoaXMucHJvcHMuYWx3YXlzQm91bmNlSG9yaXpvbnRhbCAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gdGhpcy5wcm9wcy5hbHdheXNCb3VuY2VIb3Jpem9udGFsXG4gICAgICAgIDogdGhpcy5wcm9wcy5ob3Jpem9udGFsO1xuXG4gICAgY29uc3QgYWx3YXlzQm91bmNlVmVydGljYWwgPVxuICAgICAgdGhpcy5wcm9wcy5hbHdheXNCb3VuY2VWZXJ0aWNhbCAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gdGhpcy5wcm9wcy5hbHdheXNCb3VuY2VWZXJ0aWNhbFxuICAgICAgICA6ICF0aGlzLnByb3BzLmhvcml6b250YWw7XG5cbiAgICBjb25zdCBERVBSRUNBVEVEX3NlbmRVcGRhdGVkQ2hpbGRGcmFtZXMgPSAhIXRoaXMucHJvcHNcbiAgICAgIC5ERVBSRUNBVEVEX3NlbmRVcGRhdGVkQ2hpbGRGcmFtZXM7XG5cbiAgICBjb25zdCBiYXNlU3R5bGUgPVxuICAgICAgdGhpcy5wcm9wcy5ob3Jpem9udGFsID09PSB0cnVlXG4gICAgICAgID8gc3R5bGVzLmJhc2VIb3Jpem9udGFsXG4gICAgICAgIDogc3R5bGVzLmJhc2VWZXJ0aWNhbDtcbiAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgIC4uLnRoaXMucHJvcHMsXG4gICAgICBhbHdheXNCb3VuY2VIb3Jpem9udGFsLFxuICAgICAgYWx3YXlzQm91bmNlVmVydGljYWwsXG4gICAgICBzdHlsZTogW2Jhc2VTdHlsZSwgdGhpcy5wcm9wcy5zdHlsZV0sXG4gICAgICAvLyBPdmVycmlkZSB0aGUgb25Db250ZW50U2l6ZUNoYW5nZSBmcm9tIHByb3BzLCBzaW5jZSB0aGlzIGV2ZW50IGNhblxuICAgICAgLy8gYnViYmxlIHVwIGZyb20gVGV4dElucHV0c1xuICAgICAgb25Db250ZW50U2l6ZUNoYW5nZTogbnVsbCxcbiAgICAgIG9uTGF5b3V0OiB0aGlzLl9oYW5kbGVMYXlvdXQsXG4gICAgICBvbk1vbWVudHVtU2Nyb2xsQmVnaW46IHRoaXMuX3Njcm9sbFJlc3BvbmRlclxuICAgICAgICAuc2Nyb2xsUmVzcG9uZGVySGFuZGxlTW9tZW50dW1TY3JvbGxCZWdpbixcbiAgICAgIG9uTW9tZW50dW1TY3JvbGxFbmQ6IHRoaXMuX3Njcm9sbFJlc3BvbmRlclxuICAgICAgICAuc2Nyb2xsUmVzcG9uZGVySGFuZGxlTW9tZW50dW1TY3JvbGxFbmQsXG4gICAgICBvblJlc3BvbmRlckdyYW50OiB0aGlzLl9zY3JvbGxSZXNwb25kZXJcbiAgICAgICAgLnNjcm9sbFJlc3BvbmRlckhhbmRsZVJlc3BvbmRlckdyYW50LFxuICAgICAgb25SZXNwb25kZXJSZWplY3Q6IHRoaXMuX3Njcm9sbFJlc3BvbmRlclxuICAgICAgICAuc2Nyb2xsUmVzcG9uZGVySGFuZGxlUmVzcG9uZGVyUmVqZWN0LFxuICAgICAgb25SZXNwb25kZXJSZWxlYXNlOiB0aGlzLl9zY3JvbGxSZXNwb25kZXJcbiAgICAgICAgLnNjcm9sbFJlc3BvbmRlckhhbmRsZVJlc3BvbmRlclJlbGVhc2UsXG4gICAgICBvblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdDogdGhpcy5fc2Nyb2xsUmVzcG9uZGVyXG4gICAgICAgIC5zY3JvbGxSZXNwb25kZXJIYW5kbGVUZXJtaW5hdGlvblJlcXVlc3QsXG4gICAgICBvblNjcm9sbEJlZ2luRHJhZzogdGhpcy5fc2Nyb2xsUmVzcG9uZGVyXG4gICAgICAgIC5zY3JvbGxSZXNwb25kZXJIYW5kbGVTY3JvbGxCZWdpbkRyYWcsXG4gICAgICBvblNjcm9sbEVuZERyYWc6IHRoaXMuX3Njcm9sbFJlc3BvbmRlci5zY3JvbGxSZXNwb25kZXJIYW5kbGVTY3JvbGxFbmREcmFnLFxuICAgICAgb25TY3JvbGxTaG91bGRTZXRSZXNwb25kZXI6IHRoaXMuX3Njcm9sbFJlc3BvbmRlclxuICAgICAgICAuc2Nyb2xsUmVzcG9uZGVySGFuZGxlU2Nyb2xsU2hvdWxkU2V0UmVzcG9uZGVyLFxuICAgICAgb25TdGFydFNob3VsZFNldFJlc3BvbmRlcjogdGhpcy5fc2Nyb2xsUmVzcG9uZGVyXG4gICAgICAgIC5zY3JvbGxSZXNwb25kZXJIYW5kbGVTdGFydFNob3VsZFNldFJlc3BvbmRlcixcbiAgICAgIG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlOiB0aGlzLl9zY3JvbGxSZXNwb25kZXJcbiAgICAgICAgLnNjcm9sbFJlc3BvbmRlckhhbmRsZVN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZSxcbiAgICAgIG9uVG91Y2hFbmQ6IHRoaXMuX3Njcm9sbFJlc3BvbmRlci5zY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaEVuZCxcbiAgICAgIG9uVG91Y2hNb3ZlOiB0aGlzLl9zY3JvbGxSZXNwb25kZXIuc2Nyb2xsUmVzcG9uZGVySGFuZGxlVG91Y2hNb3ZlLFxuICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLl9zY3JvbGxSZXNwb25kZXIuc2Nyb2xsUmVzcG9uZGVySGFuZGxlVG91Y2hTdGFydCxcbiAgICAgIG9uVG91Y2hDYW5jZWw6IHRoaXMuX3Njcm9sbFJlc3BvbmRlci5zY3JvbGxSZXNwb25kZXJIYW5kbGVUb3VjaENhbmNlbCxcbiAgICAgIG9uU2Nyb2xsOiB0aGlzLl9oYW5kbGVTY3JvbGwsXG4gICAgICBzY3JvbGxCYXJUaHVtYkltYWdlOiByZXNvbHZlQXNzZXRTb3VyY2UodGhpcy5wcm9wcy5zY3JvbGxCYXJUaHVtYkltYWdlKSxcbiAgICAgIHNjcm9sbEV2ZW50VGhyb3R0bGU6IGhhc1N0aWNreUhlYWRlcnNcbiAgICAgICAgPyAxXG4gICAgICAgIDogdGhpcy5wcm9wcy5zY3JvbGxFdmVudFRocm90dGxlLFxuICAgICAgc2VuZE1vbWVudHVtRXZlbnRzOlxuICAgICAgICB0aGlzLnByb3BzLm9uTW9tZW50dW1TY3JvbGxCZWdpbiB8fCB0aGlzLnByb3BzLm9uTW9tZW50dW1TY3JvbGxFbmRcbiAgICAgICAgICA/IHRydWVcbiAgICAgICAgICA6IGZhbHNlLFxuICAgICAgREVQUkVDQVRFRF9zZW5kVXBkYXRlZENoaWxkRnJhbWVzLFxuICAgICAgLy8gZGVmYXVsdCB0byB0cnVlXG4gICAgICBzbmFwVG9TdGFydDogdGhpcy5wcm9wcy5zbmFwVG9TdGFydCAhPT0gZmFsc2UsXG4gICAgICAvLyBkZWZhdWx0IHRvIHRydWVcbiAgICAgIHNuYXBUb0VuZDogdGhpcy5wcm9wcy5zbmFwVG9FbmQgIT09IGZhbHNlLFxuICAgICAgLy8gcGFnaW5nRW5hYmxlZCBpcyBvdmVycmlkZGVuIGJ5IHNuYXBUb0ludGVydmFsIC8gc25hcFRvT2Zmc2V0c1xuICAgICAgcGFnaW5nRW5hYmxlZDogUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgICAgLy8gb24gaU9TLCBwYWdpbmdFbmFibGVkIG11c3QgYmUgc2V0IHRvIGZhbHNlIHRvIGhhdmUgc25hcFRvSW50ZXJ2YWwgLyBzbmFwVG9PZmZzZXRzIHdvcmtcbiAgICAgICAgaW9zOlxuICAgICAgICAgIHRoaXMucHJvcHMucGFnaW5nRW5hYmxlZCA9PT0gdHJ1ZSAmJlxuICAgICAgICAgIHRoaXMucHJvcHMuc25hcFRvSW50ZXJ2YWwgPT0gbnVsbCAmJlxuICAgICAgICAgIHRoaXMucHJvcHMuc25hcFRvT2Zmc2V0cyA9PSBudWxsLFxuICAgICAgICAvLyBvbiBBbmRyb2lkLCBwYWdpbmdFbmFibGVkIG11c3QgYmUgc2V0IHRvIHRydWUgdG8gaGF2ZSBzbmFwVG9JbnRlcnZhbCAvIHNuYXBUb09mZnNldHMgd29ya1xuICAgICAgICBhbmRyb2lkOlxuICAgICAgICAgIHRoaXMucHJvcHMucGFnaW5nRW5hYmxlZCA9PT0gdHJ1ZSB8fFxuICAgICAgICAgIHRoaXMucHJvcHMuc25hcFRvSW50ZXJ2YWwgIT0gbnVsbCB8fFxuICAgICAgICAgIHRoaXMucHJvcHMuc25hcFRvT2Zmc2V0cyAhPSBudWxsLFxuICAgICAgfSksXG4gICAgfTtcblxuICAgIGNvbnN0IHtkZWNlbGVyYXRpb25SYXRlfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKGRlY2VsZXJhdGlvblJhdGUgIT0gbnVsbCkge1xuICAgICAgcHJvcHMuZGVjZWxlcmF0aW9uUmF0ZSA9IHByb2Nlc3NEZWNlbGVyYXRpb25SYXRlKGRlY2VsZXJhdGlvblJhdGUpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlZnJlc2hDb250cm9sID0gdGhpcy5wcm9wcy5yZWZyZXNoQ29udHJvbDtcblxuICAgIGlmIChyZWZyZXNoQ29udHJvbCkge1xuICAgICAgaWYgKFBsYXRmb3JtLk9TID09PSAnaW9zJykge1xuICAgICAgICAvLyBPbiBpT1MgdGhlIFJlZnJlc2hDb250cm9sIGlzIGEgY2hpbGQgb2YgdGhlIFNjcm9sbFZpZXcuXG4gICAgICAgIC8vIHR2T1MgbGFja3MgbmF0aXZlIHN1cHBvcnQgZm9yIFJlZnJlc2hDb250cm9sLCBzbyBkb24ndCBpbmNsdWRlIGl0IGluIHRoYXQgY2FzZVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIC8qICRGbG93Rml4TWUoPj0wLjExNy4wIHNpdGU9cmVhY3RfbmF0aXZlX2ZiKSBUaGlzIGNvbW1lbnQgc3VwcHJlc3Nlc1xuICAgICAgICAgICAqIGFuIGVycm9yIGZvdW5kIHdoZW4gRmxvdyB2MC4xMTcgd2FzIGRlcGxveWVkLiBUbyBzZWUgdGhlIGVycm9yLFxuICAgICAgICAgICAqIGRlbGV0ZSB0aGlzIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuICAgICAgICAgIDxTY3JvbGxWaWV3Q2xhc3Mgey4uLnByb3BzfSByZWY9e3RoaXMuX3NldE5hdGl2ZVJlZn0+XG4gICAgICAgICAgICB7UGxhdGZvcm0uaXNUViA/IG51bGwgOiByZWZyZXNoQ29udHJvbH1cbiAgICAgICAgICAgIHtjb250ZW50Q29udGFpbmVyfVxuICAgICAgICAgIDwvU2Nyb2xsVmlld0NsYXNzPlxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnKSB7XG4gICAgICAgIC8vIE9uIEFuZHJvaWQgd3JhcCB0aGUgU2Nyb2xsVmlldyB3aXRoIGEgQW5kcm9pZFN3aXBlUmVmcmVzaExheW91dC5cbiAgICAgICAgLy8gU2luY2UgdGhlIFNjcm9sbFZpZXcgaXMgd3JhcHBlZCBhZGQgdGhlIHN0eWxlIHByb3BzIHRvIHRoZVxuICAgICAgICAvLyBBbmRyb2lkU3dpcGVSZWZyZXNoTGF5b3V0IGFuZCB1c2UgZmxleDogMSBmb3IgdGhlIFNjcm9sbFZpZXcuXG4gICAgICAgIC8vIE5vdGU6IHdlIHNob3VsZCBzcGxpdCBwcm9wcy5zdHlsZSBvbiB0aGUgaW5uZXIgYW5kIG91dGVyIHByb3BzXG4gICAgICAgIC8vIGhvd2V2ZXIsIHRoZSBTY3JvbGxWaWV3IHN0aWxsIG5lZWRzIHRoZSBiYXNlU3R5bGUgdG8gYmUgc2Nyb2xsYWJsZVxuICAgICAgICBjb25zdCB7b3V0ZXIsIGlubmVyfSA9IHNwbGl0TGF5b3V0UHJvcHMoZmxhdHRlblN0eWxlKHByb3BzLnN0eWxlKSk7XG4gICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoXG4gICAgICAgICAgcmVmcmVzaENvbnRyb2wsXG4gICAgICAgICAge3N0eWxlOiBbYmFzZVN0eWxlLCBvdXRlcl19LFxuICAgICAgICAgIDxTY3JvbGxWaWV3Q2xhc3NcbiAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgIHN0eWxlPXtbYmFzZVN0eWxlLCBpbm5lcl19XG4gICAgICAgICAgICByZWY9e3RoaXMuX3NldE5hdGl2ZVJlZn0+XG4gICAgICAgICAgICB7Y29udGVudENvbnRhaW5lcn1cbiAgICAgICAgICA8L1Njcm9sbFZpZXdDbGFzcz4sXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8U2Nyb2xsVmlld0NsYXNzIHsuLi5wcm9wc30gcmVmPXt0aGlzLl9zZXROYXRpdmVSZWZ9PlxuICAgICAgICB7Y29udGVudENvbnRhaW5lcn1cbiAgICAgIDwvU2Nyb2xsVmlld0NsYXNzPlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBiYXNlVmVydGljYWw6IHtcbiAgICBmbGV4R3JvdzogMSxcbiAgICBmbGV4U2hyaW5rOiAxLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIG92ZXJmbG93OiAnc2Nyb2xsJyxcbiAgfSxcbiAgYmFzZUhvcml6b250YWw6IHtcbiAgICBmbGV4R3JvdzogMSxcbiAgICBmbGV4U2hyaW5rOiAxLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIG92ZXJmbG93OiAnc2Nyb2xsJyxcbiAgfSxcbiAgY29udGVudENvbnRhaW5lckhvcml6b250YWw6IHtcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgfSxcbn0pO1xuXG5mdW5jdGlvbiBXcmFwcGVyKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIDxTY3JvbGxWaWV3IHsuLi5wcm9wc30gc2Nyb2xsVmlld1JlZj17cmVmfSAvPjtcbn1cbldyYXBwZXIuZGlzcGxheU5hbWUgPSAnU2Nyb2xsVmlldyc7XG5jb25zdCBGb3J3YXJkZWRTY3JvbGxWaWV3ID0gUmVhY3QuZm9yd2FyZFJlZihXcmFwcGVyKTtcblxuLy8gJEZsb3dGaXhNZSBBZGQgc3RhdGljIGNvbnRleHQgdG8gRm9yd2FyZGVkU2Nyb2xsVmlld1xuRm9yd2FyZGVkU2Nyb2xsVmlldy5Db250ZXh0ID0gQ29udGV4dDtcblxuRm9yd2FyZGVkU2Nyb2xsVmlldy5kaXNwbGF5TmFtZSA9ICdTY3JvbGxWaWV3JztcblxubW9kdWxlLmV4cG9ydHMgPSAoKEZvcndhcmRlZFNjcm9sbFZpZXc6ICRGbG93Rml4TWUpOiBSZWFjdC5BYnN0cmFjdENvbXBvbmVudDxcbiAgUmVhY3QuRWxlbWVudENvbmZpZzx0eXBlb2YgU2Nyb2xsVmlldz4sXG4gICRSZWFkT25seTx7fFxuICAgIC4uLiRFeGFjdDxSZWFjdC5FbGVtZW50UmVmPEhvc3RDb21wb25lbnQ8bWl4ZWQ+Pj4sXG4gICAgLi4uU2Nyb2xsVmlld0ltcGVyYXRpdmVNZXRob2RzLFxuICB8fT4sXG4+ICZcbiAgU2Nyb2xsVmlld0NvbXBvbmVudFN0YXRpY3MpO1xuIl19