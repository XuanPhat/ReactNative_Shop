7dbddbaac7e888be87b681b9fd1ab982
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _NativeImageLoaderIOS = _interopRequireDefault(require("./NativeImageLoaderIOS"));

var _ImageViewNativeComponent = _interopRequireDefault(require("./ImageViewNativeComponent"));

var DeprecatedImagePropType = require('../DeprecatedPropTypes/DeprecatedImagePropType');

var React = require('react');

var ReactNative = require('../Renderer/shims/ReactNative');

var StyleSheet = require('../StyleSheet/StyleSheet');

var flattenStyle = require('../StyleSheet/flattenStyle');

var resolveAssetSource = require('./resolveAssetSource');

function getSize(uri, success, failure) {
  _NativeImageLoaderIOS.default.getSize(uri).then(function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        width = _ref2[0],
        height = _ref2[1];

    return success(width, height);
  }).catch(failure || function () {
    console.warn('Failed to get size for image ' + uri);
  });
}

function getSizeWithHeaders(uri, headers, success, failure) {
  return _NativeImageLoaderIOS.default.getSizeWithHeaders(uri, headers).then(function (sizes) {
    success(sizes.width, sizes.height);
  }).catch(failure || function () {
    console.warn('Failed to get size for image: ' + uri);
  });
}

function prefetch(url) {
  return _NativeImageLoaderIOS.default.prefetchImage(url);
}

function queryCache(urls) {
  return _regenerator.default.async(function queryCache$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return _regenerator.default.awrap(_NativeImageLoaderIOS.default.queryCache(urls));

        case 2:
          return _context.abrupt("return", _context.sent);

        case 3:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, null, Promise);
}

var Image = function Image(props, forwardedRef) {
  var source = resolveAssetSource(props.source) || {
    uri: undefined,
    width: undefined,
    height: undefined
  };
  var sources;
  var style;

  if (Array.isArray(source)) {
    style = flattenStyle([styles.base, props.style]) || {};
    sources = source;
  } else {
    var _width = source.width,
        _height = source.height,
        uri = source.uri;
    style = flattenStyle([{
      width: _width,
      height: _height
    }, styles.base, props.style]) || {};
    sources = [source];

    if (uri === '') {
      console.warn('source.uri should not be an empty string');
    }
  }

  var resizeMode = props.resizeMode || style.resizeMode || 'cover';
  var tintColor = style.tintColor;

  if (props.src != null) {
    console.warn('The <Image> component requires a `source` property rather than `src`.');
  }

  if (props.children != null) {
    throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
  }

  return React.createElement(_ImageViewNativeComponent.default, (0, _extends2.default)({}, props, {
    ref: forwardedRef,
    style: style,
    resizeMode: resizeMode,
    tintColor: tintColor,
    source: sources
  }));
};

Image = React.forwardRef(Image);
Image.displayName = 'Image';
Image.getSize = getSize;
Image.getSizeWithHeaders = getSizeWithHeaders;
Image.prefetch = prefetch;
Image.queryCache = queryCache;
Image.resolveAssetSource = resolveAssetSource;
Image.propTypes = DeprecatedImagePropType;
var styles = StyleSheet.create({
  base: {
    overflow: 'hidden'
  }
});
module.exports = Image;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkltYWdlLmlvcy5qcyJdLCJuYW1lcyI6WyJEZXByZWNhdGVkSW1hZ2VQcm9wVHlwZSIsInJlcXVpcmUiLCJSZWFjdCIsIlJlYWN0TmF0aXZlIiwiU3R5bGVTaGVldCIsImZsYXR0ZW5TdHlsZSIsInJlc29sdmVBc3NldFNvdXJjZSIsImdldFNpemUiLCJ1cmkiLCJzdWNjZXNzIiwiZmFpbHVyZSIsIk5hdGl2ZUltYWdlTG9hZGVySU9TIiwidGhlbiIsIndpZHRoIiwiaGVpZ2h0IiwiY2F0Y2giLCJjb25zb2xlIiwid2FybiIsImdldFNpemVXaXRoSGVhZGVycyIsImhlYWRlcnMiLCJzaXplcyIsInByZWZldGNoIiwidXJsIiwicHJlZmV0Y2hJbWFnZSIsInF1ZXJ5Q2FjaGUiLCJ1cmxzIiwiSW1hZ2UiLCJwcm9wcyIsImZvcndhcmRlZFJlZiIsInNvdXJjZSIsInVuZGVmaW5lZCIsInNvdXJjZXMiLCJzdHlsZSIsIkFycmF5IiwiaXNBcnJheSIsInN0eWxlcyIsImJhc2UiLCJyZXNpemVNb2RlIiwidGludENvbG9yIiwic3JjIiwiY2hpbGRyZW4iLCJFcnJvciIsImZvcndhcmRSZWYiLCJkaXNwbGF5TmFtZSIsInByb3BUeXBlcyIsImNyZWF0ZSIsIm92ZXJmbG93IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7Ozs7Ozs7QUFhQTs7QUFFQTs7QUFiQSxJQUFNQSx1QkFBdUIsR0FBR0MsT0FBTyxDQUFDLGdEQUFELENBQXZDOztBQUNBLElBQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsSUFBTUUsV0FBVyxHQUFHRixPQUFPLENBQUMsK0JBQUQsQ0FBM0I7O0FBQ0EsSUFBTUcsVUFBVSxHQUFHSCxPQUFPLENBQUMsMEJBQUQsQ0FBMUI7O0FBRUEsSUFBTUksWUFBWSxHQUFHSixPQUFPLENBQUMsNEJBQUQsQ0FBNUI7O0FBQ0EsSUFBTUssa0JBQWtCLEdBQUdMLE9BQU8sQ0FBQyxzQkFBRCxDQUFsQzs7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Y2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGVwcmVjYXRlZEltYWdlUHJvcFR5cGUgPSByZXF1aXJlKCcuLi9EZXByZWNhdGVkUHJvcFR5cGVzL0RlcHJlY2F0ZWRJbWFnZVByb3BUeXBlJyk7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBSZWFjdE5hdGl2ZSA9IHJlcXVpcmUoJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbmNvbnN0IFN0eWxlU2hlZXQgPSByZXF1aXJlKCcuLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnKTtcblxuY29uc3QgZmxhdHRlblN0eWxlID0gcmVxdWlyZSgnLi4vU3R5bGVTaGVldC9mbGF0dGVuU3R5bGUnKTtcbmNvbnN0IHJlc29sdmVBc3NldFNvdXJjZSA9IHJlcXVpcmUoJy4vcmVzb2x2ZUFzc2V0U291cmNlJyk7XG5cbmltcG9ydCB0eXBlIHtJbWFnZVByb3BzIGFzIEltYWdlUHJvcHNUeXBlfSBmcm9tICcuL0ltYWdlUHJvcHMnO1xuXG5pbXBvcnQgdHlwZSB7SW1hZ2VTdHlsZVByb3B9IGZyb20gJy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgTmF0aXZlSW1hZ2VMb2FkZXJJT1MgZnJvbSAnLi9OYXRpdmVJbWFnZUxvYWRlcklPUyc7XG5cbmltcG9ydCBJbWFnZVZpZXdOYXRpdmVDb21wb25lbnQgZnJvbSAnLi9JbWFnZVZpZXdOYXRpdmVDb21wb25lbnQnO1xuXG5mdW5jdGlvbiBnZXRTaXplKFxuICB1cmk6IHN0cmluZyxcbiAgc3VjY2VzczogKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSA9PiB2b2lkLFxuICBmYWlsdXJlPzogKGVycm9yOiBhbnkpID0+IHZvaWQsXG4pIHtcbiAgTmF0aXZlSW1hZ2VMb2FkZXJJT1MuZ2V0U2l6ZSh1cmkpXG4gICAgLnRoZW4oKFt3aWR0aCwgaGVpZ2h0XSkgPT4gc3VjY2Vzcyh3aWR0aCwgaGVpZ2h0KSlcbiAgICAuY2F0Y2goXG4gICAgICBmYWlsdXJlIHx8XG4gICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIGdldCBzaXplIGZvciBpbWFnZSAnICsgdXJpKTtcbiAgICAgICAgfSxcbiAgICApO1xufVxuXG5mdW5jdGlvbiBnZXRTaXplV2l0aEhlYWRlcnMoXG4gIHVyaTogc3RyaW5nLFxuICBoZWFkZXJzOiB7W3N0cmluZ106IHN0cmluZywgLi4ufSxcbiAgc3VjY2VzczogKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSA9PiB2b2lkLFxuICBmYWlsdXJlPzogKGVycm9yOiBhbnkpID0+IHZvaWQsXG4pOiBhbnkge1xuICByZXR1cm4gTmF0aXZlSW1hZ2VMb2FkZXJJT1MuZ2V0U2l6ZVdpdGhIZWFkZXJzKHVyaSwgaGVhZGVycylcbiAgICAudGhlbihmdW5jdGlvbihzaXplcykge1xuICAgICAgc3VjY2VzcyhzaXplcy53aWR0aCwgc2l6ZXMuaGVpZ2h0KTtcbiAgICB9KVxuICAgIC5jYXRjaChcbiAgICAgIGZhaWx1cmUgfHxcbiAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gZ2V0IHNpemUgZm9yIGltYWdlOiAnICsgdXJpKTtcbiAgICAgICAgfSxcbiAgICApO1xufVxuXG5mdW5jdGlvbiBwcmVmZXRjaCh1cmw6IHN0cmluZyk6IGFueSB7XG4gIHJldHVybiBOYXRpdmVJbWFnZUxvYWRlcklPUy5wcmVmZXRjaEltYWdlKHVybCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHF1ZXJ5Q2FjaGUoXG4gIHVybHM6IEFycmF5PHN0cmluZz4sXG4pOiBQcm9taXNlPHtbc3RyaW5nXTogJ21lbW9yeScgfCAnZGlzaycgfCAnZGlzay9tZW1vcnknLCAuLi59PiB7XG4gIHJldHVybiBhd2FpdCBOYXRpdmVJbWFnZUxvYWRlcklPUy5xdWVyeUNhY2hlKHVybHMpO1xufVxuXG50eXBlIEltYWdlQ29tcG9uZW50U3RhdGljcyA9ICRSZWFkT25seTx7fFxuICBnZXRTaXplOiB0eXBlb2YgZ2V0U2l6ZSxcbiAgZ2V0U2l6ZVdpdGhIZWFkZXJzOiB0eXBlb2YgZ2V0U2l6ZVdpdGhIZWFkZXJzLFxuICBwcmVmZXRjaDogdHlwZW9mIHByZWZldGNoLFxuICBxdWVyeUNhY2hlOiB0eXBlb2YgcXVlcnlDYWNoZSxcbiAgcmVzb2x2ZUFzc2V0U291cmNlOiB0eXBlb2YgcmVzb2x2ZUFzc2V0U291cmNlLFxuICBwcm9wVHlwZXM6IHR5cGVvZiBEZXByZWNhdGVkSW1hZ2VQcm9wVHlwZSxcbnx9PjtcblxuLyoqXG4gKiBBIFJlYWN0IGNvbXBvbmVudCBmb3IgZGlzcGxheWluZyBkaWZmZXJlbnQgdHlwZXMgb2YgaW1hZ2VzLFxuICogaW5jbHVkaW5nIG5ldHdvcmsgaW1hZ2VzLCBzdGF0aWMgcmVzb3VyY2VzLCB0ZW1wb3JhcnkgbG9jYWwgaW1hZ2VzLCBhbmRcbiAqIGltYWdlcyBmcm9tIGxvY2FsIGRpc2ssIHN1Y2ggYXMgdGhlIGNhbWVyYSByb2xsLlxuICpcbiAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL2ltYWdlLmh0bWxcbiAqL1xubGV0IEltYWdlID0gKHByb3BzOiBJbWFnZVByb3BzVHlwZSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gIGNvbnN0IHNvdXJjZSA9IHJlc29sdmVBc3NldFNvdXJjZShwcm9wcy5zb3VyY2UpIHx8IHtcbiAgICB1cmk6IHVuZGVmaW5lZCxcbiAgICB3aWR0aDogdW5kZWZpbmVkLFxuICAgIGhlaWdodDogdW5kZWZpbmVkLFxuICB9O1xuXG4gIGxldCBzb3VyY2VzO1xuICBsZXQgc3R5bGU6IEltYWdlU3R5bGVQcm9wO1xuICBpZiAoQXJyYXkuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgLy8gJEZsb3dGaXhNZSBmbGF0dGVuU3R5bGUgaXMgbm90IHN0cm9uZyBlbm91Z2hcbiAgICBzdHlsZSA9IGZsYXR0ZW5TdHlsZShbc3R5bGVzLmJhc2UsIHByb3BzLnN0eWxlXSkgfHwge307XG4gICAgc291cmNlcyA9IHNvdXJjZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB7d2lkdGgsIGhlaWdodCwgdXJpfSA9IHNvdXJjZTtcbiAgICAvLyAkRmxvd0ZpeE1lIGZsYXR0ZW5TdHlsZSBpcyBub3Qgc3Ryb25nIGVub3VnaFxuICAgIHN0eWxlID0gZmxhdHRlblN0eWxlKFt7d2lkdGgsIGhlaWdodH0sIHN0eWxlcy5iYXNlLCBwcm9wcy5zdHlsZV0pIHx8IHt9O1xuICAgIHNvdXJjZXMgPSBbc291cmNlXTtcblxuICAgIGlmICh1cmkgPT09ICcnKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ3NvdXJjZS51cmkgc2hvdWxkIG5vdCBiZSBhbiBlbXB0eSBzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCByZXNpemVNb2RlID0gcHJvcHMucmVzaXplTW9kZSB8fCBzdHlsZS5yZXNpemVNb2RlIHx8ICdjb3Zlcic7XG4gIGNvbnN0IHRpbnRDb2xvciA9IHN0eWxlLnRpbnRDb2xvcjtcblxuICBpZiAocHJvcHMuc3JjICE9IG51bGwpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnVGhlIDxJbWFnZT4gY29tcG9uZW50IHJlcXVpcmVzIGEgYHNvdXJjZWAgcHJvcGVydHkgcmF0aGVyIHRoYW4gYHNyY2AuJyxcbiAgICApO1xuICB9XG5cbiAgaWYgKHByb3BzLmNoaWxkcmVuICE9IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnVGhlIDxJbWFnZT4gY29tcG9uZW50IGNhbm5vdCBjb250YWluIGNoaWxkcmVuLiBJZiB5b3Ugd2FudCB0byByZW5kZXIgY29udGVudCBvbiB0b3Agb2YgdGhlIGltYWdlLCBjb25zaWRlciB1c2luZyB0aGUgPEltYWdlQmFja2dyb3VuZD4gY29tcG9uZW50IG9yIGFic29sdXRlIHBvc2l0aW9uaW5nLicsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPEltYWdlVmlld05hdGl2ZUNvbXBvbmVudFxuICAgICAgey4uLnByb3BzfVxuICAgICAgcmVmPXtmb3J3YXJkZWRSZWZ9XG4gICAgICBzdHlsZT17c3R5bGV9XG4gICAgICByZXNpemVNb2RlPXtyZXNpemVNb2RlfVxuICAgICAgdGludENvbG9yPXt0aW50Q29sb3J9XG4gICAgICBzb3VyY2U9e3NvdXJjZXN9XG4gICAgLz5cbiAgKTtcbn07XG5cbkltYWdlID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgSW1hZ2VQcm9wc1R5cGUsXG4gIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIEltYWdlVmlld05hdGl2ZUNvbXBvbmVudD4sXG4+KEltYWdlKTtcbkltYWdlLmRpc3BsYXlOYW1lID0gJ0ltYWdlJztcblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgd2lkdGggYW5kIGhlaWdodCAoaW4gcGl4ZWxzKSBvZiBhbiBpbWFnZSBwcmlvciB0byBkaXNwbGF5aW5nIGl0LlxuICpcbiAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL2ltYWdlLmh0bWwjZ2V0c2l6ZVxuICovXG4vKiAkRmxvd0ZpeE1lKD49MC44OS4wIHNpdGU9cmVhY3RfbmF0aXZlX2lvc19mYikgVGhpcyBjb21tZW50IHN1cHByZXNzZXMgYW5cbiAqIGVycm9yIGZvdW5kIHdoZW4gRmxvdyB2MC44OSB3YXMgZGVwbG95ZWQuIFRvIHNlZSB0aGUgZXJyb3IsIGRlbGV0ZSB0aGlzXG4gKiBjb21tZW50IGFuZCBydW4gRmxvdy4gKi9cbkltYWdlLmdldFNpemUgPSBnZXRTaXplO1xuXG4vKipcbiAqIFJldHJpZXZlIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IChpbiBwaXhlbHMpIG9mIGFuIGltYWdlIHByaW9yIHRvIGRpc3BsYXlpbmcgaXRcbiAqIHdpdGggdGhlIGFiaWxpdHkgdG8gcHJvdmlkZSB0aGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3QuXG4gKlxuICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvaW1hZ2UuaHRtbCNnZXRzaXpld2l0aGhlYWRlcnNcbiAqL1xuLyogJEZsb3dGaXhNZSg+PTAuODkuMCBzaXRlPXJlYWN0X25hdGl2ZV9pb3NfZmIpIFRoaXMgY29tbWVudCBzdXBwcmVzc2VzIGFuXG4gKiBlcnJvciBmb3VuZCB3aGVuIEZsb3cgdjAuODkgd2FzIGRlcGxveWVkLiBUbyBzZWUgdGhlIGVycm9yLCBkZWxldGUgdGhpc1xuICogY29tbWVudCBhbmQgcnVuIEZsb3cuICovXG5JbWFnZS5nZXRTaXplV2l0aEhlYWRlcnMgPSBnZXRTaXplV2l0aEhlYWRlcnM7XG5cbi8qKlxuICogUHJlZmV0Y2hlcyBhIHJlbW90ZSBpbWFnZSBmb3IgbGF0ZXIgdXNlIGJ5IGRvd25sb2FkaW5nIGl0IHRvIHRoZSBkaXNrXG4gKiBjYWNoZS5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9pbWFnZS5odG1sI3ByZWZldGNoXG4gKi9cbi8qICRGbG93Rml4TWUoPj0wLjg5LjAgc2l0ZT1yZWFjdF9uYXRpdmVfaW9zX2ZiKSBUaGlzIGNvbW1lbnQgc3VwcHJlc3NlcyBhblxuICogZXJyb3IgZm91bmQgd2hlbiBGbG93IHYwLjg5IHdhcyBkZXBsb3llZC4gVG8gc2VlIHRoZSBlcnJvciwgZGVsZXRlIHRoaXNcbiAqIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuSW1hZ2UucHJlZmV0Y2ggPSBwcmVmZXRjaDtcblxuLyoqXG4gKiBQZXJmb3JtcyBjYWNoZSBpbnRlcnJvZ2F0aW9uLlxuICpcbiAqICBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9pbWFnZS5odG1sI3F1ZXJ5Y2FjaGVcbiAqL1xuLyogJEZsb3dGaXhNZSg+PTAuODkuMCBzaXRlPXJlYWN0X25hdGl2ZV9pb3NfZmIpIFRoaXMgY29tbWVudCBzdXBwcmVzc2VzIGFuXG4gKiBlcnJvciBmb3VuZCB3aGVuIEZsb3cgdjAuODkgd2FzIGRlcGxveWVkLiBUbyBzZWUgdGhlIGVycm9yLCBkZWxldGUgdGhpc1xuICogY29tbWVudCBhbmQgcnVuIEZsb3cuICovXG5JbWFnZS5xdWVyeUNhY2hlID0gcXVlcnlDYWNoZTtcblxuLyoqXG4gKiBSZXNvbHZlcyBhbiBhc3NldCByZWZlcmVuY2UgaW50byBhbiBvYmplY3QuXG4gKlxuICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvaW1hZ2UuaHRtbCNyZXNvbHZlYXNzZXRzb3VyY2VcbiAqL1xuLyogJEZsb3dGaXhNZSg+PTAuODkuMCBzaXRlPXJlYWN0X25hdGl2ZV9pb3NfZmIpIFRoaXMgY29tbWVudCBzdXBwcmVzc2VzIGFuXG4gKiBlcnJvciBmb3VuZCB3aGVuIEZsb3cgdjAuODkgd2FzIGRlcGxveWVkLiBUbyBzZWUgdGhlIGVycm9yLCBkZWxldGUgdGhpc1xuICogY29tbWVudCBhbmQgcnVuIEZsb3cuICovXG5JbWFnZS5yZXNvbHZlQXNzZXRTb3VyY2UgPSByZXNvbHZlQXNzZXRTb3VyY2U7XG5cbi8qICRGbG93Rml4TWUoPj0wLjg5LjAgc2l0ZT1yZWFjdF9uYXRpdmVfaW9zX2ZiKSBUaGlzIGNvbW1lbnQgc3VwcHJlc3NlcyBhblxuICogZXJyb3IgZm91bmQgd2hlbiBGbG93IHYwLjg5IHdhcyBkZXBsb3llZC4gVG8gc2VlIHRoZSBlcnJvciwgZGVsZXRlIHRoaXNcbiAqIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuSW1hZ2UucHJvcFR5cGVzID0gRGVwcmVjYXRlZEltYWdlUHJvcFR5cGU7XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgYmFzZToge1xuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgfSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgoSW1hZ2U6IGFueSk6IFJlYWN0LkFic3RyYWN0Q29tcG9uZW50PFxuICBJbWFnZVByb3BzVHlwZSxcbiAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgSW1hZ2VWaWV3TmF0aXZlQ29tcG9uZW50Pixcbj4gJlxuICBJbWFnZUNvbXBvbmVudFN0YXRpY3MpO1xuIl19