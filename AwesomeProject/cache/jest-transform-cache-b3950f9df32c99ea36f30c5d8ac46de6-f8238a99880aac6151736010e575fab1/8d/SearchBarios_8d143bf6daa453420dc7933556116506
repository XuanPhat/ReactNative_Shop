ad00ad7986ea8e64388a508eabf711e1
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Input = _interopRequireDefault(require("../input/Input"));

var _Icon = _interopRequireDefault(require("../icons/Icon"));

var _helpers = require("../helpers");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var defaultSearchIcon = function defaultSearchIcon(theme) {
  return {
    type: 'ionicon',
    size: 20,
    name: 'ios-search',
    color: theme.colors.platform.ios.grey
  };
};

var defaultClearIcon = function defaultClearIcon(theme) {
  return {
    type: 'ionicon',
    name: 'ios-close-circle',
    size: 20,
    color: theme.colors.platform.ios.grey
  };
};

var SearchBar = function (_Component) {
  (0, _inherits2.default)(SearchBar, _Component);

  var _super = _createSuper(SearchBar);

  function SearchBar(props) {
    var _this;

    (0, _classCallCheck2.default)(this, SearchBar);
    _this = _super.call(this, props);

    _this.focus = function () {
      _this.input.focus();
    };

    _this.blur = function () {
      _this.input.blur();
    };

    _this.clear = function () {
      _this.input.clear();

      _this.onChangeText('');

      _this.props.onClear();
    };

    _this.cancel = function () {
      _this.onChangeText('');

      if (_this.props.showCancel) {
        _reactNative.UIManager.configureNextLayoutAnimation && _reactNative.LayoutAnimation.easeInEaseOut();

        _this.setState({
          hasFocus: false
        });
      }

      setTimeout(function () {
        _this.blur();

        _this.props.onCancel();
      }, 0);
    };

    _this.onFocus = function (event) {
      _this.props.onFocus(event);

      _reactNative.UIManager.configureNextLayoutAnimation && _reactNative.LayoutAnimation.easeInEaseOut();

      _this.setState({
        hasFocus: true,
        isEmpty: _this.props.value === ''
      });
    };

    _this.onBlur = function (event) {
      _this.props.onBlur(event);

      if (!_this.props.showCancel) {
        _reactNative.UIManager.configureNextLayoutAnimation && _reactNative.LayoutAnimation.easeInEaseOut();

        _this.setState({
          hasFocus: false
        });
      }
    };

    _this.onChangeText = function (text) {
      _this.props.onChangeText(text);

      _this.setState({
        isEmpty: text === ''
      });
    };

    var value = props.value;
    _this.state = {
      hasFocus: false,
      isEmpty: value ? value === '' : true,
      cancelButtonWidth: null
    };
    return _this;
  }

  (0, _createClass2.default)(SearchBar, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _a = this.props,
          theme = _a.theme,
          cancelButtonProps = _a.cancelButtonProps,
          cancelButtonTitle = _a.cancelButtonTitle,
          clearIcon = _a.clearIcon,
          containerStyle = _a.containerStyle,
          leftIconContainerStyle = _a.leftIconContainerStyle,
          rightIconContainerStyle = _a.rightIconContainerStyle,
          inputContainerStyle = _a.inputContainerStyle,
          inputStyle = _a.inputStyle,
          placeholderTextColor = _a.placeholderTextColor,
          showLoading = _a.showLoading,
          loadingProps = _a.loadingProps,
          searchIcon = _a.searchIcon,
          showCancel = _a.showCancel,
          attributes = __rest(_a, ["theme", "cancelButtonProps", "cancelButtonTitle", "clearIcon", "containerStyle", "leftIconContainerStyle", "rightIconContainerStyle", "inputContainerStyle", "inputStyle", "placeholderTextColor", "showLoading", "loadingProps", "searchIcon", "showCancel"]);

      var _this$state = this.state,
          hasFocus = _this$state.hasFocus,
          isEmpty = _this$state.isEmpty;

      var loadingStyle = loadingProps.style,
          otherLoadingProps = __rest(loadingProps, ["style"]);

      var buttonStyle = cancelButtonProps.buttonStyle,
          buttonTextStyle = cancelButtonProps.buttonTextStyle,
          buttonColor = cancelButtonProps.color,
          buttonDisabled = cancelButtonProps.disabled,
          buttonDisabledStyle = cancelButtonProps.buttonDisabledStyle,
          buttonDisabledTextStyle = cancelButtonProps.buttonDisabledTextStyle,
          otherCancelButtonProps = __rest(cancelButtonProps, ["buttonStyle", "buttonTextStyle", "color", "disabled", "buttonDisabledStyle", "buttonDisabledTextStyle"]);

      return _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.container, {
          backgroundColor: theme.colors.white
        }, containerStyle])
      }, _react.default.createElement(_Input.default, (0, _extends2.default)({
        testID: "searchInput",
        renderErrorMessage: false
      }, attributes, {
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        onChangeText: this.onChangeText,
        ref: function ref(input) {
          _this2.input = input;
        },
        inputStyle: _reactNative.StyleSheet.flatten([styles.input, inputStyle]),
        containerStyle: {
          paddingHorizontal: 0
        },
        inputContainerStyle: _reactNative.StyleSheet.flatten([styles.inputContainer, {
          backgroundColor: theme.colors.platform.ios.searchBg
        }, hasFocus && {
          marginRight: this.state.cancelButtonWidth
        }, inputContainerStyle]),
        leftIcon: (0, _helpers.renderNode)(_Icon.default, searchIcon, defaultSearchIcon(theme)),
        leftIconContainerStyle: _reactNative.StyleSheet.flatten([styles.leftIconContainerStyle, leftIconContainerStyle]),
        placeholderTextColor: placeholderTextColor || theme.colors.platform.ios.grey,
        rightIcon: _react.default.createElement(_reactNative.View, {
          style: {
            flexDirection: 'row'
          }
        }, showLoading && _react.default.createElement(_reactNative.ActivityIndicator, (0, _extends2.default)({
          key: "loading",
          style: _reactNative.StyleSheet.flatten([{
            marginRight: 5
          }, loadingStyle])
        }, otherLoadingProps)), !isEmpty && (0, _helpers.renderNode)(_Icon.default, clearIcon, Object.assign(Object.assign({}, defaultClearIcon(theme)), {
          key: 'cancel',
          onPress: this.clear
        }))),
        rightIconContainerStyle: _reactNative.StyleSheet.flatten([styles.rightIconContainerStyle, rightIconContainerStyle])
      })), _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.cancelButtonContainer, {
          opacity: this.state.cancelButtonWidth === null ? 0 : 1,
          right: hasFocus ? 0 : -this.state.cancelButtonWidth
        }]),
        onLayout: function onLayout(event) {
          return _this2.setState({
            cancelButtonWidth: event.nativeEvent.layout.width
          });
        }
      }, _react.default.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({
        accessibilityRole: "button",
        onPress: this.cancel,
        disabled: buttonDisabled
      }, otherCancelButtonProps), _react.default.createElement(_reactNative.View, {
        style: [buttonStyle, buttonDisabled && buttonDisabledStyle]
      }, _react.default.createElement(_reactNative.Text, {
        style: [styles.buttonTextStyle, buttonColor && {
          color: buttonColor
        }, buttonTextStyle, buttonDisabled && (buttonDisabledTextStyle || styles.buttonTextDisabled)]
      }, cancelButtonTitle)))));
    }
  }]);
  return SearchBar;
}(_react.Component);

SearchBar.defaultProps = {
  value: '',
  cancelButtonTitle: 'Cancel',
  loadingProps: {},
  cancelButtonProps: {},
  showLoading: false,
  onClear: function onClear() {
    return null;
  },
  onCancel: function onCancel() {
    return null;
  },
  onFocus: function onFocus() {
    return null;
  },
  onBlur: function onBlur() {
    return null;
  },
  onChangeText: function onChangeText() {
    return null;
  },
  searchIcon: {
    name: 'ios-search'
  },
  clearIcon: {
    name: 'ios-close-circle'
  },
  showCancel: false
};

var styles = _reactNative.StyleSheet.create({
  container: {
    paddingBottom: 13,
    paddingTop: 13,
    flexDirection: 'row',
    overflow: 'hidden',
    alignItems: 'center'
  },
  input: {
    marginLeft: 6,
    overflow: 'hidden'
  },
  inputContainer: {
    borderBottomWidth: 0,
    borderRadius: 9,
    minHeight: 36,
    marginLeft: 8,
    marginRight: 8
  },
  rightIconContainerStyle: {
    marginRight: 8
  },
  leftIconContainerStyle: {
    marginLeft: 8
  },
  buttonTextStyle: {
    color: '#007aff',
    textAlign: 'center',
    padding: 8,
    fontSize: 18
  },
  buttonTextDisabled: {
    color: '#cdcdcd'
  },
  cancelButtonContainer: {
    position: 'absolute'
  }
});

var _default = SearchBar;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,