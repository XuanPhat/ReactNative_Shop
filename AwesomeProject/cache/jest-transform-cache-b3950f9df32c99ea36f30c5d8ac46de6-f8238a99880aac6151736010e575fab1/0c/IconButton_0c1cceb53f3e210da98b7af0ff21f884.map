{"version":3,"sources":["IconButton.tsx"],"names":["IconButton","color","size","animated","style","rest","iconColor","theme","rippleColor","IconComponent","CrossFadeIcon","Icon","buttonSize","styles","width","height","borderRadius","disabled","TouchableRipple","top","left","bottom","right","container","alignItems","justifyContent","overflow","margin","opacity"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport color from 'color';\n\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport Icon, { IconSource } from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n\nimport type { $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color?: string;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const iconColor =\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return (\n    <TouchableRipple\n      borderless\n      centered\n      onPress={onPress}\n      rippleColor={rippleColor}\n      style={[\n        styles.container,\n        { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n        disabled && styles.disabled,\n        style,\n      ]}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n      hitSlop={\n        // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types\n        TouchableRipple.supported\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\n          : { top: 6, left: 6, bottom: 6, right: 6 }\n      }\n      {...rest}\n    >\n      <View>\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6,\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n"]}