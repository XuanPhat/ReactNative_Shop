81889f71c77f8e2f4cb3ab6d89b0e921
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RadioButtonAndroid = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _RadioButtonGroup = require("./RadioButtonGroup");

var _utils = require("./utils");

var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));

var _theming = require("../../core/theming");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var BORDER_WIDTH = 2;

var RadioButtonAndroid = function RadioButtonAndroid(_ref) {
  var disabled = _ref.disabled,
      onPress = _ref.onPress,
      theme = _ref.theme,
      value = _ref.value,
      status = _ref.status,
      testID = _ref.testID,
      rest = _objectWithoutProperties(_ref, ["disabled", "onPress", "theme", "value", "status", "testID"]);

  var _React$useRef = React.useRef(new _reactNative.Animated.Value(BORDER_WIDTH)),
      borderAnim = _React$useRef.current;

  var _React$useRef2 = React.useRef(new _reactNative.Animated.Value(1)),
      radioAnim = _React$useRef2.current;

  var isFirstRendering = React.useRef(true);
  var scale = theme.animation.scale;
  React.useEffect(function () {
    if (isFirstRendering.current) {
      isFirstRendering.current = false;
      return;
    }

    if (status === 'checked') {
      radioAnim.setValue(1.2);

      _reactNative.Animated.timing(radioAnim, {
        toValue: 1,
        duration: 150 * scale,
        useNativeDriver: true
      }).start();
    } else {
      borderAnim.setValue(10);

      _reactNative.Animated.timing(borderAnim, {
        toValue: BORDER_WIDTH,
        duration: 150 * scale,
        useNativeDriver: false
      }).start();
    }
  }, [status, borderAnim, radioAnim, scale]);
  var checkedColor = rest.color || theme.colors.accent;
  var uncheckedColor = rest.uncheckedColor || (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();
  var rippleColor, radioColor;
  return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer, null, function (context) {
    var checked = (0, _utils.isChecked)({
      contextValue: context === null || context === void 0 ? void 0 : context.value,
      status: status,
      value: value
    }) === 'checked';

    if (disabled) {
      rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();
      radioColor = theme.colors.disabled;
    } else {
      rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();
      radioColor = checked ? checkedColor : uncheckedColor;
    }

    return React.createElement(_TouchableRipple.default, _extends({}, rest, {
      borderless: true,
      rippleColor: rippleColor,
      onPress: disabled ? undefined : function () {
        (0, _utils.handlePress)({
          onPress: onPress,
          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,
          value: value
        });
      },
      accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
      accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',
      accessibilityRole: "radio",
      accessibilityState: {
        disabled: disabled,
        checked: checked
      },
      accessibilityLiveRegion: "polite",
      style: styles.container,
      testID: testID
    }), React.createElement(_reactNative.Animated.View, {
      style: [styles.radio, {
        borderColor: radioColor,
        borderWidth: borderAnim
      }]
    }, checked ? React.createElement(_reactNative.View, {
      style: [_reactNative.StyleSheet.absoluteFill, styles.radioContainer]
    }, React.createElement(_reactNative.Animated.View, {
      style: [styles.dot, {
        backgroundColor: radioColor,
        transform: [{
          scale: radioAnim
        }]
      }]
    })) : null));
  });
};

RadioButtonAndroid.displayName = 'RadioButton.Android';

var styles = _reactNative.StyleSheet.create({
  container: {
    borderRadius: 18
  },
  radioContainer: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  radio: {
    height: 20,
    width: 20,
    borderRadius: 10,
    margin: 8
  },
  dot: {
    height: 10,
    width: 10,
    borderRadius: 5
  }
});

var _default = (0, _theming.withTheme)(RadioButtonAndroid);

exports.default = _default;
var RadioButtonAndroidWithTheme = (0, _theming.withTheme)(RadioButtonAndroid);
exports.RadioButtonAndroid = RadioButtonAndroidWithTheme;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,