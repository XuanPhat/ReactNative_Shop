265f5bb4b3de9fc4f944fc5a0d7b6439
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));

var React = require('react');

var React__default = _interopDefault(React);

var reactNative = require('react-native');

var FastImageViewNativeModule = reactNative.NativeModules.FastImageView;
var resizeMode = {
  contain: 'contain',
  cover: 'cover',
  stretch: 'stretch',
  center: 'center'
};
var priority = {
  low: 'low',
  normal: 'normal',
  high: 'high'
};
var cacheControl = {
  immutable: 'immutable',
  web: 'web',
  cacheOnly: 'cacheOnly'
};

function FastImageBase(_ref) {
  var source = _ref.source,
      tintColor = _ref.tintColor,
      onLoadStart = _ref.onLoadStart,
      onProgress = _ref.onProgress,
      onLoad = _ref.onLoad,
      onError = _ref.onError,
      onLoadEnd = _ref.onLoadEnd,
      style = _ref.style,
      fallback = _ref.fallback,
      children = _ref.children,
      _ref$resizeMode = _ref.resizeMode,
      resizeMode = _ref$resizeMode === void 0 ? 'cover' : _ref$resizeMode,
      forwardedRef = _ref.forwardedRef,
      props = (0, _objectWithoutProperties2.default)(_ref, ["source", "tintColor", "onLoadStart", "onProgress", "onLoad", "onError", "onLoadEnd", "style", "fallback", "children", "resizeMode", "forwardedRef"]);

  if (fallback) {
    var cleanedSource = _objectSpread({}, source);

    delete cleanedSource.cache;

    var _resolvedSource = reactNative.Image.resolveAssetSource(cleanedSource);

    return React__default.createElement(reactNative.View, {
      style: [styles.imageContainer, style],
      ref: forwardedRef
    }, React__default.createElement(reactNative.Image, _extends({}, props, {
      style: reactNative.StyleSheet.absoluteFill,
      source: _resolvedSource,
      onLoadStart: onLoadStart,
      onProgress: onProgress,
      onLoad: onLoad,
      onError: onError,
      onLoadEnd: onLoadEnd,
      resizeMode: resizeMode
    })), children);
  }

  var resolvedSource = reactNative.Image.resolveAssetSource(source);
  return React__default.createElement(reactNative.View, {
    style: [styles.imageContainer, style],
    ref: forwardedRef
  }, React__default.createElement(FastImageView, _extends({}, props, {
    tintColor: tintColor,
    style: reactNative.StyleSheet.absoluteFill,
    source: resolvedSource,
    onFastImageLoadStart: onLoadStart,
    onFastImageProgress: onProgress,
    onFastImageLoad: onLoad,
    onFastImageError: onError,
    onFastImageLoadEnd: onLoadEnd,
    resizeMode: resizeMode
  })), children);
}

var FastImageMemo = React.memo(FastImageBase);
var FastImageComponent = React.forwardRef(function (props, ref) {
  return React__default.createElement(FastImageMemo, _extends({
    forwardedRef: ref
  }, props));
});
FastImageComponent.displayName = 'FastImage';
var FastImage = FastImageComponent;
FastImage.resizeMode = resizeMode;
FastImage.cacheControl = cacheControl;
FastImage.priority = priority;

FastImage.preload = function (sources) {
  return FastImageViewNativeModule.preload(sources);
};

var styles = reactNative.StyleSheet.create({
  imageContainer: {
    overflow: 'hidden'
  }
});
var FastImageView = reactNative.requireNativeComponent('FastImageView', FastImage, {
  nativeOnly: {
    onFastImageLoadStart: true,
    onFastImageProgress: true,
    onFastImageLoad: true,
    onFastImageError: true,
    onFastImageLoadEnd: true
  }
});
module.exports = FastImage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,