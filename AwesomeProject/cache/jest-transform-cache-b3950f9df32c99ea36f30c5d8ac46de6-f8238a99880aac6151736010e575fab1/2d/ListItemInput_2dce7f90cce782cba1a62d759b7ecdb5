510afe1b93998b75865c36362a5cb5cb
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _config = require("../config");

var _Input = _interopRequireDefault(require("../input/Input"));

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var ListItemInput = function ListItemInput(_a) {
  var inputStyle = _a.inputStyle,
      inputContainerStyle = _a.inputContainerStyle,
      containerStyle = _a.containerStyle,
      props = __rest(_a, ["inputStyle", "inputContainerStyle", "containerStyle"]);

  return _react.default.createElement(_Input.default, (0, _extends2.default)({
    renderErrorMessage: false
  }, props, {
    inputStyle: _reactNative.StyleSheet.flatten([styles.input, inputStyle]),
    inputContainerStyle: _reactNative.StyleSheet.flatten([styles.inputContainer, inputContainerStyle]),
    containerStyle: _reactNative.StyleSheet.flatten([styles.container, containerStyle])
  }));
};

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    paddingRight: 0
  },
  inputContainer: {
    flex: 1,
    borderBottomWidth: 0,
    width: null,
    height: null
  },
  input: {
    flex: 1,
    textAlign: 'right',
    width: null,
    height: null
  }
});

var _default = (0, _config.withTheme)(ListItemInput, 'ListItemInput');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxpc3RJdGVtSW5wdXQuanMiXSwibmFtZXMiOlsiX19yZXN0IiwicyIsImUiLCJ0IiwicCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJpIiwibGVuZ3RoIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJMaXN0SXRlbUlucHV0IiwiX2EiLCJpbnB1dFN0eWxlIiwiaW5wdXRDb250YWluZXJTdHlsZSIsImNvbnRhaW5lclN0eWxlIiwicHJvcHMiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsInN0eWxlcyIsImlucHV0IiwiaW5wdXRDb250YWluZXIiLCJjb250YWluZXIiLCJjcmVhdGUiLCJmbGV4IiwicGFkZGluZ1JpZ2h0IiwiYm9yZGVyQm90dG9tV2lkdGgiLCJ3aWR0aCIsImhlaWdodCIsInRleHRBbGlnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBV0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBZEEsSUFBSUEsTUFBTSxHQUFJLFFBQVEsS0FBS0EsTUFBZCxJQUF5QixVQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDbEQsTUFBSUMsQ0FBQyxHQUFHLEVBQVI7O0FBQ0EsT0FBSyxJQUFJQyxDQUFULElBQWNILENBQWQ7QUFBaUIsUUFBSUksTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNQLENBQXJDLEVBQXdDRyxDQUF4QyxLQUE4Q0YsQ0FBQyxDQUFDTyxPQUFGLENBQVVMLENBQVYsSUFBZSxDQUFqRSxFQUNiRCxDQUFDLENBQUNDLENBQUQsQ0FBRCxHQUFPSCxDQUFDLENBQUNHLENBQUQsQ0FBUjtBQURKOztBQUVBLE1BQUlILENBQUMsSUFBSSxJQUFMLElBQWEsT0FBT0ksTUFBTSxDQUFDSyxxQkFBZCxLQUF3QyxVQUF6RCxFQUNJLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQVIsRUFBV1AsQ0FBQyxHQUFHQyxNQUFNLENBQUNLLHFCQUFQLENBQTZCVCxDQUE3QixDQUFwQixFQUFxRFUsQ0FBQyxHQUFHUCxDQUFDLENBQUNRLE1BQTNELEVBQW1FRCxDQUFDLEVBQXBFLEVBQXdFO0FBQ3BFLFFBQUlULENBQUMsQ0FBQ08sT0FBRixDQUFVTCxDQUFDLENBQUNPLENBQUQsQ0FBWCxJQUFrQixDQUFsQixJQUF1Qk4sTUFBTSxDQUFDQyxTQUFQLENBQWlCTyxvQkFBakIsQ0FBc0NMLElBQXRDLENBQTJDUCxDQUEzQyxFQUE4Q0csQ0FBQyxDQUFDTyxDQUFELENBQS9DLENBQTNCLEVBQ0lSLENBQUMsQ0FBQ0MsQ0FBQyxDQUFDTyxDQUFELENBQUYsQ0FBRCxHQUFVVixDQUFDLENBQUNHLENBQUMsQ0FBQ08sQ0FBRCxDQUFGLENBQVg7QUFDUDtBQUNMLFNBQU9SLENBQVA7QUFDSCxDQVZEOztBQWVBLElBQU1XLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBQ0MsRUFBRCxFQUFRO0FBQUEsTUFDcEJDLFVBRG9CLEdBQ2dDRCxFQURoQyxDQUNwQkMsVUFEb0I7QUFBQSxNQUNSQyxtQkFEUSxHQUNnQ0YsRUFEaEMsQ0FDUkUsbUJBRFE7QUFBQSxNQUNhQyxjQURiLEdBQ2dDSCxFQURoQyxDQUNhRyxjQURiO0FBQUEsTUFDb0NDLEtBRHBDLEdBQzRDbkIsTUFBTSxDQUFDZSxFQUFELEVBQUssQ0FBQyxZQUFELEVBQWUscUJBQWYsRUFBc0MsZ0JBQXRDLENBQUwsQ0FEbEQ7O0FBRTFCLFNBQVEsNkJBQUMsY0FBRDtBQUFPLElBQUEsa0JBQWtCLEVBQUU7QUFBM0IsS0FBc0NJLEtBQXRDO0FBQTZDLElBQUEsVUFBVSxFQUFFQyx3QkFBV0MsT0FBWCxDQUFtQixDQUFDQyxNQUFNLENBQUNDLEtBQVIsRUFBZVAsVUFBZixDQUFuQixDQUF6RDtBQUF5RyxJQUFBLG1CQUFtQixFQUFFSSx3QkFBV0MsT0FBWCxDQUFtQixDQUNySkMsTUFBTSxDQUFDRSxjQUQ4SSxFQUVySlAsbUJBRnFKLENBQW5CLENBQTlIO0FBR0osSUFBQSxjQUFjLEVBQUVHLHdCQUFXQyxPQUFYLENBQW1CLENBQUNDLE1BQU0sQ0FBQ0csU0FBUixFQUFtQlAsY0FBbkIsQ0FBbkI7QUFIWixLQUFSO0FBSUgsQ0FORDs7QUFPQSxJQUFNSSxNQUFNLEdBQUdGLHdCQUFXTSxNQUFYLENBQWtCO0FBQzdCRCxFQUFBQSxTQUFTLEVBQUU7QUFDUEUsSUFBQUEsSUFBSSxFQUFFLENBREM7QUFFUEMsSUFBQUEsWUFBWSxFQUFFO0FBRlAsR0FEa0I7QUFLN0JKLEVBQUFBLGNBQWMsRUFBRTtBQUNaRyxJQUFBQSxJQUFJLEVBQUUsQ0FETTtBQUVaRSxJQUFBQSxpQkFBaUIsRUFBRSxDQUZQO0FBR1pDLElBQUFBLEtBQUssRUFBRSxJQUhLO0FBSVpDLElBQUFBLE1BQU0sRUFBRTtBQUpJLEdBTGE7QUFXN0JSLEVBQUFBLEtBQUssRUFBRTtBQUNISSxJQUFBQSxJQUFJLEVBQUUsQ0FESDtBQUVISyxJQUFBQSxTQUFTLEVBQUUsT0FGUjtBQUdIRixJQUFBQSxLQUFLLEVBQUUsSUFISjtBQUlIQyxJQUFBQSxNQUFNLEVBQUU7QUFKTDtBQVhzQixDQUFsQixDQUFmOztlQWtCZSx1QkFBVWpCLGFBQVYsRUFBeUIsZUFBekIsQyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vaW5wdXQvSW5wdXQnO1xuY29uc3QgTGlzdEl0ZW1JbnB1dCA9IChfYSkgPT4ge1xuICAgIHZhciB7IGlucHV0U3R5bGUsIGlucHV0Q29udGFpbmVyU3R5bGUsIGNvbnRhaW5lclN0eWxlIH0gPSBfYSwgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcImlucHV0U3R5bGVcIiwgXCJpbnB1dENvbnRhaW5lclN0eWxlXCIsIFwiY29udGFpbmVyU3R5bGVcIl0pO1xuICAgIHJldHVybiAoPElucHV0IHJlbmRlckVycm9yTWVzc2FnZT17ZmFsc2V9IHsuLi5wcm9wc30gaW5wdXRTdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtzdHlsZXMuaW5wdXQsIGlucHV0U3R5bGVdKX0gaW5wdXRDb250YWluZXJTdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgc3R5bGVzLmlucHV0Q29udGFpbmVyLFxuICAgICAgICBpbnB1dENvbnRhaW5lclN0eWxlLFxuICAgIF0pfSBjb250YWluZXJTdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtzdHlsZXMuY29udGFpbmVyLCBjb250YWluZXJTdHlsZV0pfS8+KTtcbn07XG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgY29udGFpbmVyOiB7XG4gICAgICAgIGZsZXg6IDEsXG4gICAgICAgIHBhZGRpbmdSaWdodDogMCxcbiAgICB9LFxuICAgIGlucHV0Q29udGFpbmVyOiB7XG4gICAgICAgIGZsZXg6IDEsXG4gICAgICAgIGJvcmRlckJvdHRvbVdpZHRoOiAwLFxuICAgICAgICB3aWR0aDogbnVsbCxcbiAgICAgICAgaGVpZ2h0OiBudWxsLFxuICAgIH0sXG4gICAgaW5wdXQ6IHtcbiAgICAgICAgZmxleDogMSxcbiAgICAgICAgdGV4dEFsaWduOiAncmlnaHQnLFxuICAgICAgICB3aWR0aDogbnVsbCxcbiAgICAgICAgaGVpZ2h0OiBudWxsLFxuICAgIH0sXG59KTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShMaXN0SXRlbUlucHV0LCAnTGlzdEl0ZW1JbnB1dCcpO1xuIl19