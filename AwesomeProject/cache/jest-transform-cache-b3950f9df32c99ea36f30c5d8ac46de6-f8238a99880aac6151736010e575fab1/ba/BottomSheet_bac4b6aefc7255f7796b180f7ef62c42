bbd9fb662e1d81e1a7e3f26ff55d511a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BottomSheet = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _reactNativeSafeAreaContext = require("react-native-safe-area-context");

var _config = require("../config");

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var defaultProps = {
  modalProps: {},
  isVisible: false
};

var BottomSheet = function BottomSheet(_a) {
  var containerStyle = _a.containerStyle,
      isVisible = _a.isVisible,
      modalProps = _a.modalProps,
      children = _a.children,
      props = __rest(_a, ["containerStyle", "isVisible", "modalProps", "children"]);

  return _react.default.createElement(_reactNative.Modal, (0, _extends2.default)({
    animationType: "slide",
    transparent: true,
    visible: isVisible
  }, modalProps), _react.default.createElement(_reactNativeSafeAreaContext.SafeAreaView, (0, _extends2.default)({
    style: _reactNative.StyleSheet.flatten([styles.safeAreaView, containerStyle && containerStyle])
  }, props), _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.ScrollView, null, children))));
};

exports.BottomSheet = BottomSheet;

var styles = _reactNative.StyleSheet.create({
  safeAreaView: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.2)',
    flexDirection: 'column-reverse'
  },
  listContainer: {
    backgroundColor: 'white'
  }
});

BottomSheet.defaultProps = defaultProps;

var _default = (0, _config.withTheme)(BottomSheet, 'BottomSheet');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJvdHRvbVNoZWV0LmpzIl0sIm5hbWVzIjpbIl9fcmVzdCIsInMiLCJlIiwidCIsInAiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaSIsImxlbmd0aCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiZGVmYXVsdFByb3BzIiwibW9kYWxQcm9wcyIsImlzVmlzaWJsZSIsIkJvdHRvbVNoZWV0IiwiX2EiLCJjb250YWluZXJTdHlsZSIsImNoaWxkcmVuIiwicHJvcHMiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsInN0eWxlcyIsInNhZmVBcmVhVmlldyIsImNyZWF0ZSIsImZsZXgiLCJiYWNrZ3JvdW5kQ29sb3IiLCJmbGV4RGlyZWN0aW9uIiwibGlzdENvbnRhaW5lciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBV0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBZEEsSUFBSUEsTUFBTSxHQUFJLFFBQVEsS0FBS0EsTUFBZCxJQUF5QixVQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDbEQsTUFBSUMsQ0FBQyxHQUFHLEVBQVI7O0FBQ0EsT0FBSyxJQUFJQyxDQUFULElBQWNILENBQWQ7QUFBaUIsUUFBSUksTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNQLENBQXJDLEVBQXdDRyxDQUF4QyxLQUE4Q0YsQ0FBQyxDQUFDTyxPQUFGLENBQVVMLENBQVYsSUFBZSxDQUFqRSxFQUNiRCxDQUFDLENBQUNDLENBQUQsQ0FBRCxHQUFPSCxDQUFDLENBQUNHLENBQUQsQ0FBUjtBQURKOztBQUVBLE1BQUlILENBQUMsSUFBSSxJQUFMLElBQWEsT0FBT0ksTUFBTSxDQUFDSyxxQkFBZCxLQUF3QyxVQUF6RCxFQUNJLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQVIsRUFBV1AsQ0FBQyxHQUFHQyxNQUFNLENBQUNLLHFCQUFQLENBQTZCVCxDQUE3QixDQUFwQixFQUFxRFUsQ0FBQyxHQUFHUCxDQUFDLENBQUNRLE1BQTNELEVBQW1FRCxDQUFDLEVBQXBFLEVBQXdFO0FBQ3BFLFFBQUlULENBQUMsQ0FBQ08sT0FBRixDQUFVTCxDQUFDLENBQUNPLENBQUQsQ0FBWCxJQUFrQixDQUFsQixJQUF1Qk4sTUFBTSxDQUFDQyxTQUFQLENBQWlCTyxvQkFBakIsQ0FBc0NMLElBQXRDLENBQTJDUCxDQUEzQyxFQUE4Q0csQ0FBQyxDQUFDTyxDQUFELENBQS9DLENBQTNCLEVBQ0lSLENBQUMsQ0FBQ0MsQ0FBQyxDQUFDTyxDQUFELENBQUYsQ0FBRCxHQUFVVixDQUFDLENBQUNHLENBQUMsQ0FBQ08sQ0FBRCxDQUFGLENBQVg7QUFDUDtBQUNMLFNBQU9SLENBQVA7QUFDSCxDQVZEOztBQWVBLElBQU1XLFlBQVksR0FBRztBQUNqQkMsRUFBQUEsVUFBVSxFQUFFLEVBREs7QUFFakJDLEVBQUFBLFNBQVMsRUFBRTtBQUZNLENBQXJCOztBQUlBLElBQU1DLFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQUNDLEVBQUQsRUFBUTtBQUFBLE1BQ2xCQyxjQURrQixHQUNrQ0QsRUFEbEMsQ0FDbEJDLGNBRGtCO0FBQUEsTUFDRkgsU0FERSxHQUNrQ0UsRUFEbEMsQ0FDRkYsU0FERTtBQUFBLE1BQ1NELFVBRFQsR0FDa0NHLEVBRGxDLENBQ1NILFVBRFQ7QUFBQSxNQUNxQkssUUFEckIsR0FDa0NGLEVBRGxDLENBQ3FCRSxRQURyQjtBQUFBLE1BQ3NDQyxLQUR0QyxHQUM4Q3JCLE1BQU0sQ0FBQ2tCLEVBQUQsRUFBSyxDQUFDLGdCQUFELEVBQW1CLFdBQW5CLEVBQWdDLFlBQWhDLEVBQThDLFVBQTlDLENBQUwsQ0FEcEQ7O0FBRXhCLFNBQVEsNkJBQUMsa0JBQUQ7QUFBTyxJQUFBLGFBQWEsRUFBQyxPQUFyQjtBQUE2QixJQUFBLFdBQVcsRUFBRSxJQUExQztBQUFnRCxJQUFBLE9BQU8sRUFBRUY7QUFBekQsS0FBd0VELFVBQXhFLEdBQ04sNkJBQUMsd0NBQUQ7QUFBYyxJQUFBLEtBQUssRUFBRU8sd0JBQVdDLE9BQVgsQ0FBbUIsQ0FDdENDLE1BQU0sQ0FBQ0MsWUFEK0IsRUFFdENOLGNBQWMsSUFBSUEsY0FGb0IsQ0FBbkI7QUFBckIsS0FHTUUsS0FITixHQUlFLDZCQUFDLGlCQUFELFFBQ0UsNkJBQUMsdUJBQUQsUUFBYUQsUUFBYixDQURGLENBSkYsQ0FETSxDQUFSO0FBVUgsQ0FaRDs7OztBQWFBLElBQU1JLE1BQU0sR0FBR0Ysd0JBQVdJLE1BQVgsQ0FBa0I7QUFDN0JELEVBQUFBLFlBQVksRUFBRTtBQUNWRSxJQUFBQSxJQUFJLEVBQUUsQ0FESTtBQUVWQyxJQUFBQSxlQUFlLEVBQUUsaUJBRlA7QUFHVkMsSUFBQUEsYUFBYSxFQUFFO0FBSEwsR0FEZTtBQU03QkMsRUFBQUEsYUFBYSxFQUFFO0FBQUVGLElBQUFBLGVBQWUsRUFBRTtBQUFuQjtBQU5jLENBQWxCLENBQWY7O0FBUUFYLFdBQVcsQ0FBQ0gsWUFBWixHQUEyQkEsWUFBM0I7O2VBRWUsdUJBQVVHLFdBQVYsRUFBdUIsYUFBdkIsQyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNb2RhbCwgVmlldywgU3R5bGVTaGVldCwgU2Nyb2xsVmlldywgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgU2FmZUFyZWFWaWV3IH0gZnJvbSAncmVhY3QtbmF0aXZlLXNhZmUtYXJlYS1jb250ZXh0JztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5jb25zdCBkZWZhdWx0UHJvcHMgPSB7XG4gICAgbW9kYWxQcm9wczoge30sXG4gICAgaXNWaXNpYmxlOiBmYWxzZSxcbn07XG5jb25zdCBCb3R0b21TaGVldCA9IChfYSkgPT4ge1xuICAgIHZhciB7IGNvbnRhaW5lclN0eWxlLCBpc1Zpc2libGUsIG1vZGFsUHJvcHMsIGNoaWxkcmVuIH0gPSBfYSwgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcImNvbnRhaW5lclN0eWxlXCIsIFwiaXNWaXNpYmxlXCIsIFwibW9kYWxQcm9wc1wiLCBcImNoaWxkcmVuXCJdKTtcbiAgICByZXR1cm4gKDxNb2RhbCBhbmltYXRpb25UeXBlPVwic2xpZGVcIiB0cmFuc3BhcmVudD17dHJ1ZX0gdmlzaWJsZT17aXNWaXNpYmxlfSB7Li4ubW9kYWxQcm9wc30+XG4gICAgICA8U2FmZUFyZWFWaWV3IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICBzdHlsZXMuc2FmZUFyZWFWaWV3LFxuICAgICAgICBjb250YWluZXJTdHlsZSAmJiBjb250YWluZXJTdHlsZSxcbiAgICBdKX0gey4uLnByb3BzfT5cbiAgICAgICAgPFZpZXc+XG4gICAgICAgICAgPFNjcm9sbFZpZXc+e2NoaWxkcmVufTwvU2Nyb2xsVmlldz5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgPC9TYWZlQXJlYVZpZXc+XG4gICAgPC9Nb2RhbD4pO1xufTtcbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBzYWZlQXJlYVZpZXc6IHtcbiAgICAgICAgZmxleDogMSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjIpJyxcbiAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbi1yZXZlcnNlJyxcbiAgICB9LFxuICAgIGxpc3RDb250YWluZXI6IHsgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnIH0sXG59KTtcbkJvdHRvbVNoZWV0LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCB7IEJvdHRvbVNoZWV0IH07XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoQm90dG9tU2hlZXQsICdCb3R0b21TaGVldCcpO1xuIl19