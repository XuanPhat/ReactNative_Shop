ee9bf4ddf36e49e0507ecb68ae327afa
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Slider = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _config = require("../config");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var TRACK_SIZE = 4;
var THUMB_SIZE = 40;

var TRACK_STYLE = _reactNative.Platform.select({
  web: 0,
  default: -1
});

var DEFAULT_ANIMATION_CONFIGS = {
  spring: {
    friction: 7,
    tension: 100,
    useNativeDriver: false
  },
  timing: {
    duration: 150,
    easing: _reactNative.Easing.inOut(_reactNative.Easing.ease),
    delay: 0,
    useNativeDriver: false
  }
};

var getBoundedValue = function getBoundedValue(value, maximumValue, minimumValue) {
  return Math.max(Math.min(value, maximumValue), minimumValue);
};

var Rect = function () {
  function Rect(x, y, width, height) {
    (0, _classCallCheck2.default)(this, Rect);
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }

  (0, _createClass2.default)(Rect, [{
    key: "containsPoint",
    value: function containsPoint(x, y) {
      return x >= this.x && y >= this.y && x <= this.x + this.width && y <= this.y + this.height;
    }
  }]);
  return Rect;
}();

var Slider = function (_React$Component) {
  (0, _inherits2.default)(Slider, _React$Component);

  var _super = _createSuper(Slider);

  function Slider(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Slider);
    _this = _super.call(this, props);

    _this.measureContainer = function (x) {
      _this.handleMeasure('containerSize', x);
    };

    _this.measureTrack = function (x) {
      _this.handleMeasure('trackSize', x);
    };

    _this.measureThumb = function (x) {
      _this.handleMeasure('thumbSize', x);
    };

    _this.state = {
      containerSize: {
        width: 0,
        height: 0
      },
      trackSize: {
        width: 0,
        height: 0
      },
      thumbSize: {
        width: 0,
        height: 0
      },
      allMeasured: false,
      value: new _reactNative.Animated.Value(getBoundedValue(props.value, props.maximumValue, props.minimumValue))
    };
    _this.panResponder = _reactNative.PanResponder.create({
      onStartShouldSetPanResponder: _this.handleStartShouldSetPanResponder.bind((0, _assertThisInitialized2.default)(_this)),
      onMoveShouldSetPanResponder: _this.handleMoveShouldSetPanResponder.bind((0, _assertThisInitialized2.default)(_this)),
      onPanResponderGrant: _this.handlePanResponderGrant.bind((0, _assertThisInitialized2.default)(_this)),
      onPanResponderMove: _this.handlePanResponderMove.bind((0, _assertThisInitialized2.default)(_this)),
      onPanResponderRelease: _this.handlePanResponderEnd.bind((0, _assertThisInitialized2.default)(_this)),
      onPanResponderTerminationRequest: _this.handlePanResponderRequestEnd.bind((0, _assertThisInitialized2.default)(_this)),
      onPanResponderTerminate: _this.handlePanResponderEnd.bind((0, _assertThisInitialized2.default)(_this))
    });
    _this.isVertical = props.orientation === 'vertical';

    _this.componentDidUpdate(props, true);

    return _this;
  }

  (0, _createClass2.default)(Slider, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, force) {
      var newValue = getBoundedValue(this.props.value, this.props.maximumValue, this.props.minimumValue);

      if (prevProps.value !== newValue || force) {
        if (this.props.animateTransitions) {
          this.setCurrentValueAnimated(newValue);
        } else {
          this.setCurrentValue(newValue);
        }
      }
    }
  }, {
    key: "setCurrentValue",
    value: function setCurrentValue(value) {
      this.state.value.setValue(value);
    }
  }, {
    key: "setCurrentValueAnimated",
    value: function setCurrentValueAnimated(value) {
      var animationType = this.props.animationType;
      var animationConfig = Object.assign({}, DEFAULT_ANIMATION_CONFIGS[animationType], this.props.animationConfig, {
        toValue: value
      });

      _reactNative.Animated[animationType](this.state.value, animationConfig).start();
    }
  }, {
    key: "handleMoveShouldSetPanResponder",
    value: function handleMoveShouldSetPanResponder() {
      return false;
    }
  }, {
    key: "handlePanResponderGrant",
    value: function handlePanResponderGrant() {
      this._previousLeft = this.getThumbLeft(this.getCurrentValue());
      this.fireChangeEvent('onSlidingStart');
    }
  }, {
    key: "handlePanResponderMove",
    value: function handlePanResponderMove(_, gestureState) {
      if (this.props.disabled) {
        return;
      }

      this.setCurrentValue(this.getValue(gestureState));
      this.fireChangeEvent('onValueChange');
    }
  }, {
    key: "handlePanResponderRequestEnd",
    value: function handlePanResponderRequestEnd() {
      return false;
    }
  }, {
    key: "handlePanResponderEnd",
    value: function handlePanResponderEnd(_, gestureState) {
      if (this.props.disabled) {
        return;
      }

      this.setCurrentValue(this.getValue(gestureState));
      this.fireChangeEvent('onSlidingComplete');
    }
  }, {
    key: "thumbHitTest",
    value: function thumbHitTest(_ref) {
      var nativeEvent = _ref.nativeEvent;
      var thumbTouchRect = this.getThumbTouchRect();
      return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);
    }
  }, {
    key: "handleStartShouldSetPanResponder",
    value: function handleStartShouldSetPanResponder(e) {
      if (!this.props.allowTouchTrack) {
        return this.thumbHitTest(e);
      }

      this.setCurrentValue(this.getOnTouchValue(e));
      this.fireChangeEvent('onValueChange');
      return true;
    }
  }, {
    key: "fireChangeEvent",
    value: function fireChangeEvent(event) {
      if (this.props[event]) {
        this.props[event](this.getCurrentValue());
      }
    }
  }, {
    key: "getOnTouchValue",
    value: function getOnTouchValue(_ref2) {
      var nativeEvent = _ref2.nativeEvent;
      var location = this.isVertical ? nativeEvent.locationY : nativeEvent.locationX;
      return this.getValueForTouch(location);
    }
  }, {
    key: "getValueForTouch",
    value: function getValueForTouch(location) {
      var length = this.state.containerSize.width - this.state.thumbSize.width;
      var ratio = location / length;
      var newValue = ratio * (this.props.maximumValue - this.props.minimumValue);

      if (this.props.step) {
        newValue = Math.round(newValue / this.props.step) * this.props.step;
      }

      return getBoundedValue(newValue + this.props.minimumValue, this.props.maximumValue, this.props.minimumValue);
    }
  }, {
    key: "getTouchOverflowSize",
    value: function getTouchOverflowSize() {
      var _this$state = this.state,
          thumbSize = _this$state.thumbSize,
          allMeasured = _this$state.allMeasured,
          containerSize = _this$state.containerSize;
      var thumbTouchSize = this.props.thumbTouchSize;
      var size = {};

      if (allMeasured === true) {
        size.width = Math.max(0, thumbTouchSize.width - thumbSize.width);
        size.height = Math.max(0, thumbTouchSize.height - containerSize.height);
      }

      return size;
    }
  }, {
    key: "getTouchOverflowStyle",
    value: function getTouchOverflowStyle() {
      var _this$getTouchOverflo = this.getTouchOverflowSize(),
          width = _this$getTouchOverflo.width,
          height = _this$getTouchOverflo.height;

      var touchOverflowStyle = {};

      if (width !== undefined && height !== undefined) {
        var verticalMargin = -height / 2;
        touchOverflowStyle.marginTop = verticalMargin;
        touchOverflowStyle.marginBottom = verticalMargin;
        var horizontalMargin = -width / 2;
        touchOverflowStyle.marginLeft = horizontalMargin;
        touchOverflowStyle.marginRight = horizontalMargin;
      }

      if (this.props.debugTouchArea === true) {
        touchOverflowStyle.backgroundColor = 'orange';
        touchOverflowStyle.opacity = 0.5;
      }

      return touchOverflowStyle;
    }
  }, {
    key: "handleMeasure",
    value: function handleMeasure(name, x) {
      var _x$nativeEvent$layout = x.nativeEvent.layout,
          layoutWidth = _x$nativeEvent$layout.width,
          layoutHeight = _x$nativeEvent$layout.height;
      var width = this.isVertical ? layoutHeight : layoutWidth;
      var height = this.isVertical ? layoutWidth : layoutHeight;
      var size = {
        width: width,
        height: height
      };
      var storeName = "_" + name;
      var currentSize = this[storeName];

      if (currentSize && width === currentSize.width && height === currentSize.height) {
        return;
      }

      this[storeName] = size;

      if (this._containerSize && this._trackSize && this._thumbSize) {
        this.setState({
          containerSize: this._containerSize,
          trackSize: this._trackSize,
          thumbSize: this._thumbSize,
          allMeasured: true
        });
      }
    }
  }, {
    key: "getValue",
    value: function getValue(gestureState) {
      var location = this._previousLeft + (this.isVertical ? gestureState.dy : gestureState.dx);
      return this.getValueForTouch(location);
    }
  }, {
    key: "getCurrentValue",
    value: function getCurrentValue() {
      return this.state.value.__getValue();
    }
  }, {
    key: "getRatio",
    value: function getRatio(value) {
      return (value - this.props.minimumValue) / (this.props.maximumValue - this.props.minimumValue);
    }
  }, {
    key: "getThumbLeft",
    value: function getThumbLeft(value) {
      var ratio = this.getRatio(value);
      return ratio * (this.state.containerSize.width - this.state.thumbSize.width);
    }
  }, {
    key: "getThumbTouchRect",
    value: function getThumbTouchRect() {
      var _this$state2 = this.state,
          thumbSize = _this$state2.thumbSize,
          containerSize = _this$state2.containerSize;
      var thumbTouchSize = this.props.thumbTouchSize;
      var touchOverflowSize = this.getTouchOverflowSize();
      var height = touchOverflowSize.height / 2 + (containerSize.height - thumbTouchSize.height) / 2;
      var width = touchOverflowSize.width / 2 + this.getThumbLeft(this.getCurrentValue()) + (thumbSize.width - thumbTouchSize.width) / 2;

      if (this.isVertical) {
        return new Rect(height, width, thumbTouchSize.width, thumbTouchSize.height);
      }

      return new Rect(width, height, thumbTouchSize.width, thumbTouchSize.height);
    }
  }, {
    key: "renderDebugThumbTouchRect",
    value: function renderDebugThumbTouchRect(thumbLeft) {
      var thumbTouchRect = this.getThumbTouchRect();
      var positionStyle = {
        left: thumbLeft,
        top: thumbTouchRect.y,
        width: thumbTouchRect.width,
        height: thumbTouchRect.height
      };
      return _react.default.createElement(_reactNative.Animated.View, {
        style: positionStyle,
        pointerEvents: "none"
      });
    }
  }, {
    key: "getMinimumTrackStyles",
    value: function getMinimumTrackStyles(thumbStart) {
      var _this$state3 = this.state,
          thumbSize = _this$state3.thumbSize,
          trackSize = _this$state3.trackSize;
      var minimumTrackStyle = {
        position: 'absolute'
      };

      if (this.isVertical) {
        minimumTrackStyle.height = _reactNative.Animated.add(thumbStart, thumbSize.height / 2);
        minimumTrackStyle.marginLeft = trackSize.width * TRACK_STYLE;
      } else {
        minimumTrackStyle.width = _reactNative.Animated.add(thumbStart, thumbSize.width / 2);
        minimumTrackStyle.marginTop = trackSize.height * TRACK_STYLE;
      }

      return minimumTrackStyle;
    }
  }, {
    key: "getThumbPositionStyles",
    value: function getThumbPositionStyles(thumbStart) {
      return [(0, _defineProperty2.default)({}, this.isVertical ? 'translateY' : 'translateX', thumbStart)];
    }
  }, {
    key: "render",
    value: function render() {
      var _a = this.props,
          minimumValue = _a.minimumValue,
          maximumValue = _a.maximumValue,
          minimumTrackTintColor = _a.minimumTrackTintColor,
          maximumTrackTintColor = _a.maximumTrackTintColor,
          thumbTintColor = _a.thumbTintColor,
          containerStyle = _a.containerStyle,
          style = _a.style,
          trackStyle = _a.trackStyle,
          thumbStyle = _a.thumbStyle,
          thumbProps = _a.thumbProps,
          debugTouchArea = _a.debugTouchArea,
          other = __rest(_a, ["minimumValue", "maximumValue", "minimumTrackTintColor", "maximumTrackTintColor", "thumbTintColor", "containerStyle", "style", "trackStyle", "thumbStyle", "thumbProps", "debugTouchArea"]);

      var _this$state4 = this.state,
          value = _this$state4.value,
          containerSize = _this$state4.containerSize,
          thumbSize = _this$state4.thumbSize,
          allMeasured = _this$state4.allMeasured;
      var mainStyles = containerStyle || styles;

      var appliedTrackStyle = _reactNative.StyleSheet.flatten([styles.track, trackStyle]);

      var thumbStart = value.interpolate({
        inputRange: [minimumValue, maximumValue],
        outputRange: [0, containerSize.width - thumbSize.width]
      });
      var valueVisibleStyle = {};

      if (!allMeasured) {
        valueVisibleStyle.height = 0;
        valueVisibleStyle.width = 0;
      }

      var minimumTrackStyle = Object.assign(Object.assign(Object.assign({}, this.getMinimumTrackStyles(thumbStart)), {
        backgroundColor: minimumTrackTintColor
      }), valueVisibleStyle);
      var touchOverflowStyle = this.getTouchOverflowStyle();
      return _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, other, {
        style: _reactNative.StyleSheet.flatten([this.isVertical ? mainStyles.containerVertical : mainStyles.containerHorizontal, style]),
        onLayout: this.measureContainer
      }), _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([mainStyles.track, this.isVertical ? mainStyles.trackVertical : mainStyles.trackHorizontal, appliedTrackStyle, {
          backgroundColor: maximumTrackTintColor
        }]),
        onLayout: this.measureTrack
      }), _react.default.createElement(_reactNative.Animated.View, {
        style: _reactNative.StyleSheet.flatten([mainStyles.track, this.isVertical ? mainStyles.trackVertical : mainStyles.trackHorizontal, appliedTrackStyle, minimumTrackStyle])
      }), _react.default.createElement(SliderThumb, (0, _extends2.default)({
        isVisible: allMeasured,
        onLayout: this.measureThumb.bind(this),
        style: thumbStyle,
        color: thumbTintColor,
        start: thumbStart,
        vertical: this.isVertical
      }, thumbProps)), _react.default.createElement(_reactNative.View, (0, _extends2.default)({
        style: _reactNative.StyleSheet.flatten([styles.touchArea, touchOverflowStyle])
      }, this.panResponder.panHandlers), debugTouchArea === true && this.renderDebugThumbTouchRect(thumbStart)));
    }
  }]);
  return Slider;
}(_react.default.Component);

exports.Slider = Slider;

var SliderThumb = function SliderThumb(_a) {
  var Component = _a.Component,
      isVisible = _a.isVisible,
      onLayout = _a.onLayout,
      style = _a.style,
      start = _a.start,
      color = _a.color,
      vertical = _a.vertical,
      props = __rest(_a, ["Component", "isVisible", "onLayout", "style", "start", "color", "vertical"]);

  var ThumbComponent = Component || _reactNative.Animated.View;
  var axis = vertical ? 'translateY' : 'translateX';
  var thumbPosition = [(0, _defineProperty2.default)({}, axis, start)];
  var styleTransform = style && style.transform || [];
  var visibleStyle = isVisible ? {} : {
    height: 0,
    width: 0
  };
  return _react.default.createElement(ThumbComponent, (0, _extends2.default)({
    testID: "sliderThumb",
    onLayout: onLayout,
    style: _reactNative.StyleSheet.flatten([Object.assign({
      backgroundColor: color,
      transform: [].concat(thumbPosition, (0, _toConsumableArray2.default)(styleTransform))
    }, visibleStyle), styles.thumb, style])
  }, props));
};

Slider.defaultProps = {
  value: 0,
  minimumValue: 0,
  maximumValue: 1,
  step: 0,
  minimumTrackTintColor: '#3f3f3f',
  maximumTrackTintColor: '#b3b3b3',
  allowTouchTrack: false,
  thumbTintColor: 'red',
  thumbTouchSize: {
    width: THUMB_SIZE,
    height: THUMB_SIZE
  },
  debugTouchArea: false,
  animationType: 'timing',
  orientation: 'horizontal'
};

var styles = _reactNative.StyleSheet.create({
  containerHorizontal: {
    height: 40,
    justifyContent: 'center'
  },
  containerVertical: {
    width: 40,
    flexDirection: 'column',
    alignItems: 'center'
  },
  track: {
    borderRadius: TRACK_SIZE / 2
  },
  trackHorizontal: {
    height: TRACK_SIZE
  },
  trackVertical: {
    flex: 1,
    width: TRACK_SIZE
  },
  thumb: {
    position: 'absolute',
    width: THUMB_SIZE,
    height: THUMB_SIZE,
    borderRadius: THUMB_SIZE / 2
  },
  touchArea: {
    position: 'absolute',
    backgroundColor: 'transparent',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  debugThumbTouchArea: {
    position: 'absolute',
    backgroundColor: 'green',
    opacity: 0.5
  }
});

var _default = (0, _config.withTheme)(Slider, 'Slider');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,