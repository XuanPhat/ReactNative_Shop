90d65912465d5e3fdbfacd172fe79078
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _config = require("../config");

var _Image = _interopRequireDefault(require("../image/Image"));

var _Icon = _interopRequireDefault(require("../icons/Icon"));

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Accessory = function Accessory(_a) {
  var _a$size = _a.size,
      size = _a$size === void 0 ? 10 : _a$size,
      style = _a.style,
      _a$underlayColor = _a.underlayColor,
      underlayColor = _a$underlayColor === void 0 ? '#000' : _a$underlayColor,
      onPress = _a.onPress,
      onLongPress = _a.onLongPress,
      source = _a.source,
      props = __rest(_a, ["size", "style", "underlayColor", "onPress", "onLongPress", "source"]);

  return _react.default.createElement(_reactNative.TouchableHighlight, {
    style: [styles.accessory, {
      width: size,
      height: size,
      borderRadius: size / 2
    }, style],
    underlayColor: underlayColor,
    onPress: onPress,
    onLongPress: onLongPress
  }, _react.default.createElement(_reactNative.View, null, source ? _react.default.createElement(_Image.default, (0, _extends2.default)({
    source: source,
    style: {
      width: size,
      height: size,
      borderRadius: size / 2
    }
  }, props)) : _react.default.createElement(_Icon.default, (0, _extends2.default)({
    name: "mode-edit",
    type: "material",
    color: "#fff",
    size: size * 0.8
  }, props))));
};

var styles = _reactNative.StyleSheet.create({
  accessory: Object.assign({
    position: 'absolute',
    bottom: 0,
    right: 0,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#aaa'
  }, _reactNative.Platform.select({
    android: {
      elevation: 1
    },
    default: {
      shadowColor: '#000',
      shadowOffset: {
        width: 1,
        height: 1
      },
      shadowRadius: 2,
      shadowOpacity: 0.5
    }
  }))
});

var _default = (0, _config.withTheme)(Accessory, 'AvatarAccessory');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFjY2Vzc29yeS5qcyJdLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkFjY2Vzc29yeSIsIl9hIiwic2l6ZSIsInN0eWxlIiwidW5kZXJsYXlDb2xvciIsIm9uUHJlc3MiLCJvbkxvbmdQcmVzcyIsInNvdXJjZSIsInByb3BzIiwic3R5bGVzIiwiYWNjZXNzb3J5Iiwid2lkdGgiLCJoZWlnaHQiLCJib3JkZXJSYWRpdXMiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiYXNzaWduIiwicG9zaXRpb24iLCJib3R0b20iLCJyaWdodCIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsImJhY2tncm91bmRDb2xvciIsIlBsYXRmb3JtIiwic2VsZWN0IiwiYW5kcm9pZCIsImVsZXZhdGlvbiIsImRlZmF1bHQiLCJzaGFkb3dDb2xvciIsInNoYWRvd09mZnNldCIsInNoYWRvd1JhZGl1cyIsInNoYWRvd09wYWNpdHkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVdBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQWZBLElBQUlBLE1BQU0sR0FBSSxRQUFRLEtBQUtBLE1BQWQsSUFBeUIsVUFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ2xELE1BQUlDLENBQUMsR0FBRyxFQUFSOztBQUNBLE9BQUssSUFBSUMsQ0FBVCxJQUFjSCxDQUFkO0FBQWlCLFFBQUlJLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDUCxDQUFyQyxFQUF3Q0csQ0FBeEMsS0FBOENGLENBQUMsQ0FBQ08sT0FBRixDQUFVTCxDQUFWLElBQWUsQ0FBakUsRUFDYkQsQ0FBQyxDQUFDQyxDQUFELENBQUQsR0FBT0gsQ0FBQyxDQUFD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QUssRUFBRSxDQUExQztBQUE2Q0MsSUFBQUEsVUFBVSxFQUFFLFFBQXpEO0FBQW1FQyxJQUFBQSxjQUFjLEVBQUUsUUFBbkY7QUFBNkZDLElBQUFBLGVBQWUsRUFBRTtBQUE5RyxHQUFkLEVBQXNJQyxzQkFBU0MsTUFBVCxDQUFnQjtBQUM3SkMsSUFBQUEsT0FBTyxFQUFFO0FBQ0xDLE1BQUFBLFNBQVMsRUFBRTtBQUROLEtBRG9KO0FBSTdKQyxJQUFBQSxPQUFPLEVBQUU7QUFDTEMsTUFBQUEsV0FBVyxFQUFFLE1BRFI7QUFFTEMsTUFBQUEsWUFBWSxFQUFFO0FBQUVsQixRQUFBQSxLQUFLLEVBQUUsQ0FBVDtBQUFZQyxRQUFBQSxNQUFNLEVBQUU7QUFBcEIsT0FGVDtBQUdMa0IsTUFBQUEsWUFBWSxFQUFFLENBSFQ7QUFJTEMsTUFBQUEsYUFBYSxFQUFFO0FBSlY7QUFKb0osR0FBaEIsQ0FBdEk7QUFEa0IsQ0FBbEIsQ0FBZjs7ZUFhZSx1QkFBVS9CLFNBQVYsRUFBcUIsaUJBQXJCLEMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVG91Y2hhYmxlSGlnaGxpZ2h0LCBWaWV3LCBQbGF0Zm9ybSwgU3R5bGVTaGVldCwgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCBJbWFnZSBmcm9tICcuLi9pbWFnZS9JbWFnZSc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9pY29ucy9JY29uJztcbmNvbnN0IEFjY2Vzc29yeSA9IChfYSkgPT4ge1xuICAgIHZhciB7IHNpemUgPSAxMCwgc3R5bGUsIHVuZGVybGF5Q29sb3IgPSAnIzAwMCcsIG9uUHJlc3MsIG9uTG9uZ1ByZXNzLCBzb3VyY2UgfSA9IF9hLCBwcm9wcyA9IF9fcmVzdChfYSwgW1wic2l6ZVwiLCBcInN0eWxlXCIsIFwidW5kZXJsYXlDb2xvclwiLCBcIm9uUHJlc3NcIiwgXCJvbkxvbmdQcmVzc1wiLCBcInNvdXJjZVwiXSk7XG4gICAgcmV0dXJuICg8VG91Y2hhYmxlSGlnaGxpZ2h0IHN0eWxlPXtbXG4gICAgICAgIHN0eWxlcy5hY2Nlc3NvcnksXG4gICAgICAgIHtcbiAgICAgICAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgICAgICAgaGVpZ2h0OiBzaXplLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBzaXplIC8gMixcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGUsXG4gICAgXX0gdW5kZXJsYXlDb2xvcj17dW5kZXJsYXlDb2xvcn0gb25QcmVzcz17b25QcmVzc30gb25Mb25nUHJlc3M9e29uTG9uZ1ByZXNzfT5cbiAgICAgIDxWaWV3PlxuICAgICAgICB7c291cmNlID8gKFxuICAgIC8vQHRzLWlnbm9yZVxuICAgIDxJbWFnZSBzb3VyY2U9e3NvdXJjZX0gc3R5bGU9e3tcbiAgICAgICAgd2lkdGg6IHNpemUsXG4gICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiBzaXplIC8gMixcbiAgICB9fSB7Li4ucHJvcHN9Lz4pIDogKDxJY29uIG5hbWU9XCJtb2RlLWVkaXRcIiB0eXBlPVwibWF0ZXJpYWxcIiBjb2xvcj1cIiNmZmZcIiBzaXplPXtzaXplICogMC44fSB7Li4ucHJvcHN9Lz4pfVxuICAgICAgPC9WaWV3PlxuICAgIDwvVG91Y2hhYmxlSGlnaGxpZ2h0Pik7XG59O1xuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIGFjY2Vzc29yeTogT2JqZWN0LmFzc2lnbih7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCBib3R0b206IDAsIHJpZ2h0OiAwLCBhbGlnbkl0ZW1zOiAnY2VudGVyJywganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLCBiYWNrZ3JvdW5kQ29sb3I6ICcjYWFhJyB9LCBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICBhbmRyb2lkOiB7XG4gICAgICAgICAgICBlbGV2YXRpb246IDEsXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAnIzAwMCcsXG4gICAgICAgICAgICBzaGFkb3dPZmZzZXQ6IHsgd2lkdGg6IDEsIGhlaWdodDogMSB9LFxuICAgICAgICAgICAgc2hhZG93UmFkaXVzOiAyLFxuICAgICAgICAgICAgc2hhZG93T3BhY2l0eTogMC41LFxuICAgICAgICB9LFxuICAgIH0pKSxcbn0pO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKEFjY2Vzc29yeSwgJ0F2YXRhckFjY2Vzc29yeScpO1xuIl19