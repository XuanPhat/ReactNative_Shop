f732a91254571ef5719d8de91594eb29
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Avatar = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _lodash = _interopRequireDefault(require("lodash.isequal"));

var _config = require("../config");

var _helpers = require("../helpers");

var _Icon = _interopRequireDefault(require("../icons/Icon"));

var _Image = _interopRequireDefault(require("../image/Image"));

var _Accessory = _interopRequireDefault(require("./Accessory"));

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var avatarSizes = {
  small: 34,
  medium: 50,
  large: 75,
  xlarge: 150
};

var AvatarComponent = function AvatarComponent(_a) {
  var onPress = _a.onPress,
      onLongPress = _a.onLongPress,
      _a$Component = _a.Component,
      Component = _a$Component === void 0 ? onPress || onLongPress ? _reactNative.TouchableOpacity : _reactNative.View : _a$Component,
      containerStyle = _a.containerStyle,
      icon = _a.icon,
      iconStyle = _a.iconStyle,
      source = _a.source,
      _a$size = _a.size,
      size = _a$size === void 0 ? 'small' : _a$size,
      avatarStyle = _a.avatarStyle,
      rounded = _a.rounded,
      title = _a.title,
      titleStyle = _a.titleStyle,
      overlayContainerStyle = _a.overlayContainerStyle,
      imageProps = _a.imageProps,
      placeholderStyle = _a.placeholderStyle,
      renderPlaceholderContent = _a.renderPlaceholderContent,
      _a$ImageComponent = _a.ImageComponent,
      ImageComponent = _a$ImageComponent === void 0 ? _reactNative.Image : _a$ImageComponent,
      children = _a.children,
      attributes = __rest(_a, ["onPress", "onLongPress", "Component", "containerStyle", "icon", "iconStyle", "source", "size", "avatarStyle", "rounded", "title", "titleStyle", "overlayContainerStyle", "imageProps", "placeholderStyle", "renderPlaceholderContent", "ImageComponent", "children"]);

  var width = typeof size === 'number' ? size : avatarSizes[size] || avatarSizes.small;
  var height = width;
  var titleSize = width / 2;
  var iconSize = width / 2;

  var PlaceholderContent = renderPlaceholderContent && (0, _helpers.renderNode)(undefined, renderPlaceholderContent) || title && _react.default.createElement(_reactNative.Text, {
    style: _reactNative.StyleSheet.flatten([styles.title, {
      fontSize: titleSize
    }, titleStyle])
  }, title) || icon && _react.default.createElement(_Icon.default, {
    style: iconStyle && iconStyle,
    color: icon.color || 'white',
    name: icon.name || 'user',
    size: icon.size || iconSize,
    type: icon.type && icon.type
  });

  var hidePlaceholder = !(source && source.uri);

  var imageContainerStyle = _reactNative.StyleSheet.flatten([styles.overlayContainer, rounded && {
    borderRadius: width / 2,
    overflow: 'hidden'
  }, overlayContainerStyle, imageProps && imageProps.containerStyle]);

  if (imageProps && imageProps.containerStyle) {
    delete imageProps.containerStyle;
  }

  return _react.default.createElement(Component, (0, _extends2.default)({
    onPress: onPress,
    onLongPress: onLongPress,
    style: _reactNative.StyleSheet.flatten([styles.container, {
      height: height,
      width: width
    }, rounded && {
      borderRadius: width / 2
    }, containerStyle])
  }, attributes), _react.default.createElement(_Image.default, (0, _extends2.default)({
    placeholderStyle: _reactNative.StyleSheet.flatten([placeholderStyle, hidePlaceholder && styles.hiddenPlaceholderStyle]),
    PlaceholderContent: PlaceholderContent,
    containerStyle: imageContainerStyle,
    source: source,
    borderRadius: rounded ? width / 2 : undefined
  }, imageProps, {
    style: _reactNative.StyleSheet.flatten([styles.avatar, imageProps && imageProps.style, avatarStyle]),
    ImageComponent: ImageComponent
  })), children);
};

var styles = _reactNative.StyleSheet.create({
  container: {
    backgroundColor: 'transparent'
  },
  avatar: {
    flex: 1,
    width: undefined,
    height: undefined
  },
  overlayContainer: {
    flex: 1
  },
  title: {
    color: '#ffffff',
    backgroundColor: 'transparent',
    textAlign: 'center'
  },
  hiddenPlaceholderStyle: {
    backgroundColor: 'transparent'
  }
});

var Avatar = _react.default.memo(AvatarComponent, _lodash.default);

exports.Avatar = Avatar;
var ThemedAvatar = Object.assign((0, _config.withTheme)(Avatar, 'Avatar'), {
  Accessory: _Accessory.default
});
var _default = ThemedAvatar;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,