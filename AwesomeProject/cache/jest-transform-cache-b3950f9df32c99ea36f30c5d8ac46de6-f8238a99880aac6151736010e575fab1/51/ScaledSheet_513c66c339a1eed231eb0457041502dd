f665347e096f9dd499e8830b397a6ac3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactNative = require("react-native");

var _deepMap = _interopRequireDefault(require("./deep-map"));

var validScaleSheetRegex = /^(\-?\d+(?:\.\d{1,3})?)@(mv?s(\d+(?:\.\d{1,2})?)?|s|vs)r?$/;

var scaleByAnnotation = function scaleByAnnotation(scale, verticalScale, moderateScale, moderateVerticalScale) {
  return function (value) {
    if (!validScaleSheetRegex.test(value)) {
      return value;
    }

    var regexExecResult = validScaleSheetRegex.exec(value);
    var size = parseFloat(regexExecResult[1]);
    var scaleFunc = regexExecResult[2];
    var scaleFactor = regexExecResult[3];
    if (scaleFactor) scaleFunc = scaleFunc.slice(0, -scaleFactor.length);
    var shouldRound = value.endsWith('r');
    var result;

    switch (scaleFunc) {
      case 's':
        result = scale(size);
        break;

      case 'vs':
        result = verticalScale(size);
        break;

      case 'ms':
        result = moderateScale(size, scaleFactor);
        break;

      case 'mvs':
        result = moderateVerticalScale(size, scaleFactor);
        break;
    }

    return shouldRound ? Math.round(result) : result;
  };
};

var scaledSheetCreator = function scaledSheetCreator(scale, verticalScale, moderateScale, moderateVerticalScale) {
  var scaleFunc = scaleByAnnotation(scale, verticalScale, moderateScale, moderateVerticalScale);
  return {
    create: function create(styleSheet) {
      return _reactNative.StyleSheet.create((0, _deepMap.default)(styleSheet, scaleFunc));
    }
  };
};

var _default = scaledSheetCreator;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjYWxlZFNoZWV0LmpzIl0sIm5hbWVzIjpbInZhbGlkU2NhbGVTaGVldFJlZ2V4Iiwic2NhbGVCeUFubm90YXRpb24iLCJzY2FsZSIsInZlcnRpY2FsU2NhbGUiLCJtb2RlcmF0ZVNjYWxlIiwibW9kZXJhdGVWZXJ0aWNhbFNjYWxlIiwidmFsdWUiLCJ0ZXN0IiwicmVnZXhFeGVjUmVzdWx0IiwiZXhlYyIsInNpemUiLCJwYXJzZUZsb2F0Iiwic2NhbGVGdW5jIiwic2NhbGVGYWN0b3IiLCJzbGljZSIsImxlbmd0aCIsInNob3VsZFJvdW5kIiwiZW5kc1dpdGgiLCJyZXN1bHQiLCJNYXRoIiwicm91bmQiLCJzY2FsZWRTaGVldENyZWF0b3IiLCJjcmVhdGUiLCJzdHlsZVNoZWV0IiwiU3R5bGVTaGVldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUlBLElBQU1BLG9CQUFvQixHQUFHLDREQUE3Qjs7QUFFQSxJQUFNQyxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLENBQUNDLEtBQUQsRUFBUUMsYUFBUixFQUF1QkMsYUFBdkIsRUFBc0NDLHFCQUF0QztBQUFBLFNBQWdFLFVBQUNDLEtBQUQsRUFBVztBQUNqRyxRQUFJLENBQUNOLG9CQUFvQixDQUFDTyxJQUFyQixDQUEwQkQsS0FBMUIsQ0FBTCxFQUF1QztBQUNuQyxhQUFPQSxLQUFQO0FBQ0g7O0FBRUQsUUFBTUUsZUFBZSxHQUFHUixvQkFBb0IsQ0FBQ1MsSUFBckIsQ0FBMEJILEtBQTFCLENBQXhCO0FBRUEsUUFBTUksSUFBSSxHQUFHQyxVQUFVLENBQUNILGVBQWUsQ0FBQyxDQUFELENBQWhCLENBQXZCO0FBQ0EsUUFBSUksU0FBUyxHQUFHSixlQUFlLENBQUMsQ0FBRCxDQUEvQjtBQUNBLFFBQU1LLFdBQVcsR0FBR0wsZUFBZSxDQUFDLENBQUQsQ0FBbkM7QUFFQSxRQUFJSyxXQUFKLEVBQ0lELFNBQVMsR0FBR0EsU0FBUyxDQUFDRSxLQUFWLENBQWdCLENBQWhCLEVBQW1CLENBQUVELFdBQVcsQ0FBQ0UsTUFBakMsQ0FBWjtBQUVKLFFBQU1DLFdBQVcsR0FBR1YsS0FBSyxDQUFDVyxRQUFOLENBQWUsR0FBZixDQUFwQjtBQUVBLFFBQUlDLE1BQUo7O0FBRUEsWUFBUU4sU0FBUjtBQUNJLFdBQUssR0FBTDtBQUNJTSxRQUFBQSxNQUFNLEdBQUdoQixLQUFLLENBQUNRLElBQUQsQ0FBZDtBQUNBOztBQUNKLFdBQUssSUFBTDtBQUNJUSxRQUFBQSxNQUFNLEdBQUdmLGFBQWEsQ0FBQ08sSUFBRCxDQUF0QjtBQUNBOztBQUNKLFdBQUssSUFBTDtBQUNJUSxRQUFBQSxNQUFNLEdBQUdkLGFBQWEsQ0FBQ00sSUFBRCxFQUFPRyxXQUFQLENBQXRCO0FBQ0E7O0FBQ0osV0FBSyxLQUFMO0FBQ0lLLFFBQUFBLE1BQU0sR0FBR2IscUJBQXFCLENBQUNLLElBQUQsRUFBT0csV0FBUCxDQUE5QjtBQUNBO0FBWlI7O0FBZUEsV0FBT0csV0FBVyxHQUFHRyxJQUFJLENBQUNDLEtBQUwsQ0FBV0YsTUFBWCxDQUFILEdBQXdCQSxNQUExQztBQUNILEdBbEN5QjtBQUFBLENBQTFCOztBQW9DQSxJQUFNRyxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQXFCLENBQUNuQixLQUFELEVBQVFDLGFBQVIsRUFBdUJDLGFBQXZCLEVBQXNDQyxxQkFBdEMsRUFBZ0U7QUFDdkYsTUFBTU8sU0FBUyxHQUFHWCxpQkFBaUIsQ0FBQ0MsS0FBRCxFQUFRQyxhQUFSLEVBQXVCQyxhQUF2QixFQUFzQ0MscUJBQXRDLENBQW5DO0FBQ0EsU0FBTztBQUNIaUIsSUFBQUEsTUFBTSxFQUFFLGdCQUFBQyxVQUFVO0FBQUEsYUFBSUMsd0JBQVdGLE1BQVgsQ0FBa0Isc0JBQVFDLFVBQVIsRUFBb0JYLFNBQXBCLENBQWxCLENBQUo7QUFBQTtBQURmLEdBQVA7QUFHSCxDQUxEOztlQU9lUyxrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IGRlZXBNYXAgZnJvbSAnLi9kZWVwLW1hcCc7XG5cbi8vIEdyb3VwcyAgICAgICAgICAgICAgICAgICAgIFNpemUgICAgICAgICAgICAgICAgICAgRnVuYyBGYWN0b3Jcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxICAgICAgICAgICAgICAgICAgICAgIDIgICAgM1xuY29uc3QgdmFsaWRTY2FsZVNoZWV0UmVnZXggPSAvXihcXC0/XFxkKyg/OlxcLlxcZHsxLDN9KT8pQChtdj9zKFxcZCsoPzpcXC5cXGR7MSwyfSk/KT98c3x2cylyPyQvO1xuXG5jb25zdCBzY2FsZUJ5QW5ub3RhdGlvbiA9IChzY2FsZSwgdmVydGljYWxTY2FsZSwgbW9kZXJhdGVTY2FsZSwgbW9kZXJhdGVWZXJ0aWNhbFNjYWxlKSA9PiAodmFsdWUpID0+IHtcbiAgICBpZiAoIXZhbGlkU2NhbGVTaGVldFJlZ2V4LnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCByZWdleEV4ZWNSZXN1bHQgPSB2YWxpZFNjYWxlU2hlZXRSZWdleC5leGVjKHZhbHVlKTtcblxuICAgIGNvbnN0IHNpemUgPSBwYXJzZUZsb2F0KHJlZ2V4RXhlY1Jlc3VsdFsxXSk7XG4gICAgbGV0IHNjYWxlRnVuYyA9IHJlZ2V4RXhlY1Jlc3VsdFsyXTtcbiAgICBjb25zdCBzY2FsZUZhY3RvciA9IHJlZ2V4RXhlY1Jlc3VsdFszXTsgLy8gc3RyaW5nIG9yIHVuZGVmaW5lZFxuXG4gICAgaWYgKHNjYWxlRmFjdG9yKVxuICAgICAgICBzY2FsZUZ1bmMgPSBzY2FsZUZ1bmMuc2xpY2UoMCwgLSBzY2FsZUZhY3Rvci5sZW5ndGgpOyAvLyBSZW1vdmUgdGhlIGZhY3RvciBmcm9tIGl0XG5cbiAgICBjb25zdCBzaG91bGRSb3VuZCA9IHZhbHVlLmVuZHNXaXRoKCdyJyk7XG5cbiAgICBsZXQgcmVzdWx0O1xuXG4gICAgc3dpdGNoIChzY2FsZUZ1bmMpIHtcbiAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICByZXN1bHQgPSBzY2FsZShzaXplKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd2cyc6XG4gICAgICAgICAgICByZXN1bHQgPSB2ZXJ0aWNhbFNjYWxlKHNpemUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ21zJzpcbiAgICAgICAgICAgIHJlc3VsdCA9IG1vZGVyYXRlU2NhbGUoc2l6ZSwgc2NhbGVGYWN0b3IpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ212cyc6XG4gICAgICAgICAgICByZXN1bHQgPSBtb2RlcmF0ZVZlcnRpY2FsU2NhbGUoc2l6ZSwgc2NhbGVGYWN0b3IpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNob3VsZFJvdW5kID8gTWF0aC5yb3VuZChyZXN1bHQpIDogcmVzdWx0O1xufTtcblxuY29uc3Qgc2NhbGVkU2hlZXRDcmVhdG9yID0gKHNjYWxlLCB2ZXJ0aWNhbFNjYWxlLCBtb2RlcmF0ZVNjYWxlLCBtb2RlcmF0ZVZlcnRpY2FsU2NhbGUpID0+IHtcbiAgICBjb25zdCBzY2FsZUZ1bmMgPSBzY2FsZUJ5QW5ub3RhdGlvbihzY2FsZSwgdmVydGljYWxTY2FsZSwgbW9kZXJhdGVTY2FsZSwgbW9kZXJhdGVWZXJ0aWNhbFNjYWxlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjcmVhdGU6IHN0eWxlU2hlZXQgPT4gU3R5bGVTaGVldC5jcmVhdGUoZGVlcE1hcChzdHlsZVNoZWV0LCBzY2FsZUZ1bmMpKVxuICAgIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzY2FsZWRTaGVldENyZWF0b3I7Il19