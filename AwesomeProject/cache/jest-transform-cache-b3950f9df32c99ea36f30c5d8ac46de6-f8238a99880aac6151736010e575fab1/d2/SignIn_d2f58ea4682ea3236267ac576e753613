82c8e724d3b553c58710e0668d3c5b96
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var Animatable = _interopRequireWildcard(require("react-native-animatable"));

var Yup = _interopRequireWildcard(require("yup"));

var _react = _interopRequireDefault(require("react"));

var _reactNativePaper = require("react-native-paper");

var _reactNative = require("react-native");

var _reactRedux = require("react-redux");

var _native = require("@react-navigation/native");

var _formik = require("formik");

var _MaterialCommunityIcons = _interopRequireDefault(require("react-native-vector-icons/MaterialCommunityIcons"));

var _Texbox = _interopRequireDefault(require("../../../components/Texbox"));

var _color = _interopRequireDefault(require("../../../constants/color"));

var _actions = require("../actions/");

var _reactNativeFastImage = _interopRequireDefault(require("react-native-fast-image"));

var SignInSchema = Yup.object().shape({
  email: Yup.string().email('Gmail không đúng định dạng').required(' Địa chỉ gmail không được để trống'),
  password: Yup.string().min(6, 'mật khẩu phải lớn hơn 6 kí tự').required('Mật khẩu không được để trống')
});

var SignIn = function SignIn() {
  var Touch = _reactNative.Platform.OS === 'ios' ? _reactNative.TouchableOpacity : _reactNative.TouchableWithoutFeedback;
  var loading = (0, _reactRedux.useSelector)(function (state) {
    return state.auth.loading;
  });
  var signedInUser = (0, _reactRedux.useSelector)(function (state) {
    return state.auth;
  });

  var _React$useState = _react.default.useState(false),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      visible = _React$useState2[0],
      setVisible = _React$useState2[1];

  var dispatch = (0, _reactRedux.useDispatch)();
  var paperColor = (0, _reactNativePaper.useTheme)().colors;
  var navigation = (0, _native.useNavigation)();

  var containerRef = _react.default.useRef(null);

  var logoRef = _react.default.useRef(null);

  var _React$useState3 = _react.default.useState(false),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      isSwitchOn = _React$useState4[0],
      setIsSwitchOn = _React$useState4[1];

  var _React$useState5 = _react.default.useState(null),
      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
      loggedInUser = _React$useState6[0],
      setLoggedInUser = _React$useState6[1];

  var getData = function getData() {
    var data;
    return _regenerator.default.async(function getData$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return _regenerator.default.awrap(AsyncStorage.getItem('@LoggedInUser'));

          case 3:
            data = _context.sent;

            if (!data) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return", JSON.parse(data));

          case 6:
            return _context.abrupt("return", null);

          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](0);
            console.log('Get failed: ', _context.t0);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, [[0, 9]], Promise);
  };

  _react.default.useEffect(function () {
    var keyboardDidShowListener = _reactNative.Keyboard.addListener('keyboardDidShow', function () {
      containerRef.current.transitionTo({
        height: 0
      }, 1000);
      containerRef.current.fadeOutUpBig(750);
      logoRef.current.transitionTo({
        height: 0
      }, 750);
      logoRef.current.fadeOutUpBig(500);
    });

    var keyboardDidHideListener = _reactNative.Keyboard.addListener('keyboardDidHide', function () {
      containerRef.current.transitionTo({
        height: 170
      }, 500);
      containerRef.current.fadeInDownBig(750);
      logoRef.current.transitionTo({
        height: 240
      }, 150);
      logoRef.current.fadeInDownBig(1000);
    });

    return function () {
      keyboardDidHideListener.remove();
      keyboardDidShowListener.remove();
    };
  }, []);

  return _react.default.createElement(_reactNative.View, {
    style: {
      flex: 1
    }
  }, _react.default.createElement(_reactNative.TouchableOpacity, {
    activeOpacity: 1,
    style: {
      flex: 1,
      backgroundColor: _color.default.WHITE
    },
    onPress: _reactNative.Keyboard.dismiss
  }, _react.default.createElement(_reactNative.KeyboardAvoidingView, {
    behavior: _reactNative.Platform.OS === 'ios' ? 'padding' : undefined,
    style: {
      flex: 1
    }
  }, _react.default.createElement(_formik.Formik, {
    enableReinitialize: true,
    initialValues: {
      email: loggedInUser ? loggedInUser.email : '',
      password: loggedInUser ? loggedInUser.password : ''
    },
    validationSchema: SignInSchema,
    onSubmit: function onSubmit(values) {
      loading;
      dispatch((0, _actions.signInAction)(values.email, values.password));

      if (isSwitchOn == true) {}
    }
  }, function (formik) {
    return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(Animatable.View, {
      ref: containerRef,
      duration: 1000,
      animation: "slideInDown",
      style: {
        height: 240,
        backgroundColor: paperColor.primary,
        justifyContent: 'center'
      }
    }, _react.default.createElement(_reactNative.View, {
      style: {
        justifyContent: 'center',
        alignItems: 'center'
      }
    }, _react.default.createElement(Animatable.View, {
      style: {
        height: 200,
        justifyContent: 'center',
        alignItems: 'center'
      },
      ref: logoRef
    }, _react.default.createElement(_reactNativeFastImage.default, {
      style: {
        width: 100,
        height: 80
      },
      source: {
        uri: 'http://tranhuuthang.com/app/logo.png'
      },
      resizeMode: "contain"
    }), _react.default.createElement(_reactNative.Text, {
      style: {
        color: 'white',
        fontWeight: '700',
        fontSize: 20
      }
    }, "SHOP KATSU - The Zoo"), _react.default.createElement(_reactNative.View, {
      height: 4
    }), _react.default.createElement(_reactNative.Text, {
      style: {
        color: 'white',
        fontWeight: '700'
      }
    }, "Buy everything with you need..."), _react.default.createElement(_reactNative.Text, {
      style: {
        color: 'white',
        fontWeight: '700',
        textAlign: 'center'
      }
    }, _react.default.createElement(_reactNative.Text, null, "Tr\u1EA7n H\u1EEFu Th\u1EAFng (Nh\xF3m tr\u01B0\u1EDFng),"), _react.default.createElement(_reactNative.Text, null, "Nguy\u1EC5n Xu\xE2n Ph\xE1t ,"), _react.default.createElement(_reactNative.Text, null, "V\xF5 Th\u1ECB Thu Ph\u01B0\u01A1ng "))))), _react.default.createElement(_reactNative.View, {
      style: {
        alignItems: 'center',
        padding: 16,
        paddingTop: 36
      }
    }, _react.default.createElement(_reactNativePaper.Headline, {
      style: {
        color: paperColor.primary,
        fontWeight: '400'
      }
    }, "\u0110\u0102NG NH\u1EACP")), _react.default.createElement(_reactNative.View, {
      style: {
        flex: 0,
        justifyContent: 'flex-start',
        padding: 16
      }
    }, _react.default.createElement(_Texbox.default, {
      name: "email",
      autoCapitalize: "none",
      iconName: "email",
      disabled: loading,
      placeholder: "Nh\u1EADp email c\u1EE7a b\u1EA1n ",
      containerStyle: {
        borderWidth: 0,
        backgroundColor: 'white'
      },
      inputContainerStyle: {
        borderBottomWidth: 1.5
      },
      leftIconContainerStyle: {
        marginLeft: 12
      },
      onBlur: function onBlur() {
        formik.handleBlur('email'), setIsSwitchOn(false);
      },
      onChangeText: formik.handleChange('email'),
      value: formik.values.email
    }), _react.default.createElement(_reactNative.View, {
      height: 16
    }), _react.default.createElement(_Texbox.default, {
      name: "password",
      iconName: "lock",
      secureTextEntry: true,
      disabled: loading,
      placeholder: "M\u1EADt kh\u1EA9u",
      containerStyle: {
        borderWidth: 0,
        backgroundColor: 'white'
      },
      inputContainerStyle: {
        borderBottomWidth: 1.5
      },
      leftIconContainerStyle: {
        marginLeft: 12
      },
      onBlur: function onBlur() {
        formik.handleBlur('password');
      },
      onChangeText: formik.handleChange('password'),
      value: formik.values.password
    }), _react.default.createElement(_reactNative.View, {
      style: {
        flexDirection: 'row',
        justifyContent: 'space-between'
      }
    }, _react.default.createElement(_reactNativePaper.TouchableRipple, {
      style: {
        alignSelf: 'center'
      },
      onPress: function onPress() {
        setIsSwitchOn(true);
      }
    }, _react.default.createElement(_reactNative.Text, {
      style: {
        alignSelf: 'center',
        paddingHorizontal: 10
      }
    }, "L\u01B0u m\u1EADt kh\u1EA9u:")), _react.default.createElement(_reactNativePaper.Switch, {
      style: {
        alignSelf: 'center',
        marginLeft: -80
      },
      value: formik.values.email && formik.values.password ? isSwitchOn : null,
      color: "#a55eea",
      onValueChange: function onValueChange() {
        setIsSwitchOn(false);

        if (isSwitchOn == true) {
          AsyncStorage.clear();
        } else {
          setIsSwitchOn(true);
        }
      }
    }), _react.default.createElement(_reactNative.View, {
      style: {
        alignItems: 'flex-end',
        marginBottom: 12,
        marginTop: 12
      }
    }, _react.default.createElement(_reactNativePaper.TouchableRipple, {
      onPress: function onPress() {
        navigation.navigate('ForgotPasswordScreen');
      }
    }, _react.default.createElement(_reactNative.Text, {
      style: {
        color: _color.default.PRIMARY_FONT
      }
    }, "Qu\xEAn m\u1EADt kh\u1EA9u?")))), signedInUser.error && _react.default.createElement(_reactNative.Text, {
      style: {
        color: 'red',
        textAlign: 'center'
      }
    }, signedInUser.error == 'auth/user-not-found' ? 'Tài khoản gmail không tồn tại' : 'Mật khẩu không chính xác')), _react.default.createElement(Animatable.View, {
      animation: "slideInUp",
      duration: 1000,
      style: {
        flex: 1,
        padding: 16,
        justifyContent: 'flex-end'
      }
    }, _react.default.createElement(_reactNativePaper.Button, {
      disabled: loading,
      loading: loading,
      labelStyle: {
        fontSize: 18
      },
      contentStyle: {
        height: 48,
        alignItems: 'center',
        justifyContent: 'center'
      },
      style: {
        elevation: 0
      },
      uppercase: false,
      icon: "key",
      mode: "contained",
      onPress: formik.handleSubmit,
      dark: true
    }, loading ? 'Đang đăng nhập ...' : 'Đăng nhập'), _react.default.createElement(Touch, {
      onPress: function onPress() {
        navigation.navigate('RegisterScreen');
      }
    }, _react.default.createElement(_reactNative.View, {
      style: {
        alignItems: 'center',
        padding: 12
      }
    }, _react.default.createElement(_reactNative.Text, {
      style: {
        color: _color.default.PRIMARY_FONT
      }
    }, "B\u1EA1n ch\u01B0a c\xF3 t\xE0i kho\u1EA3n? \u0110\u0103ng k\xFD")))));
  }))));
};

var _default = SignIn;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,