e68438a41b0a2539dd67b6540b8c95a2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Card = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _config = require("../config");

var _CardTitle = _interopRequireDefault(require("./CardTitle"));

var _CardDivider = _interopRequireDefault(require("./CardDivider"));

var _CardImage = _interopRequireDefault(require("./CardImage"));

var _CardFeaturedTitle = _interopRequireDefault(require("./CardFeaturedTitle"));

var _CardFeaturedSubtitle = _interopRequireDefault(require("./CardFeaturedSubtitle"));

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Card = function Card(props) {
  var children = props.children,
      containerStyle = props.containerStyle,
      wrapperStyle = props.wrapperStyle,
      theme = props.theme,
      attributes = __rest(props, ["children", "containerStyle", "wrapperStyle", "theme"]);

  return _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, attributes, {
    style: _reactNative.StyleSheet.flatten([Object.assign({
      backgroundColor: theme.colors.white,
      borderWidth: 1,
      padding: 15,
      margin: 15,
      marginBottom: 0,
      borderColor: theme.colors.grey5
    }, _reactNative.Platform.select({
      android: {
        elevation: 1
      },
      default: {
        shadowColor: 'rgba(0,0,0, .2)',
        shadowOffset: {
          height: 0,
          width: 0
        },
        shadowOpacity: 1,
        shadowRadius: 1
      }
    })), containerStyle && containerStyle])
  }), _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.wrapper, wrapperStyle && wrapperStyle])
  }, children));
};

exports.Card = Card;

var styles = _reactNative.StyleSheet.create({
  wrapper: {
    backgroundColor: 'transparent'
  }
});

var ThemedCard = Object.assign((0, _config.withTheme)(Card, 'Card'), {
  Divider: _CardDivider.default,
  Image: _CardImage.default,
  Title: _CardTitle.default,
  FeaturedTitle: _CardFeaturedTitle.default,
  FeaturedSubtitle: _CardFeaturedSubtitle.default
});
var _default = ThemedCard;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhcmQuanMiXSwibmFtZXMiOlsiX19yZXN0IiwicyIsImUiLCJ0IiwicCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJpIiwibGVuZ3RoIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJDYXJkIiwicHJvcHMiLCJjaGlsZHJlbiIsImNvbnRhaW5lclN0eWxlIiwid3JhcHBlclN0eWxlIiwidGhlbWUiLCJhdHRyaWJ1dGVzIiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJhc3NpZ24iLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb2xvcnMiLCJ3aGl0ZSIsImJvcmRlcldpZHRoIiwicGFkZGluZyIsIm1hcmdpbiIsIm1hcmdpbkJvdHRvbSIsImJvcmRlckNvbG9yIiwiZ3JleTUiLCJQbGF0Zm9ybSIsInNlbGVjdCIsImFuZHJvaWQiLCJlbGV2YXRpb24iLCJkZWZhdWx0Iiwic2hhZG93Q29sb3IiLCJzaGFkb3dPZmZzZXQiLCJoZWlnaHQiLCJ3aWR0aCIsInNoYWRvd09wYWNpdHkiLCJzaGFkb3dSYWRpdXMiLCJzdHlsZXMiLCJ3cmFwcGVyIiwiY3JlYXRlIiwiVGhlbWVkQ2FyZCIsIkRpdmlkZXIiLCJDYXJkRGl2aWRlciIsIkltYWdlIiwiQ2FyZEltYWdlIiwiVGl0bGUiLCJDYXJkVGl0bGUiLCJGZWF0dXJlZFRpdGxlIiwiQ2FyZEZlYXR1cmVkVGl0bGUiLCJGZWF0dXJlZFN1YnRpdGxlIiwiQ2FyZEZlYXR1cmVkU3VidGl0bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVdBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQWxCQSxJQUFJQSxNQUFNLEdBQUksUUFBUSxLQUFLQSxNQUFkLElBQXlCLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUNsRCxNQUFJQyxDQUFDLEdBQUcsRUFBUjs7QUFDQSxPQUFLLElBQUlDLENB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QVI7QUFxQkgsQ0F2QkQ7Ozs7QUF3QkEsSUFBTTRCLE1BQU0sR0FBR3ZCLHdCQUFXeUIsTUFBWCxDQUFrQjtBQUM3QkQsRUFBQUEsT0FBTyxFQUFFO0FBQ0xyQixJQUFBQSxlQUFlLEVBQUU7QUFEWjtBQURvQixDQUFsQixDQUFmOztBQU1BLElBQU11QixVQUFVLEdBQUcxQyxNQUFNLENBQUNrQixNQUFQLENBQWMsdUJBQVVULElBQVYsRUFBZ0IsTUFBaEIsQ0FBZCxFQUF1QztBQUN0RGtDLEVBQUFBLE9BQU8sRUFBRUMsb0JBRDZDO0FBRXREQyxFQUFBQSxLQUFLLEVBQUVDLGtCQUYrQztBQUd0REMsRUFBQUEsS0FBSyxFQUFFQyxrQkFIK0M7QUFJdERDLEVBQUFBLGFBQWEsRUFBRUMsMEJBSnVDO0FBS3REQyxFQUFBQSxnQkFBZ0IsRUFBRUM7QUFMb0MsQ0FBdkMsQ0FBbkI7ZUFPZVYsVSIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBWaWV3LCBQbGF0Zm9ybSwgU3R5bGVTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IENhcmRUaXRsZSBmcm9tICcuL0NhcmRUaXRsZSc7XG5pbXBvcnQgQ2FyZERpdmlkZXIgZnJvbSAnLi9DYXJkRGl2aWRlcic7XG5pbXBvcnQgQ2FyZEltYWdlIGZyb20gJy4vQ2FyZEltYWdlJztcbmltcG9ydCBDYXJkRmVhdHVyZWRUaXRsZSBmcm9tICcuL0NhcmRGZWF0dXJlZFRpdGxlJztcbmltcG9ydCBDYXJkRmVhdHVyZWRTdWJ0aXRsZSBmcm9tICcuL0NhcmRGZWF0dXJlZFN1YnRpdGxlJztcbmNvbnN0IENhcmQgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCBjb250YWluZXJTdHlsZSwgd3JhcHBlclN0eWxlLCB0aGVtZSB9ID0gcHJvcHMsIGF0dHJpYnV0ZXMgPSBfX3Jlc3QocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY29udGFpbmVyU3R5bGVcIiwgXCJ3cmFwcGVyU3R5bGVcIiwgXCJ0aGVtZVwiXSk7XG4gICAgcmV0dXJuICg8VmlldyB7Li4uYXR0cmlidXRlc30gc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgIE9iamVjdC5hc3NpZ24oeyBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9ycy53aGl0ZSwgYm9yZGVyV2lkdGg6IDEsIHBhZGRpbmc6IDE1LCBtYXJnaW46IDE1LCBtYXJnaW5Cb3R0b206IDAsIGJvcmRlckNvbG9yOiB0aGVtZS5jb2xvcnMuZ3JleTUgfSwgUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgICAgICAgIGFuZHJvaWQ6IHtcbiAgICAgICAgICAgICAgICBlbGV2YXRpb246IDEsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgwLDAsMCwgLjIpJyxcbiAgICAgICAgICAgICAgICBzaGFkb3dPZmZzZXQ6IHsgaGVpZ2h0OiAwLCB3aWR0aDogMCB9LFxuICAgICAgICAgICAgICAgIHNoYWRvd09wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgc2hhZG93UmFkaXVzOiAxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSkpLFxuICAgICAgICBjb250YWluZXJTdHlsZSAmJiBjb250YWluZXJTdHlsZSxcbiAgICBdKX0+XG4gICAgICA8VmlldyBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgc3R5bGVzLndyYXBwZXIsXG4gICAgICAgIHdyYXBwZXJTdHlsZSAmJiB3cmFwcGVyU3R5bGUsXG4gICAgXSl9PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L1ZpZXc+XG4gICAgPC9WaWV3Pik7XG59O1xuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIHdyYXBwZXI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIH0sXG59KTtcbmV4cG9ydCB7IENhcmQgfTtcbmNvbnN0IFRoZW1lZENhcmQgPSBPYmplY3QuYXNzaWduKHdpdGhUaGVtZShDYXJkLCAnQ2FyZCcpLCB7XG4gICAgRGl2aWRlcjogQ2FyZERpdmlkZXIsXG4gICAgSW1hZ2U6IENhcmRJbWFnZSxcbiAgICBUaXRsZTogQ2FyZFRpdGxlLFxuICAgIEZlYXR1cmVkVGl0bGU6IENhcmRGZWF0dXJlZFRpdGxlLFxuICAgIEZlYXR1cmVkU3VidGl0bGU6IENhcmRGZWF0dXJlZFN1YnRpdGxlLFxufSk7XG5leHBvcnQgZGVmYXVsdCBUaGVtZWRDYXJkO1xuIl19