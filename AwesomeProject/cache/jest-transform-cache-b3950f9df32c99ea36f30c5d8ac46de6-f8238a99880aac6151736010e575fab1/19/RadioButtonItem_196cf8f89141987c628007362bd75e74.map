{"version":3,"sources":["RadioButtonItem.tsx"],"names":["RadioButtonItem","theme","colors","mode","radioButtonProps","value","disabled","status","color","uncheckedColor","radioButton","context","onPress","onValueChange","testID","styles","text","RadioButtonItemWithTheme","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","label","fontSize"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { RadioButton } from './RadioButtonElements';\nimport Text from '../Typography/Text';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport RadioButtonIOS from './RadioButtonIOS';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\n   * Left undefined `<RadioButton />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme: { colors },\n  accessibilityLabel,\n  testID,\n  mode,\n}: Props) => {\n  const radioButtonProps = { value, disabled, status, color, uncheckedColor };\n  let radioButton: any;\n\n  if (mode === 'android') {\n    radioButton = <RadioButtonAndroid {...radioButtonProps} />;\n  } else if (mode === 'ios') {\n    radioButton = <RadioButtonIOS {...radioButtonProps} />;\n  } else {\n    radioButton = <RadioButton {...radioButtonProps} />;\n  }\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        return (\n          <TouchableRipple\n            onPress={\n              disabled\n                ? undefined\n                : () =>\n                    handlePress({\n                      onPress: onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    })\n            }\n            accessibilityLabel={accessibilityLabel}\n            testID={testID}\n          >\n            <View style={[styles.container, style]} pointerEvents=\"none\">\n              <Text style={[styles.label, { color: colors.text }, labelStyle]}>\n                {label}\n              </Text>\n              {radioButton}\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nconst RadioButtonItemWithTheme = withTheme(RadioButtonItem);\n// @component-docs ignore-next-line\nexport { RadioButtonItemWithTheme as RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n  },\n});\n"]}