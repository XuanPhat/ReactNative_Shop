cda71814974d01fdde88617ffe9716cf
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RadioButtonItem = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _theming = require("../../core/theming");

var _RadioButtonGroup = require("./RadioButtonGroup");

var _utils = require("./utils");

var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));

var _RadioButtonElements = require("./RadioButtonElements");

var _Text = _interopRequireDefault(require("../Typography/Text"));

var _RadioButtonAndroid = _interopRequireDefault(require("./RadioButtonAndroid"));

var _RadioButtonIOS = _interopRequireDefault(require("./RadioButtonIOS"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var RadioButtonItem = function RadioButtonItem(_ref) {
  var value = _ref.value,
      label = _ref.label,
      style = _ref.style,
      labelStyle = _ref.labelStyle,
      onPress = _ref.onPress,
      disabled = _ref.disabled,
      color = _ref.color,
      uncheckedColor = _ref.uncheckedColor,
      status = _ref.status,
      colors = _ref.theme.colors,
      accessibilityLabel = _ref.accessibilityLabel,
      testID = _ref.testID,
      mode = _ref.mode;
  var radioButtonProps = {
    value: value,
    disabled: disabled,
    status: status,
    color: color,
    uncheckedColor: uncheckedColor
  };
  var radioButton;

  if (mode === 'android') {
    radioButton = React.createElement(_RadioButtonAndroid.default, radioButtonProps);
  } else if (mode === 'ios') {
    radioButton = React.createElement(_RadioButtonIOS.default, radioButtonProps);
  } else {
    radioButton = React.createElement(_RadioButtonElements.RadioButton, radioButtonProps);
  }

  return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer, null, function (context) {
    return React.createElement(_TouchableRipple.default, {
      onPress: disabled ? undefined : function () {
        return (0, _utils.handlePress)({
          onPress: onPress,
          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,
          value: value
        });
      },
      accessibilityLabel: accessibilityLabel,
      testID: testID
    }, React.createElement(_reactNative.View, {
      style: [styles.container, style],
      pointerEvents: "none"
    }, React.createElement(_Text.default, {
      style: [styles.label, {
        color: colors.text
      }, labelStyle]
    }, label), radioButton));
  });
};

RadioButtonItem.displayName = 'RadioButton.Item';

var _default = (0, _theming.withTheme)(RadioButtonItem);

exports.default = _default;
var RadioButtonItemWithTheme = (0, _theming.withTheme)(RadioButtonItem);
exports.RadioButtonItem = RadioButtonItemWithTheme;

var styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 8,
    paddingHorizontal: 16
  },
  label: {
    fontSize: 16
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,