4ca4eff6dbb2e8309e5613d2ea474230
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CheckboxItem = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _CheckboxElements = require("./CheckboxElements");

var _Text = _interopRequireDefault(require("../Typography/Text"));

var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));

var _theming = require("../../core/theming");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var CheckboxItem = function CheckboxItem(_ref) {
  var style = _ref.style,
      status = _ref.status,
      label = _ref.label,
      onPress = _ref.onPress,
      labelStyle = _ref.labelStyle,
      theme = _ref.theme,
      testID = _ref.testID,
      mode = _ref.mode,
      props = _objectWithoutProperties(_ref, ["style", "status", "label", "onPress", "labelStyle", "theme", "testID", "mode"]);

  var checkboxProps = _objectSpread(_objectSpread({}, props), {}, {
    status: status,
    theme: theme
  });

  var checkbox;

  if (mode === 'android') {
    checkbox = React.createElement(_CheckboxElements.CheckboxAndroid, checkboxProps);
  } else if (mode === 'ios') {
    checkbox = React.createElement(_CheckboxElements.CheckboxIOS, checkboxProps);
  } else {
    checkbox = React.createElement(_CheckboxElements.Checkbox, checkboxProps);
  }

  return React.createElement(_TouchableRipple.default, {
    onPress: onPress,
    testID: testID
  }, React.createElement(_reactNative.View, {
    style: [styles.container, style],
    pointerEvents: "none"
  }, React.createElement(_Text.default, {
    style: [styles.label, {
      color: theme.colors.primary
    }, labelStyle]
  }, label), checkbox));
};

CheckboxItem.displayName = 'Checkbox.Item';

var _default = (0, _theming.withTheme)(CheckboxItem);

exports.default = _default;
var CheckboxItemWithTheme = (0, _theming.withTheme)(CheckboxItem);
exports.CheckboxItem = CheckboxItemWithTheme;

var styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 8,
    paddingHorizontal: 16
  },
  label: {
    fontSize: 16
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94SXRlbS50c3giXSwibmFtZXMiOlsiQ2hlY2tib3hJdGVtIiwibW9kZSIsInByb3BzIiwiY2hlY2tib3hQcm9wcyIsInN0YXR1cyIsInRoZW1lIiwiY2hlY2tib3giLCJ0ZXN0SUQiLCJzdHlsZXMiLCJjb2xvciIsInByaW1hcnkiLCJDaGVja2JveEl0ZW1XaXRoVGhlbWUiLCJjb250YWluZXIiLCJmbGV4RGlyZWN0aW9uIiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwicGFkZGluZ1ZlcnRpY2FsIiwicGFkZGluZ0hvcml6b250YWwiLCJsYWJlbCIsImZvbnRTaXplIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQSxLQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBRUEsSUFBQSxZQUFBLEdBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQTs7QUFRQSxJQUFBLGlCQUFBLEdBQUEsT0FBQSxDQUFBLG9CQUFBLENBQUE7O0FBQ0EsSUFBQSxLQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsb0JBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsZ0JBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxvQ0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxRQUFBLEdBQUEsT0FBQSxDQUFBLG9CQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxRUEsSUFBTUEsWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBQSxJQUFBLEVBVVI7QUFBQSxNQVZTLEtBVVQsR0FBQSxJQUFBLENBVlMsS0FVVDtBQUFBLE1BVlMsTUFVVCxHQUFBLElBQUEsQ0FWUyxNQVVUO0FBQUEsTUFWUyxLQVVULEdBQUEsSUFBQSxDQVZTLEtBVVQ7QUFBQSxNQVZTLE9BVVQsR0FBQSxJQUFBLENBVlMsT0FVVDtBQUFBLE1BVlMsVUFVVCxHQUFBLElBQUEsQ0FWUyxVQVVUO0FBQUEsTUFWUyxLQVVULEdBQUEsSUFBQSxDQVZTLEtBVVQ7QUFBQSxNQVZTLE1BVVQsR0FBQSxJQUFBLENBVlMsTUFVVDtBQUFBLE1BRlhDLElBRVcsR0FBQSxJQUFBLENBRlhBLElBRVc7QUFBQSxNQURSQyxLQUNRLEdBQUEsd0JBQUEsQ0FBQSxJQUFBLEVBQUEsQ0FBQSxPQUFBLEVBQUEsUUFBQSxFQUFBLE9BQUEsRUFBQSxTQUFBLEVBQUEsWUFBQSxFQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsTUFBQSxDQUFBLENBQUE7O0FBQ1gsTUFBTUMsYUFBYSxHQUFBLGFBQUEsQ0FBQSxhQUFBLENBQUEsRUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQTtBQUFlQyxJQUFBQSxNQUFmLEVBQWVBLE1BQWY7QUFBdUJDLElBQUFBLEtBQUFBLEVBQUFBO0FBQXZCLEdBQUEsQ0FBbkI7O0FBQ0EsTUFBQSxRQUFBOztBQUVBLE1BQUlKLElBQUksS0FBUixTQUFBLEVBQXdCO0FBQ3RCSyxJQUFBQSxRQUFRLEdBQUcsS0FBQSxDQUFBLGFBQUEsQ0FBQyxpQkFBQSxDQUFELGVBQUEsRUFBWEEsYUFBVyxDQUFYQTtBQURGLEdBQUEsTUFFTyxJQUFJTCxJQUFJLEtBQVIsS0FBQSxFQUFvQjtBQUN6QkssSUFBQUEsUUFBUSxHQUFHLEtBQUEsQ0FBQSxhQUFBLENBQUMsaUJBQUEsQ0FBRCxXQUFBLEVBQVhBLGFBQVcsQ0FBWEE7QUFESyxHQUFBLE1BRUE7QUFDTEEsSUFBQUEsUUFBUSxHQUFHLEtBQUEsQ0FBQSxhQUFBLENBQUMsaUJBQUEsQ0FBRCxRQUFBLEVBQVhBLGFBQVcsQ0FBWEE7QUFDRDs7QUFFRCxTQUNFLEtBQUEsQ0FBQSxhQUFBLENBQUMsZ0JBQUEsQ0FBRCxPQUFBLEVBQUE7QUFBaUIsSUFBQSxPQUFPLEVBQXhCLE9BQUE7QUFBbUMsSUFBQSxNQUFNLEVBQUVDO0FBQTNDLEdBQUEsRUFDRSxLQUFBLENBQUEsYUFBQSxDQUFDLFlBQUEsQ0FBRCxJQUFBLEVBQUE7QUFBTSxJQUFBLEtBQUssRUFBRSxDQUFDQyxNQUFNLENBQVAsU0FBQSxFQUFiLEtBQWEsQ0FBYjtBQUF3QyxJQUFBLGFBQWEsRUFBQztBQUF0RCxHQUFBLEVBQ0UsS0FBQSxDQUFBLGFBQUEsQ0FBQyxLQUFBLENBQUQsT0FBQSxFQUFBO0FBQ0UsSUFBQSxLQUFLLEVBQUUsQ0FBQ0EsTUFBTSxDQUFQLEtBQUEsRUFBZTtBQUFFQyxNQUFBQSxLQUFLLEVBQUVKLEtBQUssQ0FBTEEsTUFBQUEsQ0FBYUs7QUFBdEIsS0FBZixFQUFBLFVBQUE7QUFEVCxHQUFBLEVBREYsS0FDRSxDQURGLEVBRkosUUFFSSxDQURGLENBREY7QUF0QkYsQ0FBQTs7QUFvQ0FWLFlBQVksQ0FBWkEsV0FBQUEsR0FBQUEsZUFBQUE7O2VBRWUsQ0FBQSxHQUFBLFFBQUEsQ0FBQSxTQUFBLEVBQUEsWUFBQSxDOzs7QUFHZixJQUFNVyxxQkFBcUIsR0FBRyxDQUFBLEdBQUEsUUFBQSxDQUFBLFNBQUEsRUFBOUIsWUFBOEIsQ0FBOUI7OztBQUlBLElBQU1ILE1BQU0sR0FBRyxZQUFBLENBQUEsVUFBQSxDQUFBLE1BQUEsQ0FBa0I7QUFDL0JJLEVBQUFBLFNBQVMsRUFBRTtBQUNUQyxJQUFBQSxhQUFhLEVBREosS0FBQTtBQUVUQyxJQUFBQSxVQUFVLEVBRkQsUUFBQTtBQUdUQyxJQUFBQSxjQUFjLEVBSEwsZUFBQTtBQUlUQyxJQUFBQSxlQUFlLEVBSk4sQ0FBQTtBQUtUQyxJQUFBQSxpQkFBaUIsRUFBRTtBQUxWLEdBRG9CO0FBUS9CQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEMsSUFBQUEsUUFBUSxFQUFFO0FBREw7QUFSd0IsQ0FBbEIsQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtcbiAgU3R5bGVQcm9wLFxuICBTdHlsZVNoZWV0LFxuICBUZXh0U3R5bGUsXG4gIFZpZXcsXG4gIFZpZXdTdHlsZSxcbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuaW1wb3J0IHsgQ2hlY2tib3gsIENoZWNrYm94QW5kcm9pZCwgQ2hlY2tib3hJT1MgfSBmcm9tICcuL0NoZWNrYm94RWxlbWVudHMnO1xuaW1wb3J0IFRleHQgZnJvbSAnLi4vVHlwb2dyYXBoeS9UZXh0JztcbmltcG9ydCBUb3VjaGFibGVSaXBwbGUgZnJvbSAnLi4vVG91Y2hhYmxlUmlwcGxlL1RvdWNoYWJsZVJpcHBsZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi8uLi9jb3JlL3RoZW1pbmcnO1xuXG50eXBlIFByb3BzID0ge1xuICAvKipcbiAgICogU3RhdHVzIG9mIGNoZWNrYm94LlxuICAgKi9cbiAgc3RhdHVzOiAnY2hlY2tlZCcgfCAndW5jaGVja2VkJyB8ICdpbmRldGVybWluYXRlJztcbiAgLyoqXG4gICAqIFdoZXRoZXIgY2hlY2tib3ggaXMgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBMYWJlbCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIGl0ZW0uXG4gICAqL1xuICBsYWJlbDogc3RyaW5nO1xuICAvKipcbiAgICogRnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBwcmVzcy5cbiAgICovXG4gIG9uUHJlc3M/OiAoKSA9PiB2b2lkO1xuICAvKipcbiAgICogQ3VzdG9tIGNvbG9yIGZvciB1bmNoZWNrZWQgY2hlY2tib3guXG4gICAqL1xuICB1bmNoZWNrZWRDb2xvcj86IHN0cmluZztcbiAgLyoqXG4gICAqIEN1c3RvbSBjb2xvciBmb3IgY2hlY2tib3guXG4gICAqL1xuICBjb2xvcj86IHN0cmluZztcbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgc3R5bGVzIGZvciBjb250YWluZXIgVmlldy5cbiAgICovXG4gIHN0eWxlPzogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG4gIC8qKlxuICAgKiBTdHlsZSB0aGF0IGlzIHBhc3NlZCB0byBMYWJlbCBlbGVtZW50LlxuICAgKi9cbiAgbGFiZWxTdHlsZT86IFN0eWxlUHJvcDxUZXh0U3R5bGU+O1xuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICB0aGVtZTogUmVhY3ROYXRpdmVQYXBlci5UaGVtZTtcbiAgLyoqXG4gICAqIHRlc3RJRCB0byBiZSB1c2VkIG9uIHRlc3RzLlxuICAgKi9cbiAgdGVzdElEPzogc3RyaW5nO1xuICAvKipcbiAgICogV2hldGhlciBgPENoZWNrYm94LkFuZHJvaWQgLz5gIG9yIGA8Q2hlY2tib3guSU9TIC8+YCBzaG91bGQgYmUgdXNlZC5cbiAgICogTGVmdCB1bmRlZmluZWQgYDxDaGVja2JveCAvPmAgd2lsbCBiZSB1c2VkLlxuICAgKi9cbiAgbW9kZT86ICdhbmRyb2lkJyB8ICdpb3MnO1xufTtcblxuLyoqXG4gKiBDaGVja2JveC5JdGVtIGFsbG93cyB5b3UgdG8gcHJlc3MgdGhlIHdob2xlIHJvdyAoaXRlbSkgaW5zdGVhZCBvZiBvbmx5IHRoZSBDaGVja2JveC5cbiAqXG4gKiAjIyBVc2FnZVxuICogYGBganNcbiAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbiAqIGltcG9ydCB7IFZpZXcgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuICogaW1wb3J0IHsgQ2hlY2tib3ggfSBmcm9tICdyZWFjdC1uYXRpdmUtcGFwZXInO1xuICpcbiAqIGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4gKFxuICogICA8Vmlldz5cbiAqICAgICA8Q2hlY2tib3guSXRlbSBsYWJlbD1cIkl0ZW1cIiBzdGF0dXM9XCJjaGVja2VkXCIgLz5cbiAqICAgPC9WaWV3PlxuICogKTtcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBNeUNvbXBvbmVudDtcbiAqYGBgXG4gKi9cblxuY29uc3QgQ2hlY2tib3hJdGVtID0gKHtcbiAgc3R5bGUsXG4gIHN0YXR1cyxcbiAgbGFiZWwsXG4gIG9uUHJlc3MsXG4gIGxhYmVsU3R5bGUsXG4gIHRoZW1lLFxuICB0ZXN0SUQsXG4gIG1vZGUsXG4gIC4uLnByb3BzXG59OiBQcm9wcykgPT4ge1xuICBjb25zdCBjaGVja2JveFByb3BzID0geyAuLi5wcm9wcywgc3RhdHVzLCB0aGVtZSB9O1xuICBsZXQgY2hlY2tib3g7XG5cbiAgaWYgKG1vZGUgPT09ICdhbmRyb2lkJykge1xuICAgIGNoZWNrYm94ID0gPENoZWNrYm94QW5kcm9pZCB7Li4uY2hlY2tib3hQcm9wc30gLz47XG4gIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2lvcycpIHtcbiAgICBjaGVja2JveCA9IDxDaGVja2JveElPUyB7Li4uY2hlY2tib3hQcm9wc30gLz47XG4gIH0gZWxzZSB7XG4gICAgY2hlY2tib3ggPSA8Q2hlY2tib3ggey4uLmNoZWNrYm94UHJvcHN9IC8+O1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8VG91Y2hhYmxlUmlwcGxlIG9uUHJlc3M9e29uUHJlc3N9IHRlc3RJRD17dGVzdElEfT5cbiAgICAgIDxWaWV3IHN0eWxlPXtbc3R5bGVzLmNvbnRhaW5lciwgc3R5bGVdfSBwb2ludGVyRXZlbnRzPVwibm9uZVwiPlxuICAgICAgICA8VGV4dFxuICAgICAgICAgIHN0eWxlPXtbc3R5bGVzLmxhYmVsLCB7IGNvbG9yOiB0aGVtZS5jb2xvcnMucHJpbWFyeSB9LCBsYWJlbFN0eWxlXX1cbiAgICAgICAgPlxuICAgICAgICAgIHtsYWJlbH1cbiAgICAgICAgPC9UZXh0PlxuICAgICAgICB7Y2hlY2tib3h9XG4gICAgICA8L1ZpZXc+XG4gICAgPC9Ub3VjaGFibGVSaXBwbGU+XG4gICk7XG59O1xuXG5DaGVja2JveEl0ZW0uZGlzcGxheU5hbWUgPSAnQ2hlY2tib3guSXRlbSc7XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShDaGVja2JveEl0ZW0pO1xuXG4vLyBAY29tcG9uZW50LWRvY3MgaWdub3JlLW5leHQtbGluZVxuY29uc3QgQ2hlY2tib3hJdGVtV2l0aFRoZW1lID0gd2l0aFRoZW1lKENoZWNrYm94SXRlbSk7XG4vLyBAY29tcG9uZW50LWRvY3MgaWdub3JlLW5leHQtbGluZVxuZXhwb3J0IHsgQ2hlY2tib3hJdGVtV2l0aFRoZW1lIGFzIENoZWNrYm94SXRlbSB9O1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGNvbnRhaW5lcjoge1xuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgcGFkZGluZ1ZlcnRpY2FsOiA4LFxuICAgIHBhZGRpbmdIb3Jpem9udGFsOiAxNixcbiAgfSxcbiAgbGFiZWw6IHtcbiAgICBmb250U2l6ZTogMTYsXG4gIH0sXG59KTtcbiJdfQ==