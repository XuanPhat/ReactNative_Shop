{"version":3,"sources":["CheckboxItem.tsx"],"names":["CheckboxItem","mode","props","checkboxProps","status","theme","checkbox","testID","styles","color","primary","CheckboxItemWithTheme","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","label","fontSize"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { Checkbox, CheckboxAndroid, CheckboxIOS } from './CheckboxElements';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme };\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  return (\n    <TouchableRipple onPress={onPress} testID={testID}>\n      <View style={[styles.container, style]} pointerEvents=\"none\">\n        <Text\n          style={[styles.label, { color: theme.colors.primary }, labelStyle]}\n        >\n          {label}\n        </Text>\n        {checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n  },\n});\n"]}