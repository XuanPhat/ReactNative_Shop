bbf5748c732c271d5fb6b330d337ffb7
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _color = _interopRequireDefault(require("color"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));

var _MaterialCommunityIcon = _interopRequireDefault(require("../MaterialCommunityIcon"));

var _Text = _interopRequireDefault(require("../Typography/Text"));

var _theming = require("../../core/theming");

var _ListAccordionGroup = require("./ListAccordionGroup");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var ListAccordion = function ListAccordion(_ref) {
  var left = _ref.left,
      title = _ref.title,
      description = _ref.description,
      children = _ref.children,
      theme = _ref.theme,
      titleStyle = _ref.titleStyle,
      descriptionStyle = _ref.descriptionStyle,
      _ref$titleNumberOfLin = _ref.titleNumberOfLines,
      titleNumberOfLines = _ref$titleNumberOfLin === void 0 ? 1 : _ref$titleNumberOfLin,
      _ref$descriptionNumbe = _ref.descriptionNumberOfLines,
      descriptionNumberOfLines = _ref$descriptionNumbe === void 0 ? 2 : _ref$descriptionNumbe,
      style = _ref.style,
      id = _ref.id,
      testID = _ref.testID,
      onPress = _ref.onPress,
      expandedProp = _ref.expanded;

  var _React$useState = React.useState(expandedProp || false),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      expanded = _React$useState2[0],
      setExpanded = _React$useState2[1];

  var handlePressAction = function handlePressAction() {
    onPress === null || onPress === void 0 ? void 0 : onPress();

    if (expandedProp === undefined) {
      setExpanded(function (expanded) {
        return !expanded;
      });
    }
  };

  var titleColor = (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();
  var descriptionColor = (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
  var expandedInternal = expandedProp !== undefined ? expandedProp : expanded;
  var groupContext = React.useContext(_ListAccordionGroup.ListAccordionGroupContext);

  if (groupContext !== null && !id) {
    throw new Error('List.Accordion is used inside a List.AccordionGroup without specifying an id prop.');
  }

  var isExpanded = groupContext ? groupContext.expandedId === id : expandedInternal;
  var handlePress = groupContext && id !== undefined ? function () {
    return groupContext.onAccordionPress(id);
  } : handlePressAction;
  return React.createElement(_reactNative.View, null, React.createElement(_TouchableRipple.default, {
    style: [styles.container, style],
    onPress: handlePress,
    accessibilityTraits: "button",
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    testID: testID
  }, React.createElement(_reactNative.View, {
    style: styles.row,
    pointerEvents: "none"
  }, left ? left({
    color: isExpanded ? theme.colors.primary : descriptionColor
  }) : null, React.createElement(_reactNative.View, {
    style: [styles.item, styles.content]
  }, React.createElement(_Text.default, {
    selectable: false,
    numberOfLines: titleNumberOfLines,
    style: [styles.title, {
      color: isExpanded ? theme.colors.primary : titleColor
    }, titleStyle]
  }, title), description && React.createElement(_Text.default, {
    selectable: false,
    numberOfLines: descriptionNumberOfLines,
    style: [styles.description, {
      color: descriptionColor
    }, descriptionStyle]
  }, description)), React.createElement(_reactNative.View, {
    style: [styles.item, description ? styles.multiline : undefined]
  }, React.createElement(_MaterialCommunityIcon.default, {
    name: isExpanded ? 'chevron-up' : 'chevron-down',
    color: titleColor,
    size: 24,
    direction: _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr'
  })))), isExpanded ? React.Children.map(children, function (child) {
    if (left && React.isValidElement(child) && !child.props.left && !child.props.right) {
      return React.cloneElement(child, {
        style: [styles.child, child.props.style]
      });
    }

    return child;
  }) : null);
};

ListAccordion.displayName = 'List.Accordion';

var styles = _reactNative.StyleSheet.create({
  container: {
    padding: 8
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  multiline: {
    height: 40,
    alignItems: 'center',
    justifyContent: 'center'
  },
  title: {
    fontSize: 16
  },
  description: {
    fontSize: 14
  },
  item: {
    margin: 8
  },
  child: {
    paddingLeft: 64
  },
  content: {
    flex: 1,
    justifyContent: 'center'
  }
});

var _default = (0, _theming.withTheme)(ListAccordion);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,