{"version":3,"sources":["ListAccordion.tsx"],"names":["ListAccordion","titleNumberOfLines","descriptionNumberOfLines","expanded","expandedProp","React","handlePressAction","onPress","setExpanded","titleColor","theme","descriptionColor","expandedInternal","groupContext","ListAccordionGroupContext","isExpanded","handlePress","id","styles","testID","left","color","description","I18nManager","child","style","container","padding","row","flexDirection","alignItems","multiline","height","justifyContent","title","fontSize","item","margin","paddingLeft","content","flex"],"mappings":";;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAQA,IAAA,gBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,oCAAA,CAAA,CAAA;;AACA,IAAA,sBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,IAAA,mBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4GA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,OAeT;AAAA,MAfU,IAeV,QAfU,IAeV;AAAA,MAfU,KAeV,QAfU,KAeV;AAAA,MAfU,WAeV,QAfU,WAeV;AAAA,MAfU,QAeV,QAfU,QAeV;AAAA,MAfU,KAeV,QAfU,KAeV;AAAA,MAfU,UAeV,QAfU,UAeV;AAAA,MAfU,gBAeV,QAfU,gBAeV;AAAA,mCAPXC,kBAOW;AAAA,MAPXA,kBAOW,sCAfU,CAeV;AAAA,mCANXC,wBAMW;AAAA,MANXA,wBAMW,sCAfU,CAeV;AAAA,MAfU,KAeV,QAfU,KAeV;AAAA,MAfU,EAeV,QAfU,EAeV;AAAA,MAfU,MAeV,QAfU,MAeV;AAAA,MAfU,OAeV,QAfU,OAeV;AAAA,MADDE,YACC,QADXD,QACW;;AAAA,wBACqBE,KAAK,CAALA,QAAAA,CAC9BD,YAAY,IADd,KAAgCC,CADrB;AAAA;AAAA,MACL,QADK;AAAA,MACL,WADK;;AAKX,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BC,IAAAA,OAAO,KAAPA,IAAAA,IAAAA,OAAO,KAAA,KAAPA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,EAAPA;;AAEA,QAAIH,YAAY,KAAhB,SAAA,EAAgC;AAG9BI,MAAAA,WAAW,CAAEL,UAAAA,QAAD;AAAA,eAAc,CAA1BK,QAAY;AAAA,OAAD,CAAXA;AACD;AAPH,GAAA;;AAUA,MAAMC,UAAU,GAAG,CAAA,GAAA,MAAA,CAAA,OAAA,EAAMC,KAAK,CAALA,MAAAA,CAAN,IAAA,EAAA,KAAA,CAAA,IAAA,EAAA,GAAA,GAAnB,MAAmB,EAAnB;AACA,MAAMC,gBAAgB,GAAG,CAAA,GAAA,MAAA,CAAA,OAAA,EAAMD,KAAK,CAALA,MAAAA,CAAN,IAAA,EAAA,KAAA,CAAA,IAAA,EAAA,GAAA,GAAzB,MAAyB,EAAzB;AAEA,MAAME,gBAAgB,GAAGR,YAAY,KAAZA,SAAAA,GAAAA,YAAAA,GAAzB,QAAA;AAEA,MAAMS,YAAY,GAAGR,KAAK,CAALA,UAAAA,CAAiBS,mBAAAA,CAAtC,yBAAqBT,CAArB;;AACA,MAAIQ,YAAY,KAAZA,IAAAA,IAAyB,CAA7B,EAAA,EAAkC;AAChC,UAAM,IAAA,KAAA,CAAN,oFAAM,CAAN;AAGD;;AACD,MAAME,UAAU,GAAGF,YAAY,GAC3BA,YAAY,CAAZA,UAAAA,KAD2B,EAAA,GAA/B,gBAAA;AAGA,MAAMG,WAAW,GACfH,YAAY,IAAII,EAAE,KAAlBJ,SAAAA,GACI;AAAA,WAAMA,YAAY,CAAZA,gBAAAA,CADVA,EACUA,CAAN;AAAA,GADJA,GADF,iBAAA;AAIA,SACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAC,gBAAA,CAAD,OAAA,EAAA;AACE,IAAA,KAAK,EAAE,CAACK,MAAM,CAAP,SAAA,EADT,KACS,CADT;AAEE,IAAA,OAAO,EAFT,WAAA;AAGE,IAAA,mBAAmB,EAHrB,QAAA;AAIE,IAAA,0BAA0B,EAJ5B,QAAA;AAKE,IAAA,iBAAiB,EALnB,QAAA;AAME,IAAA,MAAM,EAAEC;AANV,GAAA,EAQE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;AAAM,IAAA,KAAK,EAAED,MAAM,CAAnB,GAAA;AAAyB,IAAA,aAAa,EAAC;AAAvC,GAAA,EACGE,IAAI,GACDA,IAAI,CAAC;AACHC,IAAAA,KAAK,EAAEN,UAAU,GAAGL,KAAK,CAALA,MAAAA,CAAH,OAAA,GAA0BC;AADxC,GAAD,CADH,GADP,IAAA,EAME,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;AAAM,IAAA,KAAK,EAAE,CAACO,MAAM,CAAP,IAAA,EAAcA,MAAM,CAApB,OAAA;AAAb,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,KAAA,CAAD,OAAA,EAAA;AACE,IAAA,UAAU,EADZ,KAAA;AAEE,IAAA,aAAa,EAFf,kBAAA;AAGE,IAAA,KAAK,EAAE,CACLA,MAAM,CADD,KAAA,EAEL;AACEG,MAAAA,KAAK,EAAEN,UAAU,GAAGL,KAAK,CAALA,MAAAA,CAAH,OAAA,GAA0BD;AAD7C,KAFK,EAAA,UAAA;AAHT,GAAA,EADF,KACE,CADF,EAcGa,WAAW,IACV,KAAA,CAAA,aAAA,CAAC,KAAA,CAAD,OAAA,EAAA;AACE,IAAA,UAAU,EADZ,KAAA;AAEE,IAAA,aAAa,EAFf,wBAAA;AAGE,IAAA,KAAK,EAAE,CACLJ,MAAM,CADD,WAAA,EAEL;AACEG,MAAAA,KAAK,EAAEV;AADT,KAFK,EAAA,gBAAA;AAHT,GAAA,EArBN,WAqBM,CAfJ,CANF,EAoCE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CAACO,MAAM,CAAP,IAAA,EAAcI,WAAW,GAAGJ,MAAM,CAAT,SAAA,GAAzB,SAAA;AADT,GAAA,EAGE,KAAA,CAAA,aAAA,CAAC,sBAAA,CAAD,OAAA,EAAA;AACE,IAAA,IAAI,EAAEH,UAAU,GAAA,YAAA,GADlB,cAAA;AAEE,IAAA,KAAK,EAFP,UAAA;AAGE,IAAA,IAAI,EAHN,EAAA;AAIE,IAAA,SAAS,EAAEQ,YAAAA,CAAAA,WAAAA,CAAAA,KAAAA,GAAAA,KAAAA,GAA4B;AAJzC,GAAA,CAHF,CApCF,CARF,CADF,EAyDGR,UAAU,GACP,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,QAAA,EAA8BS,UAAAA,KAAD,EAAW;AACtC,QACEJ,IAAI,IACJf,KAAK,CAALA,cAAAA,CADAe,KACAf,CADAe,IAEA,CAACI,KAAK,CAALA,KAAAA,CAFDJ,IAAAA,IAGA,CAACI,KAAK,CAALA,KAAAA,CAJH,KAAA,EAKE;AACA,aAAO,KAAK,CAAL,YAAA,CAAA,KAAA,EAA0B;AAC/BC,QAAAA,KAAK,EAAE,CAACP,MAAM,CAAP,KAAA,EAAeM,KAAK,CAALA,KAAAA,CAAf,KAAA;AADwB,OAA1B,CAAP;AAGD;;AAED,WAAA,KAAA;AAbK,GACP,CADO,GA1Df,IACE,CADF;AAhDF,CAAA;;AA8HAxB,aAAa,CAAbA,WAAAA,GAAAA,gBAAAA;;AAEA,IAAMkB,MAAM,GAAG,YAAA,CAAA,UAAA,CAAA,MAAA,CAAkB;AAC/BQ,EAAAA,SAAS,EAAE;AACTC,IAAAA,OAAO,EAAE;AADA,GADoB;AAI/BC,EAAAA,GAAG,EAAE;AACHC,IAAAA,aAAa,EADV,KAAA;AAEHC,IAAAA,UAAU,EAAE;AAFT,GAJ0B;AAQ/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EADG,EAAA;AAETF,IAAAA,UAAU,EAFD,QAAA;AAGTG,IAAAA,cAAc,EAAE;AAHP,GARoB;AAa/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE;AADL,GAbwB;AAgB/Bb,EAAAA,WAAW,EAAE;AACXa,IAAAA,QAAQ,EAAE;AADC,GAhBkB;AAmB/BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE;AADJ,GAnByB;AAsB/Bb,EAAAA,KAAK,EAAE;AACLc,IAAAA,WAAW,EAAE;AADR,GAtBwB;AAyB/BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EADG,CAAA;AAEPP,IAAAA,cAAc,EAAE;AAFT;AAzBsB,CAAlB,CAAf;;eA+Be,CAAA,GAAA,QAAA,CAAA,SAAA,EAAA,aAAA,C","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst ListAccordion = ({\n  left,\n  title,\n  description,\n  children,\n  theme,\n  titleStyle,\n  descriptionStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  style,\n  id,\n  testID,\n  onPress,\n  expanded: expandedProp,\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = () => {\n    onPress?.();\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded((expanded) => !expanded);\n    }\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error(\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n    );\n  }\n  const isExpanded = groupContext\n    ? groupContext.expandedId === id\n    : expandedInternal;\n  const handlePress =\n    groupContext && id !== undefined\n      ? () => groupContext.onAccordionPress(id)\n      : handlePressAction;\n  return (\n    <View>\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={handlePress}\n        accessibilityTraits=\"button\"\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        testID={testID}\n      >\n        <View style={styles.row} pointerEvents=\"none\">\n          {left\n            ? left({\n                color: isExpanded ? theme.colors.primary : descriptionColor,\n              })\n            : null}\n          <View style={[styles.item, styles.content]}>\n            <Text\n              selectable={false}\n              numberOfLines={titleNumberOfLines}\n              style={[\n                styles.title,\n                {\n                  color: isExpanded ? theme.colors.primary : titleColor,\n                },\n                titleStyle,\n              ]}\n            >\n              {title}\n            </Text>\n            {description && (\n              <Text\n                selectable={false}\n                numberOfLines={descriptionNumberOfLines}\n                style={[\n                  styles.description,\n                  {\n                    color: descriptionColor,\n                  },\n                  descriptionStyle,\n                ]}\n              >\n                {description}\n              </Text>\n            )}\n          </View>\n          <View\n            style={[styles.item, description ? styles.multiline : undefined]}\n          >\n            <MaterialCommunityIcon\n              name={isExpanded ? 'chevron-up' : 'chevron-down'}\n              color={titleColor}\n              size={24}\n              direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n            />\n          </View>\n        </View>\n      </TouchableRipple>\n      {isExpanded\n        ? React.Children.map(children, (child) => {\n            if (\n              left &&\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nListAccordion.displayName = 'List.Accordion';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n"]}