d1748bdc7cfd7ddc108f128bf7d8a649
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Button = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _config = require("../config");

var _helpers = require("../helpers");

var _Icon = _interopRequireDefault(require("../icons/Icon"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var defaultLoadingProps = function defaultLoadingProps(type, theme) {
  return {
    color: type === 'solid' ? 'white' : theme.colors.primary,
    size: 'small'
  };
};

var Button = function (_Component) {
  (0, _inherits2.default)(Button, _Component);

  var _super = _createSuper(Button);

  function Button() {
    var _this;

    (0, _classCallCheck2.default)(this, Button);
    _this = _super.apply(this, arguments);

    _this.handleOnPress = function (evt) {
      var _this$props = _this.props,
          loading = _this$props.loading,
          _this$props$onPress = _this$props.onPress,
          onPress = _this$props$onPress === void 0 ? function () {
        return console.log('Please attach a method to this component');
      } : _this$props$onPress;

      if (!loading) {
        onPress(evt);
      }
    };

    return _this;
  }

  (0, _createClass2.default)(Button, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props2 = this.props,
          linearGradientProps = _this$props2.linearGradientProps,
          ViewComponent = _this$props2.ViewComponent;

      if (linearGradientProps && !ViewComponent) {
        console.error("You need to pass a ViewComponent to use linearGradientProps !\nExample: ViewComponent={require('react-native-linear-gradient')}");
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _a = this.props,
          TouchableComponent = _a.TouchableComponent,
          containerStyle = _a.containerStyle,
          onPress = _a.onPress,
          buttonStyle = _a.buttonStyle,
          _a$type = _a.type,
          type = _a$type === void 0 ? 'solid' : _a$type,
          _a$loading = _a.loading,
          loading = _a$loading === void 0 ? false : _a$loading,
          loadingStyle = _a.loadingStyle,
          passedLoadingProps = _a.loadingProps,
          _a$title = _a.title,
          title = _a$title === void 0 ? '' : _a$title,
          titleProps = _a.titleProps,
          passedTitleStyle = _a.titleStyle,
          icon = _a.icon,
          iconContainerStyle = _a.iconContainerStyle,
          _a$iconRight = _a.iconRight,
          iconRight = _a$iconRight === void 0 ? false : _a$iconRight,
          _a$disabled = _a.disabled,
          disabled = _a$disabled === void 0 ? false : _a$disabled,
          disabledStyle = _a.disabledStyle,
          disabledTitleStyle = _a.disabledTitleStyle,
          _a$raised = _a.raised,
          raised = _a$raised === void 0 ? false : _a$raised,
          linearGradientProps = _a.linearGradientProps,
          _a$ViewComponent = _a.ViewComponent,
          ViewComponent = _a$ViewComponent === void 0 ? _reactNative.View : _a$ViewComponent,
          theme = _a.theme,
          attributes = __rest(_a, ["TouchableComponent", "containerStyle", "onPress", "buttonStyle", "type", "loading", "loadingStyle", "loadingProps", "title", "titleProps", "titleStyle", "icon", "iconContainerStyle", "iconRight", "disabled", "disabledStyle", "disabledTitleStyle", "raised", "linearGradientProps", "ViewComponent", "theme"]);

      var TouchableComponentInternal = TouchableComponent || _reactNative.Platform.select({
        android: linearGradientProps ? _reactNative.TouchableOpacity : _reactNative.TouchableNativeFeedback,
        default: _reactNative.TouchableOpacity
      });

      var titleStyle = _reactNative.StyleSheet.flatten([{
        color: type === 'solid' ? 'white' : theme.colors.primary
      }, styles.title, passedTitleStyle, disabled && {
        color: (0, _helpers.color)(theme.colors.disabled).darken(0.3).string()
      }, disabled && disabledTitleStyle]);

      var background = _reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= 21 ? _reactNative.TouchableNativeFeedback.Ripple((0, _color.default)(titleStyle.color).alpha(0.32).rgb().string(), true) : undefined;
      var loadingProps = Object.assign(Object.assign({}, defaultLoadingProps(type, theme)), passedLoadingProps);
      var accessibilityState = {
        disabled: !!disabled,
        busy: !!loading
      };
      return _react.default.createElement(_reactNative.View, {
        style: [styles.container, {
          borderRadius: 3 || styles.container.borderRadius
        }, containerStyle, raised && !disabled && type !== 'clear' && styles.raised]
      }, _react.default.createElement(TouchableComponentInternal, (0, _extends2.default)({
        onPress: this.handleOnPress,
        delayPressIn: 0,
        activeOpacity: 0.3,
        accessibilityRole: "button",
        accessibilityState: accessibilityState,
        disabled: disabled,
        background: background
      }, attributes), _react.default.createElement(ViewComponent, (0, _extends2.default)({}, linearGradientProps, {
        style: _reactNative.StyleSheet.flatten([styles.button, {
          backgroundColor: type === 'solid' ? theme.colors.primary : 'transparent',
          borderColor: theme.colors.primary,
          borderWidth: type === 'outline' ? _reactNative.StyleSheet.hairlineWidth : 0
        }, buttonStyle, disabled && type === 'solid' && {
          backgroundColor: theme.colors.disabled
        }, disabled && type === 'outline' && {
          borderColor: (0, _helpers.color)(theme.colors.disabled).darken(0.3).string()
        }, disabled && disabledStyle])
      }), loading && _react.default.createElement(_reactNative.ActivityIndicator, (0, _extends2.default)({
        style: _reactNative.StyleSheet.flatten([styles.loading, loadingStyle]),
        color: loadingProps.color,
        size: loadingProps.size
      }, loadingProps)), !loading && icon && !iconRight && (0, _helpers.renderNode)(_Icon.default, icon, {
        containerStyle: _reactNative.StyleSheet.flatten([styles.iconContainer, iconContainerStyle])
      }), !loading && !!title && (0, _helpers.renderNode)(_reactNative.Text, title, Object.assign({
        style: titleStyle
      }, titleProps)), !loading && icon && iconRight && (0, _helpers.renderNode)(_Icon.default, icon, {
        containerStyle: _reactNative.StyleSheet.flatten([styles.iconContainer, iconContainerStyle])
      }))));
    }
  }]);
  return Button;
}(_react.Component);

exports.Button = Button;

var styles = _reactNative.StyleSheet.create({
  button: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 3,
    padding: 8
  },
  container: {
    overflow: 'hidden',
    borderRadius: 3
  },
  title: Object.assign({
    fontSize: 16,
    textAlign: 'center',
    paddingVertical: 1
  }, _reactNative.Platform.select({
    android: {
      fontFamily: 'sans-serif-medium'
    },
    default: {
      fontSize: 18
    }
  })),
  iconContainer: {
    marginHorizontal: 5
  },
  raised: Object.assign({
    backgroundColor: '#fff',
    overflow: 'visible'
  }, _reactNative.Platform.select({
    android: {
      elevation: 4
    },
    default: {
      shadowColor: 'rgba(0,0,0, .4)',
      shadowOffset: {
        height: 1,
        width: 1
      },
      shadowOpacity: 1,
      shadowRadius: 1
    }
  })),
  loading: {
    marginVertical: 2
  }
});

var _default = (0, _config.withTheme)(Button, 'Button');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,