77bd4a23edf4cd61d9cc96e694d82e08
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("react-native");

var _reactNativePaper = require("react-native-paper");

var _reactNativeElements = require("react-native-elements");

var _MaterialCommunityIcons = _interopRequireDefault(require("react-native-vector-icons/MaterialCommunityIcons"));

var _formik = require("formik");

var _color = _interopRequireDefault(require("../constants/color"));

var TextBox = function TextBox(_ref) {
  var loading = _ref.loading,
      props = (0, _objectWithoutProperties2.default)(_ref, ["loading"]);
  var paperColors = (0, _reactNativePaper.useTheme)().colors;

  var _React$useState = _react.default.useState(false),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      inputIsFocused = _React$useState2[0],
      setInputIsFocused = _React$useState2[1];

  var _useField = (0, _formik.useField)(props),
      _useField2 = (0, _slicedToArray2.default)(_useField, 3),
      field = _useField2[0],
      meta = _useField2[1],
      helpers = _useField2[2];

  var containerStyle = props.containerStyle,
      inputContainerStyle = props.inputContainerStyle,
      _onBlur = props.onBlur,
      label = props.label,
      iconName = props.iconName,
      required = props.required;
  return _react.default.createElement(_reactNative.View, null, label && _react.default.createElement(_reactNative.View, {
    style: {
      padding: 8
    }
  }, _react.default.createElement(_reactNative.Text, {
    style: {
      fontWeight: '700',
      color: required ? paperColors.primary : _color.default.PRIMARY_FONT
    }
  }, label)), _react.default.createElement(_reactNative.View, {
    style: [{
      borderRadius: 4,
      backgroundColor: _color.default.WHITE,
      borderColor: paperColors.primary,
      borderWidth: 1
    }, containerStyle]
  }, _react.default.createElement(_reactNativeElements.Input, (0, _extends2.default)({
    nane: field.name
  }, props, {
    label: null,
    placeholderTextColor: _color.default.DARK_GRAY,
    inputStyle: {
      color: inputIsFocused ? paperColors.primary : _color.default.PRIMARY_FONT,
      fontSize: 14
    },
    inputContainerStyle: [{
      height: 42,
      borderBottomWidth: 0,
      borderColor: paperColors.primary
    }, inputContainerStyle],
    underlineColorAndroid: "transparent",
    leftIcon: _react.default.createElement(_MaterialCommunityIcons.default, {
      name: iconName,
      size: 24,
      color: inputIsFocused ? paperColors.primary : _color.default.PRIMARY_ICON
    }),
    leftIconContainerStyle: {
      marginLeft: 2,
      marginRight: 8
    },
    rightIcon: _react.default.createElement(_MaterialCommunityIcons.default, {
      name: "alert-circle",
      size: 24,
      color: meta.error ? _color.default.DARK_RED : 'transparent',
      onPress: function onPress() {
        _reactNative.Alert.alert('Thông báo', meta.error);
      }
    }),
    onFocus: function onFocus() {
      setInputIsFocused(true);
      helpers.setTouched(true);
    },
    onBlur: function onBlur() {
      setInputIsFocused(false);

      _onBlur();
    }
  }))));
};

TextBox.propTypes = {
  containerStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
  inputContainerStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
  iconName: _propTypes.default.string
};
TextBox.defaultProps = {
  iconName: 'keyboard',
  containerStyle: {},
  inputContainerStyle: {}
};
var _default = TextBox;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,