{"version":3,"sources":["Texbox.js"],"names":["TextBox","loading","props","paperColors","colors","React","useState","inputIsFocused","setInputIsFocused","field","meta","helpers","containerStyle","inputContainerStyle","onBlur","label","iconName","required","padding","fontWeight","color","primary","PRIMARY_FONT","borderRadius","backgroundColor","WHITE","borderColor","borderWidth","name","DARK_GRAY","fontSize","height","borderBottomWidth","PRIMARY_ICON","marginLeft","marginRight","error","DARK_RED","Alert","alert","setTouched","propTypes","oneOfType","object","array","string","defaultProps"],"mappings":"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","sourcesContent":["/* eslint-disable react-native/no-inline-styles */\r\n/* eslint-disable react/jsx-wrap-multilines */\r\n/* eslint-disable react/jsx-props-no-spreading */\r\n/* eslint-disable react/prop-types */\r\nimport React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport {View, Text, Alert} from 'react-native';\r\nimport {useTheme} from 'react-native-paper';\r\nimport {Input} from 'react-native-elements';\r\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\r\nimport {useField} from 'formik';\r\nimport colors from '../constants/color';\r\n\r\nconst TextBox = ({loading, ...props}) => {\r\n  // HOOKS\r\n  const paperColors = useTheme().colors;\r\n  const [inputIsFocused, setInputIsFocused] = React.useState(false);\r\n  const [field, meta, helpers] = useField(props);\r\n  const {\r\n    containerStyle,\r\n    inputContainerStyle,\r\n    onBlur,\r\n    label,\r\n    iconName,\r\n    required,\r\n  } = props;\r\n\r\n  return (\r\n    <View>\r\n      {label && (\r\n        <View style={{padding: 8}}>\r\n          <Text\r\n            style={{\r\n              fontWeight: '700',\r\n              color: required ? paperColors.primary : colors.PRIMARY_FONT,\r\n            }}>\r\n            {label}\r\n          </Text>\r\n        </View>\r\n      )}\r\n      <View\r\n        style={[\r\n          {\r\n            borderRadius: 4,\r\n            backgroundColor: colors.WHITE,\r\n            borderColor: paperColors.primary,\r\n            borderWidth: 1,\r\n          },\r\n          containerStyle,\r\n        ]}>\r\n        <Input\r\n          nane={field.name}\r\n          {...props}\r\n          label={null}\r\n          placeholderTextColor={colors.DARK_GRAY}\r\n          inputStyle={{\r\n            color: inputIsFocused ? paperColors.primary : colors.PRIMARY_FONT,\r\n            fontSize: 14,\r\n          }}\r\n          inputContainerStyle={[\r\n            {\r\n              height: 42,\r\n              borderBottomWidth: 0,\r\n              borderColor: paperColors.primary,\r\n            },\r\n            inputContainerStyle,\r\n          ]}\r\n          underlineColorAndroid=\"transparent\"\r\n          leftIcon={\r\n            <Icon\r\n              name={iconName}\r\n              size={24}\r\n              color={inputIsFocused ? paperColors.primary : colors.PRIMARY_ICON}\r\n            />\r\n          }\r\n          leftIconContainerStyle={{marginLeft: 2, marginRight: 8}}\r\n          rightIcon={\r\n            <Icon\r\n              name=\"alert-circle\"\r\n              size={24}\r\n              color={meta.error ? colors.DARK_RED : 'transparent'}\r\n              onPress={() => {\r\n                Alert.alert('Thông báo', meta.error);\r\n              }}\r\n            />\r\n          }\r\n          onFocus={() => {\r\n            setInputIsFocused(true);\r\n            helpers.setTouched(true);\r\n          }}\r\n          onBlur={() => {\r\n            setInputIsFocused(false);\r\n            onBlur();\r\n          }}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nTextBox.propTypes = {\r\n  containerStyle: propTypes.oneOfType([propTypes.object, propTypes.array]),\r\n  inputContainerStyle: propTypes.oneOfType([propTypes.object, propTypes.array]),\r\n  iconName: propTypes.string,\r\n};\r\n\r\nTextBox.defaultProps = {\r\n  iconName: 'keyboard',\r\n  containerStyle: {},\r\n  inputContainerStyle: {},\r\n};\r\n\r\nexport default TextBox;\r\n"]}