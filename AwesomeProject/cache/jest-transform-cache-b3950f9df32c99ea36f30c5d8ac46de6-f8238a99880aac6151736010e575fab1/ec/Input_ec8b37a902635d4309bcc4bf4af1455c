10250041d52e19434309c8332712ab6c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Input = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _helpers = require("../helpers");

var _config = require("../config");

var _Icon = _interopRequireDefault(require("../icons/Icon"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var renderText = function renderText(content, defaultProps, style) {
  return (0, _helpers.renderNode)(_reactNative.Text, content, Object.assign(Object.assign({}, defaultProps), {
    style: _reactNative.StyleSheet.flatten([style, defaultProps && defaultProps.style])
  }));
};

var Input = function (_React$Component) {
  (0, _inherits2.default)(Input, _React$Component);

  var _super = _createSuper(Input);

  function Input() {
    var _this;

    (0, _classCallCheck2.default)(this, Input);
    _this = _super.apply(this, arguments);
    _this.shakeAnimationValue = new _reactNative.Animated.Value(0);

    _this.shake = function () {
      var _assertThisInitialize = (0, _assertThisInitialized2.default)(_this),
          shakeAnimationValue = _assertThisInitialize.shakeAnimationValue;

      shakeAnimationValue.setValue(0);

      _reactNative.Animated.timing(shakeAnimationValue, {
        duration: 375,
        toValue: 3,
        easing: _reactNative.Easing.bounce,
        useNativeDriver: true
      }).start();
    };

    return _this;
  }

  (0, _createClass2.default)(Input, [{
    key: "focus",
    value: function focus() {
      this.input.focus();
    }
  }, {
    key: "blur",
    value: function blur() {
      this.input.blur();
    }
  }, {
    key: "clear",
    value: function clear() {
      this.input.clear();
    }
  }, {
    key: "isFocused",
    value: function isFocused() {
      return this.input.isFocused();
    }
  }, {
    key: "setNativeProps",
    value: function setNativeProps(nativeProps) {
      this.input.setNativeProps(nativeProps);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _a = this.props,
          containerStyle = _a.containerStyle,
          disabled = _a.disabled,
          disabledInputStyle = _a.disabledInputStyle,
          inputContainerStyle = _a.inputContainerStyle,
          leftIcon = _a.leftIcon,
          leftIconContainerStyle = _a.leftIconContainerStyle,
          rightIcon = _a.rightIcon,
          rightIconContainerStyle = _a.rightIconContainerStyle,
          _a$InputComponent = _a.InputComponent,
          InputComponent = _a$InputComponent === void 0 ? _reactNative.TextInput : _a$InputComponent,
          inputStyle = _a.inputStyle,
          errorProps = _a.errorProps,
          errorStyle = _a.errorStyle,
          errorMessage = _a.errorMessage,
          label = _a.label,
          labelStyle = _a.labelStyle,
          labelProps = _a.labelProps,
          theme = _a.theme,
          _a$renderErrorMessage = _a.renderErrorMessage,
          renderErrorMessage = _a$renderErrorMessage === void 0 ? true : _a$renderErrorMessage,
          style = _a.style,
          attributes = __rest(_a, ["containerStyle", "disabled", "disabledInputStyle", "inputContainerStyle", "leftIcon", "leftIconContainerStyle", "rightIcon", "rightIconContainerStyle", "InputComponent", "inputStyle", "errorProps", "errorStyle", "errorMessage", "label", "labelStyle", "labelProps", "theme", "renderErrorMessage", "style"]);

      var translateX = this.shakeAnimationValue.interpolate({
        inputRange: [0, 0.5, 1, 1.5, 2, 2.5, 3],
        outputRange: [0, -15, 0, 15, 0, -15, 0]
      });
      var hideErrorMessage = !renderErrorMessage && !errorMessage;
      return _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.container, containerStyle])
      }, renderText(label, Object.assign({
        style: labelStyle
      }, labelProps), Object.assign({
        fontSize: 16,
        color: theme.colors.grey3
      }, _reactNative.Platform.select({
        android: Object.assign({}, _config.fonts.android.bold),
        default: {
          fontWeight: 'bold'
        }
      }))), _react.default.createElement(_reactNative.Animated.View, {
        style: _reactNative.StyleSheet.flatten([{
          flexDirection: 'row',
          borderBottomWidth: 1,
          alignItems: 'center',
          borderColor: theme.colors.grey3
        }, inputContainerStyle, {
          transform: [{
            translateX: translateX
          }]
        }])
      }, leftIcon && _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.iconContainer, leftIconContainerStyle])
      }, (0, _helpers.renderNode)(_Icon.default, leftIcon)), _react.default.createElement(InputComponent, (0, _extends2.default)({
        testID: "RNE__Input__text-input",
        underlineColorAndroid: "transparent",
        editable: !disabled,
        ref: function ref(_ref) {
          _this2.input = _ref;
        },
        style: _reactNative.StyleSheet.flatten([{
          alignSelf: 'center',
          color: theme.colors.black,
          fontSize: 18,
          flex: 1,
          minHeight: 40
        }, inputStyle, disabled && styles.disabledInput, disabled && disabledInputStyle, style]),
        placeholderTextColor: theme.colors.grey3
      }, (0, _helpers.patchWebProps)(attributes))), rightIcon && _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.iconContainer, rightIconContainerStyle])
      }, (0, _helpers.renderNode)(_Icon.default, rightIcon))), _react.default.createElement(_reactNative.Text, (0, _extends2.default)({}, errorProps, {
        style: _reactNative.StyleSheet.flatten([{
          margin: 5,
          fontSize: 12,
          color: theme.colors.error
        }, errorStyle && errorStyle, hideErrorMessage && {
          height: 0,
          margin: 0,
          padding: 0
        }])
      }), errorMessage));
    }
  }]);
  return Input;
}(_react.default.Component);

exports.Input = Input;

var styles = _reactNative.StyleSheet.create({
  container: {
    width: '100%',
    paddingHorizontal: 10
  },
  disabledInput: {
    opacity: 0.5
  },
  iconContainer: {
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    paddingRight: 4,
    marginVertical: 4
  }
});

var _default = (0, _config.withTheme)(Input, 'Input');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,