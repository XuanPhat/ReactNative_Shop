{"version":3,"sources":["Card.tsx"],"names":["Card","elevation","cardElevation","accessible","rest","current","React","Animated","handlePressIn","animation","scale","toValue","duration","useNativeDriver","mode","handlePressOut","roundness","total","siblings","child","borderRadius","onPress","styles","innerContainer","index","CardContent","CardActions","CardCover","CardTitle","flexGrow","flexShrink"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n\n  const handlePressIn = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const { roundness } = theme;\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  return (\n    <Surface\n      // @ts-ignore\n      style={[{ borderRadius: roundness, elevation }, style]}\n      {...rest}\n    >\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress ? handlePressIn : undefined}\n        onPressOut={onPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]}