f2a5c8a6643a20b630223abc278e2bc5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ButtonGroup = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _config = require("../config");

var _helpers = require("../helpers");

var _Text = _interopRequireDefault(require("../text/Text"));

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var ButtonGroup = function ButtonGroup(props) {
  var theme = props.theme,
      rest = __rest(props, ["theme"]);

  var _rest$Component = rest.Component,
      Component = _rest$Component === void 0 ? _reactNative.Platform.select({
    android: _reactNative.TouchableNativeFeedback,
    default: _reactNative.TouchableOpacity
  }) : _rest$Component,
      buttons = rest.buttons,
      _rest$onPress = rest.onPress,
      _onPress = _rest$onPress === void 0 ? function () {
    return null;
  } : _rest$onPress,
      _rest$selectedIndex = rest.selectedIndex,
      selectedIndex = _rest$selectedIndex === void 0 ? null : _rest$selectedIndex,
      _rest$selectedIndexes = rest.selectedIndexes,
      selectedIndexes = _rest$selectedIndexes === void 0 ? [] : _rest$selectedIndexes,
      _rest$selectMultiple = rest.selectMultiple,
      selectMultiple = _rest$selectMultiple === void 0 ? false : _rest$selectMultiple,
      containerStyle = rest.containerStyle,
      innerBorderStyle = rest.innerBorderStyle,
      buttonStyle = rest.buttonStyle,
      buttonContainerStyle = rest.buttonContainerStyle,
      textStyle = rest.textStyle,
      selectedTextStyle = rest.selectedTextStyle,
      selectedButtonStyle = rest.selectedButtonStyle,
      _rest$underlayColor = rest.underlayColor,
      underlayColor = _rest$underlayColor === void 0 ? theme.colors.primary : _rest$underlayColor,
      activeOpacity = rest.activeOpacity,
      onHideUnderlay = rest.onHideUnderlay,
      onShowUnderlay = rest.onShowUnderlay,
      setOpacityTo = rest.setOpacityTo,
      _rest$disabled = rest.disabled,
      disabled = _rest$disabled === void 0 ? false : _rest$disabled,
      disabledStyle = rest.disabledStyle,
      disabledTextStyle = rest.disabledTextStyle,
      disabledSelectedStyle = rest.disabledSelectedStyle,
      disabledSelectedTextStyle = rest.disabledSelectedTextStyle,
      _rest$vertical = rest.vertical,
      vertical = _rest$vertical === void 0 ? false : _rest$vertical,
      attributes = __rest(rest, ["Component", "buttons", "onPress", "selectedIndex", "selectedIndexes", "selectMultiple", "containerStyle", "innerBorderStyle", "buttonStyle", "buttonContainerStyle", "textStyle", "selectedTextStyle", "selectedButtonStyle", "underlayColor", "activeOpacity", "onHideUnderlay", "onShowUnderlay", "setOpacityTo", "disabled", "disabledStyle", "disabledTextStyle", "disabledSelectedStyle", "disabledSelectedTextStyle", "vertical"]);

  var innerBorderWidth = 1;

  if (innerBorderStyle && Object.prototype.hasOwnProperty.call(innerBorderStyle, 'width')) {
    innerBorderWidth = innerBorderStyle.width;
  }

  return _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, attributes, {
    style: _reactNative.StyleSheet.flatten([styles.container, vertical && styles.verticalContainer, containerStyle && containerStyle])
  }), buttons.map(function (button, i) {
    var isSelected = selectedIndex === i || selectedIndexes.includes(i);
    var isDisabled = disabled === true || Array.isArray(disabled) && disabled.includes(i);
    return _react.default.createElement(_reactNative.View, {
      key: i,
      style: _reactNative.StyleSheet.flatten([styles.button, vertical && styles.verticalComponent, i !== buttons.length - 1 && (vertical ? {
        borderBottomWidth: innerBorderWidth,
        borderBottomColor: innerBorderStyle && innerBorderStyle.color || theme.colors.grey4
      } : {
        borderRightWidth: innerBorderWidth,
        borderRightColor: innerBorderStyle && innerBorderStyle.color || theme.colors.grey4
      }), buttonContainerStyle])
    }, _react.default.createElement(Component, {
      testID: "buttonGroupItem",
      activeOpacity: activeOpacity,
      setOpacityTo: setOpacityTo,
      onHideUnderlay: onHideUnderlay,
      onShowUnderlay: onShowUnderlay,
      underlayColor: underlayColor,
      disabled: isDisabled,
      onPress: function onPress() {
        if (selectMultiple) {
          if (selectedIndexes.includes(i)) {
            _onPress(selectedIndexes.filter(function (index) {
              return index !== i;
            }));
          } else {
            _onPress([].concat((0, _toConsumableArray2.default)(selectedIndexes), [i]));
          }
        } else {
          _onPress(i);
        }
      },
      style: styles.button
    }, _react.default.createElement(_reactNative.View, {
      style: _reactNative.StyleSheet.flatten([styles.textContainer, buttonStyle && buttonStyle, isSelected && {
        backgroundColor: theme.colors.primary
      }, isSelected && selectedButtonStyle && selectedButtonStyle, isDisabled && styles.disabled, isDisabled && disabledStyle, isDisabled && isSelected && {
        backgroundColor: theme.colors.disabled
      }, isDisabled && isSelected && disabledSelectedStyle])
    }, button.element ? _react.default.createElement(button.element, null) : _react.default.createElement(_Text.default, {
      testID: "buttonGroupItemText",
      style: _reactNative.StyleSheet.flatten([Object.assign({
        fontSize: (0, _helpers.normalizeText)(13),
        color: theme.colors.grey2
      }, _reactNative.Platform.select({
        android: {},
        default: {
          fontWeight: '500'
        }
      })), textStyle && textStyle, isSelected && {
        color: '#fff'
      }, isSelected && selectedTextStyle, isDisabled && {
        color: (0, _helpers.color)(theme.colors.disabled).darken(0.3).toString()
      }, isDisabled && disabledTextStyle, isDisabled && isSelected && disabledSelectedTextStyle])
    }, button))));
  }));
};

exports.ButtonGroup = ButtonGroup;

var styles = _reactNative.StyleSheet.create({
  button: {
    flex: 1
  },
  textContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  container: {
    marginHorizontal: 10,
    marginVertical: 5,
    borderColor: '#e3e3e3',
    borderWidth: 1,
    flexDirection: 'row',
    borderRadius: 3,
    overflow: 'hidden',
    backgroundColor: '#fff',
    height: 40
  },
  verticalContainer: {
    flexDirection: 'column',
    height: null
  },
  verticalComponent: {
    height: 40
  },
  disabled: {
    backgroundColor: 'transparent'
  }
});

var _default = (0, _config.withTheme)(ButtonGroup, 'ButtonGroup');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,