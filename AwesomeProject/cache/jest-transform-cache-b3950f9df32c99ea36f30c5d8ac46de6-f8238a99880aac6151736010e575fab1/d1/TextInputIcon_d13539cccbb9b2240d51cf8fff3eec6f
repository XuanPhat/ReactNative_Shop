a01068d954db1eaf2cdc826b4094b997
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconAdornment = exports.default = exports.ICON_SIZE = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _IconButton = _interopRequireDefault(require("../../IconButton"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var ICON_SIZE = 24;
exports.ICON_SIZE = ICON_SIZE;
var ICON_OFFSET = 12;

var StyleContext = _react.default.createContext({
  style: {},
  isTextInputFocused: false,
  forceFocus: function forceFocus() {}
});

var IconAdornment = function IconAdornment(_ref2) {
  var icon = _ref2.icon,
      topPosition = _ref2.topPosition,
      side = _ref2.side,
      isTextInputFocused = _ref2.isTextInputFocused,
      forceFocus = _ref2.forceFocus;
  var style = (0, _defineProperty2.default)({
    top: topPosition
  }, side, ICON_OFFSET);
  var contextState = {
    style: style,
    isTextInputFocused: isTextInputFocused,
    forceFocus: forceFocus
  };
  return _react.default.createElement(StyleContext.Provider, {
    value: contextState
  }, icon);
};

exports.IconAdornment = IconAdornment;

var TextInputIcon = function TextInputIcon(_ref) {
  var name = _ref.name,
      onPress = _ref.onPress,
      forceTextInputFocus = _ref.forceTextInputFocus,
      rest = _objectWithoutProperties(_ref, ["name", "onPress", "forceTextInputFocus"]);

  var _react$default$useCon = _react.default.useContext(StyleContext),
      style = _react$default$useCon.style,
      isTextInputFocused = _react$default$useCon.isTextInputFocused,
      forceFocus = _react$default$useCon.forceFocus;

  var onPressWithFocusControl = _react.default.useCallback(function () {
    if (forceTextInputFocus && !isTextInputFocused) {
      forceFocus();
    }

    onPress === null || onPress === void 0 ? void 0 : onPress();
  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);

  return _react.default.createElement(_reactNative.View, {
    style: [styles.container, style]
  }, _react.default.createElement(_IconButton.default, _extends({
    icon: name,
    style: styles.iconButton,
    size: ICON_SIZE,
    onPress: onPressWithFocusControl
  }, rest)));
};

TextInputIcon.displayName = 'TextInput.Icon';
TextInputIcon.defaultProps = {
  forceTextInputFocus: true
};

var styles = _reactNative.StyleSheet.create({
  container: {
    position: 'absolute',
    width: ICON_SIZE,
    height: ICON_SIZE,
    justifyContent: 'center',
    alignItems: 'center'
  },
  iconButton: {
    margin: 0
  }
});

var _default = TextInputIcon;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRJbnB1dEljb24udHN4Il0sIm5hbWVzIjpbIklDT05fU0laRSIsIklDT05fT0ZGU0VUIiwiU3R5bGVDb250ZXh0Iiwic3R5bGUiLCJpc1RleHRJbnB1dEZvY3VzZWQiLCJmb3JjZUZvY3VzIiwiSWNvbkFkb3JubWVudCIsInRvcCIsImNvbnRleHRTdGF0ZSIsIlRleHRJbnB1dEljb24iLCJmb3JjZVRleHRJbnB1dEZvY3VzIiwicmVzdCIsIlJlYWN0Iiwib25QcmVzc1dpdGhGb2N1c0NvbnRyb2wiLCJvblByZXNzIiwic3R5bGVzIiwiY29udGFpbmVyIiwicG9zaXRpb24iLCJ3aWR0aCIsImhlaWdodCIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsImljb25CdXR0b24iLCJtYXJnaW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxNQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxZQUFBLEdBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQTs7QUFFQSxJQUFBLFdBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxrQkFBQSxDQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZU8sSUFBTUEsU0FBUyxHQUFmLEVBQUE7O0FBQ1AsSUFBTUMsV0FBVyxHQUFqQixFQUFBOztBQVFBLElBQU1DLFlBQVksR0FBRyxNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBc0M7QUFDekRDLEVBQUFBLEtBQUssRUFEb0QsRUFBQTtBQUV6REMsRUFBQUEsa0JBQWtCLEVBRnVDLEtBQUE7QUFHekRDLEVBQUFBLFVBQVUsRUFBRSxzQkFBTSxDQUFFO0FBSHFDLENBQXRDLENBQXJCOztBQU1BLElBQU1DLGFBT0wsR0FBRyxTQVBFQSxhQU9GLFFBQWlFO0FBQUEsTUFBaEUsSUFBZ0UsU0FBaEUsSUFBZ0U7QUFBQSxNQUFoRSxXQUFnRSxTQUFoRSxXQUFnRTtBQUFBLE1BQWhFLElBQWdFLFNBQWhFLElBQWdFO0FBQUEsTUFBaEUsa0JBQWdFLFNBQWhFLGtCQUFnRTtBQUFBLE1BQWpCRCxVQUFpQixTQUFqQkEsVUFBaUI7QUFDbkUsTUFBTUYsS0FBSztBQUNUSSxJQUFBQSxHQUFHLEVBRFM7QUFBSCxLQUVULElBRlMsRUFFRE4sV0FGQyxDQUFYO0FBSUEsTUFBTU8sWUFBWSxHQUFHO0FBQUVMLElBQUFBLEtBQUYsRUFBRUEsS0FBRjtBQUFTQyxJQUFBQSxrQkFBVCxFQUFTQSxrQkFBVDtBQUE2QkMsSUFBQUEsVUFBQUEsRUFBQUE7QUFBN0IsR0FBckI7QUFFQSxTQUNFLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLFlBQUQsQ0FBQSxRQUFBLEVBQUE7QUFBdUIsSUFBQSxLQUFLLEVBQUVHO0FBQTlCLEdBQUEsRUFERixJQUNFLENBREY7QUFkRixDQUFBOzs7O0FBbUJBLElBQU1DLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBQSxJQUFBLEVBS1Q7QUFBQSxNQUxVLElBS1YsR0FBQSxJQUFBLENBTFUsSUFLVjtBQUFBLE1BTFUsT0FLVixHQUFBLElBQUEsQ0FMVSxPQUtWO0FBQUEsTUFGWEMsbUJBRVcsR0FBQSxJQUFBLENBRlhBLG1CQUVXO0FBQUEsTUFEUkMsSUFDUSxHQUFBLHdCQUFBLENBQUEsSUFBQSxFQUFBLENBQUEsTUFBQSxFQUFBLFNBQUEsRUFBQSxxQkFBQSxDQUFBLENBQUE7O0FBQUEsOEJBQ3VDQyxNQUFBQSxDQUFBQSxPQUFBQSxDQUFBQSxVQUFBQSxDQUFsRCxZQUFrREEsQ0FEdkM7QUFBQSxNQUNMLEtBREsseUJBQ0wsS0FESztBQUFBLE1BQ0wsa0JBREsseUJBQ0wsa0JBREs7QUFBQSxNQUN3QlAsVUFEeEIseUJBQ3dCQSxVQUR4Qjs7QUFLWCxNQUFNUSx1QkFBdUIsR0FBRyxNQUFBLENBQUEsT0FBQSxDQUFBLFdBQUEsQ0FBa0IsWUFBTTtBQUN0RCxRQUFJSCxtQkFBbUIsSUFBSSxDQUEzQixrQkFBQSxFQUFnRDtBQUM5Q0wsTUFBQUEsVUFBVTtBQUNYOztBQUNEUyxJQUFBQSxPQUFPLEtBQVBBLElBQUFBLElBQUFBLE9BQU8sS0FBQSxLQUFQQSxDQUFBQSxHQUFBQSxLQUFBQSxDQUFBQSxHQUFBQSxPQUFPLEVBQVBBO0FBSjhCLEdBQUEsRUFLN0IsQ0FBQSxtQkFBQSxFQUFBLFVBQUEsRUFBQSxrQkFBQSxFQUxILE9BS0csQ0FMNkIsQ0FBaEM7O0FBT0EsU0FDRSxNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxZQUFBLENBQUQsSUFBQSxFQUFBO0FBQU0sSUFBQSxLQUFLLEVBQUUsQ0FBQ0MsTUFBTSxDQUFQLFNBQUEsRUFBQSxLQUFBO0FBQWIsR0FBQSxFQUNFLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLFdBQUEsQ0FBRCxPQUFBLEVBQUEsUUFBQSxDQUFBO0FBQ0UsSUFBQSxJQUFJLEVBRE4sSUFBQTtBQUVFLElBQUEsS0FBSyxFQUFFQSxNQUFNLENBRmYsVUFBQTtBQUdFLElBQUEsSUFBSSxFQUhOLFNBQUE7QUFJRSxJQUFBLE9BQU8sRUFBRUY7QUFKWCxHQUFBLEVBRkosSUFFSSxDQUFBLENBREYsQ0FERjtBQWpCRixDQUFBOztBQTZCQUosYUFBYSxDQUFiQSxXQUFBQSxHQUFBQSxnQkFBQUE7QUFFQUEsYUFBYSxDQUFiQSxZQUFBQSxHQUE2QjtBQUMzQkMsRUFBQUEsbUJBQW1CLEVBQUU7QUFETSxDQUE3QkQ7O0FBSUEsSUFBTU0sTUFBTSxHQUFHLFlBQUEsQ0FBQSxVQUFBLENBQUEsTUFBQSxDQUFrQjtBQUMvQkMsRUFBQUEsU0FBUyxFQUFFO0FBQ1RDLElBQUFBLFFBQVEsRUFEQyxVQUFBO0FBRVRDLElBQUFBLEtBQUssRUFGSSxTQUFBO0FBR1RDLElBQUFBLE1BQU0sRUFIRyxTQUFBO0FBSVRDLElBQUFBLGNBQWMsRUFKTCxRQUFBO0FBS1RDLElBQUFBLFVBQVUsRUFBRTtBQUxILEdBRG9CO0FBUS9CQyxFQUFBQSxVQUFVLEVBQUU7QUFDVkMsSUFBQUEsTUFBTSxFQUFFO0FBREU7QUFSbUIsQ0FBbEIsQ0FBZjs7ZUFhZWQsYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBWaWV3LCBTdHlsZVNoZWV0LCBTdHlsZVByb3AsIFZpZXdTdHlsZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJy4uLy4uL0ljb25CdXR0b24nO1xuaW1wb3J0IHR5cGUgeyAkT21pdCB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IEljb25Tb3VyY2UgfSBmcm9tICcuLi8uLi9JY29uJztcblxudHlwZSBQcm9wcyA9ICRPbWl0PFxuICBSZWFjdC5Db21wb25lbnRQcm9wczx0eXBlb2YgSWNvbkJ1dHRvbj4sXG4gICdpY29uJyB8ICd0aGVtZSdcbj4gJiB7XG4gIG5hbWU6IEljb25Tb3VyY2U7XG4gIG9uUHJlc3M/OiAoKSA9PiB2b2lkO1xuICBmb3JjZVRleHRJbnB1dEZvY3VzPzogYm9vbGVhbjtcbiAgc3R5bGU/OiBTdHlsZVByb3A8Vmlld1N0eWxlPjtcbiAgdGhlbWU/OiBSZWFjdE5hdGl2ZVBhcGVyLlRoZW1lO1xufTtcblxuZXhwb3J0IGNvbnN0IElDT05fU0laRSA9IDI0O1xuY29uc3QgSUNPTl9PRkZTRVQgPSAxMjtcblxudHlwZSBTdHlsZUNvbnRleHRUeXBlID0ge1xuICBzdHlsZTogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG4gIGlzVGV4dElucHV0Rm9jdXNlZDogYm9vbGVhbjtcbiAgZm9yY2VGb2N1czogKCkgPT4gdm9pZDtcbn07XG5cbmNvbnN0IFN0eWxlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8U3R5bGVDb250ZXh0VHlwZT4oe1xuICBzdHlsZToge30sXG4gIGlzVGV4dElucHV0Rm9jdXNlZDogZmFsc2UsXG4gIGZvcmNlRm9jdXM6ICgpID0+IHt9LFxufSk7XG5cbmNvbnN0IEljb25BZG9ybm1lbnQ6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PFxuICB7XG4gICAgdGVzdElEOiBzdHJpbmc7XG4gICAgaWNvbjogUmVhY3QuUmVhY3ROb2RlO1xuICAgIHRvcFBvc2l0aW9uOiBudW1iZXI7XG4gICAgc2lkZTogJ2xlZnQnIHwgJ3JpZ2h0JztcbiAgfSAmIE9taXQ8U3R5bGVDb250ZXh0VHlwZSwgJ3N0eWxlJz5cbj4gPSAoeyBpY29uLCB0b3BQb3NpdGlvbiwgc2lkZSwgaXNUZXh0SW5wdXRGb2N1c2VkLCBmb3JjZUZvY3VzIH0pID0+IHtcbiAgY29uc3Qgc3R5bGUgPSB7XG4gICAgdG9wOiB0b3BQb3NpdGlvbixcbiAgICBbc2lkZV06IElDT05fT0ZGU0VULFxuICB9O1xuICBjb25zdCBjb250ZXh0U3RhdGUgPSB7IHN0eWxlLCBpc1RleHRJbnB1dEZvY3VzZWQsIGZvcmNlRm9jdXMgfTtcblxuICByZXR1cm4gKFxuICAgIDxTdHlsZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRTdGF0ZX0+e2ljb259PC9TdHlsZUNvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59O1xuXG5jb25zdCBUZXh0SW5wdXRJY29uID0gKHtcbiAgbmFtZSxcbiAgb25QcmVzcyxcbiAgZm9yY2VUZXh0SW5wdXRGb2N1cyxcbiAgLi4ucmVzdFxufTogUHJvcHMpID0+IHtcbiAgY29uc3QgeyBzdHlsZSwgaXNUZXh0SW5wdXRGb2N1c2VkLCBmb3JjZUZvY3VzIH0gPSBSZWFjdC51c2VDb250ZXh0KFxuICAgIFN0eWxlQ29udGV4dFxuICApO1xuXG4gIGNvbnN0IG9uUHJlc3NXaXRoRm9jdXNDb250cm9sID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChmb3JjZVRleHRJbnB1dEZvY3VzICYmICFpc1RleHRJbnB1dEZvY3VzZWQpIHtcbiAgICAgIGZvcmNlRm9jdXMoKTtcbiAgICB9XG4gICAgb25QcmVzcz8uKCk7XG4gIH0sIFtmb3JjZVRleHRJbnB1dEZvY3VzLCBmb3JjZUZvY3VzLCBpc1RleHRJbnB1dEZvY3VzZWQsIG9uUHJlc3NdKTtcblxuICByZXR1cm4gKFxuICAgIDxWaWV3IHN0eWxlPXtbc3R5bGVzLmNvbnRhaW5lciwgc3R5bGVdfT5cbiAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgIGljb249e25hbWV9XG4gICAgICAgIHN0eWxlPXtzdHlsZXMuaWNvbkJ1dHRvbn1cbiAgICAgICAgc2l6ZT17SUNPTl9TSVpFfVxuICAgICAgICBvblByZXNzPXtvblByZXNzV2l0aEZvY3VzQ29udHJvbH1cbiAgICAgICAgey4uLnJlc3R9XG4gICAgICAvPlxuICAgIDwvVmlldz5cbiAgKTtcbn07XG5UZXh0SW5wdXRJY29uLmRpc3BsYXlOYW1lID0gJ1RleHRJbnB1dC5JY29uJztcblxuVGV4dElucHV0SWNvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGZvcmNlVGV4dElucHV0Rm9jdXM6IHRydWUsXG59O1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGNvbnRhaW5lcjoge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHdpZHRoOiBJQ09OX1NJWkUsXG4gICAgaGVpZ2h0OiBJQ09OX1NJWkUsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICB9LFxuICBpY29uQnV0dG9uOiB7XG4gICAgbWFyZ2luOiAwLFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRJbnB1dEljb247XG5cbi8vIEBjb21wb25lbnQtZG9jcyBpZ25vcmUtbmV4dC1saW5lXG5leHBvcnQgeyBJY29uQWRvcm5tZW50IH07XG4iXX0=