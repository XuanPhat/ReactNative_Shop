{"version":3,"sources":["AvatarIcon.tsx"],"names":["defaultSize","Avatar","size","theme","rest","backgroundColor","primary","StyleSheet","textColor","white","width","height","borderRadius","styles","container","justifyContent","alignItems"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,WAAW,GAAjB,EAAA;;AAyCA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAA,IAAA,EAAgE;AAAA,MAA/D,IAA+D,GAAA,IAAA,CAA/D,IAA+D;AAAA,kBAAA,IAAA,CAAvDC,IAAuD;AAAA,MAAvDA,IAAuD,0BAA/D,WAA+D;AAAA,MAA/D,KAA+D,GAAA,IAAA,CAA/D,KAA+D;AAAA,MAA5BC,KAA4B,GAAA,IAAA,CAA5BA,KAA4B;AAAA,MAAlBC,IAAkB,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,OAAA,CAAA,CAAA;;AAC7E,MAAA,KAAA,GACEG,YAAAA,CAAAA,UAAAA,CAAAA,OAAAA,CAAAA,KAAAA,KADF,EAAA;AAAA,8BAAA,KAAA,CAAQF,eAAR;AAAA,MAAQA,eAAR,sCAA0BF,KAAK,CAALA,MAAAA,CAAaG,OAAvC;AAAA,MAAA,SAAA,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,iBAAA,CAAA,CAAA;;AAEA,MAAME,SAAS,GACbJ,IAAI,CAAJA,KAAAA,KACC,CAAA,GAAA,MAAA,CAAA,OAAA,EAAA,eAAA,EAAA,OAAA,KAAA,oBAAA,GAA0DK,OAAAA,CAF7D,KACEL,CADF;AAIA,SACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA,QAAA,CAAA;AACE,IAAA,KAAK,EAAE,CACL;AACEM,MAAAA,KAAK,EADP,IAAA;AAEEC,MAAAA,MAAM,EAFR,IAAA;AAGEC,MAAAA,YAAY,EAAEV,IAAI,GAHpB,CAAA;AAIEG,MAAAA,eAAAA,EAAAA;AAJF,KADK,EAOLQ,MAAM,CAPD,SAAA,EAAA,SAAA;AADT,GAAA,EAAA,IAAA,CAAA,EAaE,KAAA,CAAA,aAAA,CAAC,KAAA,CAAD,OAAA,EAAA;AAAM,IAAA,MAAM,EAAZ,IAAA;AAAoB,IAAA,KAAK,EAAzB,SAAA;AAAsC,IAAA,IAAI,EAAEX,IAAI,GAAG;AAAnD,GAAA,CAbF,CADF;AAPF,CAAA;;AA0BAD,MAAM,CAANA,WAAAA,GAAAA,aAAAA;;AAEA,IAAMY,MAAM,GAAG,YAAA,CAAA,UAAA,CAAA,MAAA,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,cAAc,EADL,QAAA;AAETC,IAAAA,UAAU,EAAE;AAFH;AADoB,CAAlB,CAAf;;eAOe,CAAA,GAAA,QAAA,CAAA,SAAA,EAAA,MAAA,C","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport color from 'color';\nimport Icon from '../Icon';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\nimport type { IconSource } from './../Icon';\n\nconst defaultSize = 64;\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Icon to display for the `Avatar`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the icon.\n   */\n  color?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Icon size={24} icon=\"folder\" />\n * );\n * ```\n */\nconst Avatar = ({ icon, size = defaultSize, style, theme, ...rest }: Props) => {\n  const { backgroundColor = theme.colors.primary, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor =\n    rest.color ||\n    (color(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : white);\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      <Icon source={icon} color={textColor} size={size * 0.6} />\n    </View>\n  );\n};\n\nAvatar.displayName = 'Avatar.Icon';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(Avatar);\n"]}