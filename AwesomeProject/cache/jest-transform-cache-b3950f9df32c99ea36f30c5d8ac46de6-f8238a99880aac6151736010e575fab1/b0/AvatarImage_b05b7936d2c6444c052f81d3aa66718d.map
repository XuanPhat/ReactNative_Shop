{"version":3,"sources":["AvatarImage.tsx"],"names":["defaultSize","AvatarImage","size","theme","rest","colors","backgroundColor","primary","StyleSheet","width","height","borderRadius","source"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAQA,IAAA,QAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAjB,EAAA;;AA4CA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAA,IAAA,EAMP;AAAA,kBAAA,IAAA,CALXC,IAKW;AAAA,MALXA,IAKW,0BANQ,WAMR;AAAA,MANQ,MAMR,GAAA,IAAA,CANQ,MAMR;AAAA,MANQ,KAMR,GAAA,IAAA,CANQ,KAMR;AAAA,MAFXC,KAEW,GAAA,IAAA,CAFXA,KAEW;AAAA,MADRC,IACQ,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,MAAA,EAAA,QAAA,EAAA,OAAA,EAAA,OAAA,CAAA,CAAA;;AAAA,MACHC,MADG,GACX,KADW,CACHA,MADG;;AAAA,cAGkCG,YAAAA,CAAAA,UAAAA,CAAAA,OAAAA,CAAAA,KAAAA,KAA7C,EAHW;AAAA,oCAGHF,eAHG;AAAA,MAGHA,eAHG,sCAGeD,MAAM,CAACE,OAHtB;;AAKX,SACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA,QAAA,CAAA;AACE,IAAA,KAAK,EAAE,CACL;AACEE,MAAAA,KAAK,EADP,IAAA;AAEEC,MAAAA,MAAM,EAFR,IAAA;AAGEC,MAAAA,YAAY,EAAET,IAAI,GAHpB,CAAA;AAIEI,MAAAA,eAAAA,EAAAA;AAJF,KADK,EAAA,KAAA;AADT,GAAA,EAAA,IAAA,CAAA,EAYG,OAAA,MAAA,KAAA,UAAA,IAAgCM,MAAM,CAAC;AAAEV,IAAAA,IAAAA,EAAAA;AAAF,GAAD,CAZzC,EAaG,OAAA,MAAA,KAAA,UAAA,IACC,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,KAAA,EAAA;AACE,IAAA,MAAM,EADR,MAAA;AAEE,IAAA,KAAK,EAAE;AAAEO,MAAAA,KAAK,EAAP,IAAA;AAAeC,MAAAA,MAAM,EAArB,IAAA;AAA6BC,MAAAA,YAAY,EAAET,IAAI,GAAG;AAAlD;AAFT,GAAA,CAdJ,CADF;AAXF,CAAA;;AAmCAD,WAAW,CAAXA,WAAAA,GAAAA,cAAAA;;eAEe,CAAA,GAAA,QAAA,CAAA,SAAA,EAAA,WAAA,C","sourcesContent":["import * as React from 'react';\nimport {\n  Image,\n  ImageSourcePropType,\n  StyleSheet,\n  View,\n  ViewStyle,\n  StyleProp,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\n\nconst defaultSize = 64;\n\nexport type AvatarImageSource =\n  | ImageSourcePropType\n  | ((props: { size: number }) => React.ReactNode);\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Image to display for the `Avatar`.\n   * It accepts a standard React Native Image `source` prop\n   * Or a function that returns an `Image`.\n   */\n  source: AvatarImageSource;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-image.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Image size={24} source={require('../assets/avatar.png')} />\n * );\n * export default MyComponent\n * ```\n */\nconst AvatarImage = ({\n  size = defaultSize,\n  source,\n  style,\n  theme,\n  ...rest\n}: Props) => {\n  const { colors } = theme;\n\n  const { backgroundColor = colors.primary } = StyleSheet.flatten(style) || {};\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        style,\n      ]}\n      {...rest}\n    >\n      {typeof source === 'function' && source({ size })}\n      {typeof source !== 'function' && (\n        <Image\n          source={source}\n          style={{ width: size, height: size, borderRadius: size / 2 }}\n        />\n      )}\n    </View>\n  );\n};\n\nAvatarImage.displayName = 'Avatar.Image';\n\nexport default withTheme(AvatarImage);\n"]}