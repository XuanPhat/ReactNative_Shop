82595006356248193fbfbbe377acdb9f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _Badge = _interopRequireDefault(require("./Badge"));

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var withBadge = function withBadge(value) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return function (WrappedComponent) {
    var WithBadge = function WithBadge(props) {
      var bottom = options.bottom,
          _options$hidden = options.hidden,
          hidden = _options$hidden === void 0 ? false : _options$hidden,
          left = options.left,
          containerStyle = options.containerStyle,
          badgeProps = __rest(options, ["bottom", "hidden", "left", "containerStyle"]);

      var _options$right = options.right,
          right = _options$right === void 0 ? -16 : _options$right,
          _options$top = options.top,
          top = _options$top === void 0 ? -1 : _options$top;

      if (!value) {
        right = -3;
        top = 3;
      }

      var badgeValue = typeof value === 'function' ? value(props) : value;
      return _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.container, containerStyle])
      }, _react.default.createElement(WrappedComponent, props), !hidden && _react.default.createElement(_Badge.default, (0, _extends2.default)({
        value: badgeValue,
        status: "error",
        containerStyle: _reactNative.StyleSheet.flatten([styles.badgeContainer, {
          bottom: bottom,
          left: left,
          right: right,
          top: top
        }])
      }, badgeProps)));
    };

    WithBadge.displayName = "WithBadge(" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + ")";
    return WithBadge;
  };
};

var styles = _reactNative.StyleSheet.create({
  badgeContainer: {
    position: 'absolute'
  },
  container: {
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative'
  }
});

var _default = withBadge;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndpdGhCYWRnZS5qcyJdLCJuYW1lcyI6WyJfX3Jlc3QiLCJzIiwiZSIsInQiLCJwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIndpdGhCYWRnZSIsInZhbHVlIiwib3B0aW9ucyIsIldyYXBwZWRDb21wb25lbnQiLCJXaXRoQmFkZ2UiLCJwcm9wcyIsImJvdHRvbSIsImhpZGRlbiIsImxlZnQiLCJjb250YWluZXJTdHlsZSIsImJhZGdlUHJvcHMiLCJyaWdodCIsInRvcCIsImJhZGdlVmFsdWUiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsInN0eWxlcyIsImNvbnRhaW5lciIsImJhZGdlQ29udGFpbmVyIiwiZGlzcGxheU5hbWUiLCJuYW1lIiwiY3JlYXRlIiwicG9zaXRpb24iLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVdBOztBQUNBOztBQUNBOztBQWJBLElBQUlBLE1BQU0sR0FBSSxRQUFRLEtBQUtBLE1BQWQsSUFBeUIsVUFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ2xELE1BQUlDLENBQUMsR0FBRyxFQUFSOztBQUNBLE9BQUssSUFBSUMsQ0FBVCxJQUFjSCxDQUFkO0FBQWlCLFFBQUlJLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDUCxDQUFyQyxFQUF3Q0csQ0FBeEMsS0FBOENGLENBQUMsQ0FBQ08sT0FBRixDQUFVTCxDQUFWLElBQWUsQ0FBakUsRUFDYkQsQ0FBQyxDQUFDQyxDQUFELENBQUQsR0FBT0gsQ0FBQyxDQUFDRyxDQUFELENBQVI7QUFESjs7QUFFQSxNQUFJSCxDQUFDLElBQUksSUFBTCxJQUFhLE9BQU9JLE1BQU0sQ0FBQ0sscUJBQWQsS0FBd0MsVUFBekQsRUFDSSxL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a0I7QUFDN0JILEVBQUFBLGNBQWMsRUFBRTtBQUNaSSxJQUFBQSxRQUFRLEVBQUU7QUFERSxHQURhO0FBSTdCTCxFQUFBQSxTQUFTLEVBQUU7QUFDUE0sSUFBQUEsVUFBVSxFQUFFLFFBREw7QUFFUEMsSUFBQUEsY0FBYyxFQUFFLFFBRlQ7QUFHUEYsSUFBQUEsUUFBUSxFQUFFO0FBSEg7QUFKa0IsQ0FBbEIsQ0FBZjs7ZUFVZXRCLFMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3R5bGVTaGVldCwgVmlldyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgQmFkZ2UgZnJvbSAnLi9CYWRnZSc7XG5jb25zdCB3aXRoQmFkZ2UgPSAodmFsdWUsIG9wdGlvbnMgPSB7fSkgPT4gKFdyYXBwZWRDb21wb25lbnQpID0+IHtcbiAgICBjb25zdCBXaXRoQmFkZ2UgPSAocHJvcHMpID0+IHtcbiAgICAgICAgY29uc3QgeyBib3R0b20sIGhpZGRlbiA9IGZhbHNlLCBsZWZ0LCBjb250YWluZXJTdHlsZSB9ID0gb3B0aW9ucywgYmFkZ2VQcm9wcyA9IF9fcmVzdChvcHRpb25zLCBbXCJib3R0b21cIiwgXCJoaWRkZW5cIiwgXCJsZWZ0XCIsIFwiY29udGFpbmVyU3R5bGVcIl0pO1xuICAgICAgICBsZXQgeyByaWdodCA9IC0xNiwgdG9wID0gLTEgfSA9IG9wdGlvbnM7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJpZ2h0ID0gLTM7XG4gICAgICAgICAgICB0b3AgPSAzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJhZGdlVmFsdWUgPSB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgPyB2YWx1ZShwcm9wcykgOiB2YWx1ZTtcbiAgICAgICAgcmV0dXJuICg8VmlldyBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtzdHlsZXMuY29udGFpbmVyLCBjb250YWluZXJTdHlsZV0pfT5cbiAgICAgICAgPFdyYXBwZWRDb21wb25lbnQgey4uLnByb3BzfS8+XG5cbiAgICAgICAgeyFoaWRkZW4gJiYgKDxCYWRnZSB2YWx1ZT17YmFkZ2VWYWx1ZX0gc3RhdHVzPVwiZXJyb3JcIiBjb250YWluZXJTdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgICAgIHN0eWxlcy5iYWRnZUNvbnRhaW5lcixcbiAgICAgICAgICAgIHsgYm90dG9tLCBsZWZ0LCByaWdodCwgdG9wIH0sXG4gICAgICAgIF0pfSB7Li4uYmFkZ2VQcm9wc30vPil9XG4gICAgICA8L1ZpZXc+KTtcbiAgICB9O1xuICAgIFdpdGhCYWRnZS5kaXNwbGF5TmFtZSA9IGBXaXRoQmFkZ2UoJHtXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50J30pYDtcbiAgICByZXR1cm4gV2l0aEJhZGdlO1xufTtcbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBiYWRnZUNvbnRhaW5lcjoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB9LFxuICAgIGNvbnRhaW5lcjoge1xuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICB9LFxufSk7XG5leHBvcnQgZGVmYXVsdCB3aXRoQmFkZ2U7XG4iXX0=