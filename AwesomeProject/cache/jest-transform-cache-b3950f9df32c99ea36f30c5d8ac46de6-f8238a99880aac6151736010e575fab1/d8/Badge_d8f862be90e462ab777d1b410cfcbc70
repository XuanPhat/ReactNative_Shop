e0bbafaa45ef795f4efe48c84b0c0e27
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Badge = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _config = require("../config");

var _helpers = require("../helpers");

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var Badge = function Badge(props) {
  var containerStyle = props.containerStyle,
      textStyle = props.textStyle,
      textProps = props.textProps,
      badgeStyle = props.badgeStyle,
      onPress = props.onPress,
      _props$Component = props.Component,
      Component = _props$Component === void 0 ? onPress ? _reactNative.TouchableOpacity : _reactNative.View : _props$Component,
      value = props.value,
      theme = props.theme,
      _props$status = props.status,
      status = _props$status === void 0 ? 'primary' : _props$status,
      attributes = __rest(props, ["containerStyle", "textStyle", "textProps", "badgeStyle", "onPress", "Component", "value", "theme", "status"]);

  var element = (0, _helpers.renderNode)(_reactNative.Text, value, Object.assign({
    style: _reactNative.StyleSheet.flatten([styles.text, textStyle && textStyle])
  }, textProps));
  return _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([containerStyle && containerStyle])
  }, _react.default.createElement(Component, (0, _extends2.default)({}, attributes, {
    style: _reactNative.StyleSheet.flatten([{
      alignSelf: 'center',
      minWidth: size,
      height: size,
      borderRadius: size / 2,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: theme.colors[status],
      borderWidth: _reactNative.StyleSheet.hairlineWidth,
      borderColor: '#fff'
    }, !element && styles.miniBadge, badgeStyle && badgeStyle]),
    onPress: onPress
  }), element));
};

exports.Badge = Badge;
var size = 18;
var miniSize = 8;

var styles = _reactNative.StyleSheet.create({
  miniBadge: {
    paddingHorizontal: 0,
    paddingVertical: 0,
    minWidth: miniSize,
    height: miniSize,
    borderRadius: miniSize / 2
  },
  text: {
    fontSize: 12,
    color: 'white',
    paddingHorizontal: 4
  }
});

var _default = (0, _config.withTheme)(Badge, 'Badge');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJhZGdlLmpzIl0sIm5hbWVzIjpbIl9fcmVzdCIsInMiLCJlIiwidCIsInAiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaSIsImxlbmd0aCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQmFkZ2UiLCJwcm9wcyIsImNvbnRhaW5lclN0eWxlIiwidGV4dFN0eWxlIiwidGV4dFByb3BzIiwiYmFkZ2VTdHlsZSIsIm9uUHJlc3MiLCJDb21wb25lbnQiLCJUb3VjaGFibGVPcGFjaXR5IiwiVmlldyIsInZhbHVlIiwidGhlbWUiLCJzdGF0dXMiLCJhdHRyaWJ1dGVzIiwiZWxlbWVudCIsIlRleHQiLCJhc3NpZ24iLCJzdHlsZSIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwic3R5bGVzIiwidGV4dCIsImFsaWduU2VsZiIsIm1pbldpZHRoIiwic2l6ZSIsImhlaWdodCIsImJvcmRlclJhZGl1cyIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsImJhY2tncm91bmRDb2xvciIsImNvbG9ycyIsImJvcmRlcldpZHRoIiwiaGFpcmxpbmVXaWR0aCIsImJvcmRlckNvbG9yIiwibWluaUJhZGdlIiwibWluaVNpemUiLCJjcmVhdGUiLCJwYWRkaW5nSG9yaXpvbnRhbCIsInBhZGRpbmdWZXJ0aWNhbCIsImZvbnRTaXplIiwiY29sb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVdBOztBQUNBOztBQUNBOztBQUNBOztBQWRBLElBQUlBLE1BQU0sR0FBSSxRQUFRLEtBQUtBLE1BQWQsSUFBeUIsVUFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ2xELE1BQUlDLENBQUMsR0FBRyxFQUFSOztBQUNBLE9BQUssSUFBSUMsQ0FBVCxJQUFjSCxDQUFkO0FBQWlCLFFBQUlJLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDUCxDQUFy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QUFNSUMsTUFBQUEsY0FBYyxFQUFFLFFBTnBCO0FBT0lDLE1BQUFBLGVBQWUsRUFBRWxCLEtBQUssQ0FBQ21CLE1BQU4sQ0FBYWxCLE1BQWIsQ0FQckI7QUFRSW1CLE1BQUFBLFdBQVcsRUFBRWIsd0JBQVdjLGFBUjVCO0FBU0lDLE1BQUFBLFdBQVcsRUFBRTtBQVRqQixLQURtRCxFQVluRCxDQUFDbkIsT0FBRCxJQUFZTSxNQUFNLENBQUNjLFNBWmdDLEVBYW5EN0IsVUFBVSxJQUFJQSxVQWJxQyxDQUFuQixDQUFsQztBQWNFLElBQUEsT0FBTyxFQUFFQztBQWRYLE1BZUdRLE9BZkgsQ0FETSxDQUFSO0FBbUJILENBdEJEOzs7QUF1QkEsSUFBTVUsSUFBSSxHQUFHLEVBQWI7QUFDQSxJQUFNVyxRQUFRLEdBQUcsQ0FBakI7O0FBQ0EsSUFBTWYsTUFBTSxHQUFHRix3QkFBV2tCLE1BQVgsQ0FBa0I7QUFDN0JGLEVBQUFBLFNBQVMsRUFBRTtBQUNQRyxJQUFBQSxpQkFBaUIsRUFBRSxDQURaO0FBRVBDLElBQUFBLGVBQWUsRUFBRSxDQUZWO0FBR1BmLElBQUFBLFFBQVEsRUFBRVksUUFISDtBQUlQVixJQUFBQSxNQUFNLEVBQUVVLFFBSkQ7QUFLUFQsSUFBQUEsWUFBWSxFQUFFUyxRQUFRLEdBQUc7QUFMbEIsR0FEa0I7QUFRN0JkLEVBQUFBLElBQUksRUFBRTtBQUNGa0IsSUFBQUEsUUFBUSxFQUFFLEVBRFI7QUFFRkMsSUFBQUEsS0FBSyxFQUFFLE9BRkw7QUFHRkgsSUFBQUEsaUJBQWlCLEVBQUU7QUFIakI7QUFSdUIsQ0FBbEIsQ0FBZjs7ZUFlZSx1QkFBVXJDLEtBQVYsRUFBaUIsT0FBakIsQyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBUZXh0LCBWaWV3LCBUb3VjaGFibGVPcGFjaXR5LCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgcmVuZGVyTm9kZSB9IGZyb20gJy4uL2hlbHBlcnMnO1xuY29uc3QgQmFkZ2UgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGNvbnRhaW5lclN0eWxlLCB0ZXh0U3R5bGUsIHRleHRQcm9wcywgYmFkZ2VTdHlsZSwgb25QcmVzcywgQ29tcG9uZW50ID0gb25QcmVzcyA/IFRvdWNoYWJsZU9wYWNpdHkgOiBWaWV3LCB2YWx1ZSwgdGhlbWUsIHN0YXR1cyA9ICdwcmltYXJ5JyB9ID0gcHJvcHMsIGF0dHJpYnV0ZXMgPSBfX3Jlc3QocHJvcHMsIFtcImNvbnRhaW5lclN0eWxlXCIsIFwidGV4dFN0eWxlXCIsIFwidGV4dFByb3BzXCIsIFwiYmFkZ2VTdHlsZVwiLCBcIm9uUHJlc3NcIiwgXCJDb21wb25lbnRcIiwgXCJ2YWx1ZVwiLCBcInRoZW1lXCIsIFwic3RhdHVzXCJdKTtcbiAgICBjb25zdCBlbGVtZW50ID0gcmVuZGVyTm9kZShUZXh0LCB2YWx1ZSwgT2JqZWN0LmFzc2lnbih7IHN0eWxlOiBTdHlsZVNoZWV0LmZsYXR0ZW4oW3N0eWxlcy50ZXh0LCB0ZXh0U3R5bGUgJiYgdGV4dFN0eWxlXSkgfSwgdGV4dFByb3BzKSk7XG4gICAgcmV0dXJuICg8VmlldyBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtjb250YWluZXJTdHlsZSAmJiBjb250YWluZXJTdHlsZV0pfT5cbiAgICAgIDxDb21wb25lbnQgey4uLmF0dHJpYnV0ZXN9IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICB7XG4gICAgICAgICAgICBhbGlnblNlbGY6ICdjZW50ZXInLFxuICAgICAgICAgICAgbWluV2lkdGg6IHNpemUsXG4gICAgICAgICAgICBoZWlnaHQ6IHNpemUsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IHNpemUgLyAyLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9yc1tzdGF0dXNdLFxuICAgICAgICAgICAgYm9yZGVyV2lkdGg6IFN0eWxlU2hlZXQuaGFpcmxpbmVXaWR0aCxcbiAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnI2ZmZicsXG4gICAgICAgIH0sXG4gICAgICAgICFlbGVtZW50ICYmIHN0eWxlcy5taW5pQmFkZ2UsXG4gICAgICAgIGJhZGdlU3R5bGUgJiYgYmFkZ2VTdHlsZSxcbiAgICBdKX0gb25QcmVzcz17b25QcmVzc30+XG4gICAgICAgIHtlbGVtZW50fVxuICAgICAgPC9Db21wb25lbnQ+XG4gICAgPC9WaWV3Pik7XG59O1xuY29uc3Qgc2l6ZSA9IDE4O1xuY29uc3QgbWluaVNpemUgPSA4O1xuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIG1pbmlCYWRnZToge1xuICAgICAgICBwYWRkaW5nSG9yaXpvbnRhbDogMCxcbiAgICAgICAgcGFkZGluZ1ZlcnRpY2FsOiAwLFxuICAgICAgICBtaW5XaWR0aDogbWluaVNpemUsXG4gICAgICAgIGhlaWdodDogbWluaVNpemUsXG4gICAgICAgIGJvcmRlclJhZGl1czogbWluaVNpemUgLyAyLFxuICAgIH0sXG4gICAgdGV4dDoge1xuICAgICAgICBmb250U2l6ZTogMTIsXG4gICAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgICBwYWRkaW5nSG9yaXpvbnRhbDogNCxcbiAgICB9LFxufSk7XG5leHBvcnQgeyBCYWRnZSB9O1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKEJhZGdlLCAnQmFkZ2UnKTtcbiJdfQ==