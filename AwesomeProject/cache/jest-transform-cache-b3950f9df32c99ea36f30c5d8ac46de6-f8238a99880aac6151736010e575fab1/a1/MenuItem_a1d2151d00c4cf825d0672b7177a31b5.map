{"version":3,"sources":["MenuItem.tsx"],"names":["MenuItem","React","titleStyle","disabledColor","theme","white","black","titleColor","disabled","iconColor","styles","row","icon","color","minWidth","maxWidth","iconWidth","container","paddingHorizontal","height","justifyContent","flexDirection","width","title","fontSize","item","marginHorizontal","content","widthWithIcon"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  TextStyle,\n  ViewStyle,\n  StyleProp,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  style?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item icon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item icon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item icon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item icon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nclass MenuItem extends React.Component<Props> {\n  static displayName = 'Menu.Item';\n\n  render() {\n    const {\n      icon,\n      title,\n      disabled,\n      onPress,\n      theme,\n      style,\n      contentStyle,\n      testID,\n      titleStyle,\n    } = this.props;\n\n    const disabledColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    const titleColor = disabled\n      ? disabledColor\n      : color(theme.colors.text).alpha(0.87).rgb().string();\n\n    const iconColor = disabled\n      ? disabledColor\n      : color(theme.colors.text).alpha(0.54).rgb().string();\n\n    return (\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={onPress}\n        disabled={disabled}\n        testID={testID}\n        accessibilityRole=\"menuitem\"\n        accessibilityState={{ disabled }}\n      >\n        <View style={styles.row}>\n          {icon ? (\n            <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n              <Icon source={icon} size={24} color={iconColor} />\n            </View>\n          ) : null}\n          <View\n            style={[\n              styles.item,\n              styles.content,\n              icon ? styles.widthWithIcon : null,\n              contentStyle,\n            ]}\n            pointerEvents=\"none\"\n          >\n            <Text\n              selectable={false}\n              numberOfLines={1}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n          </View>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n\n// @component-docs ignore-next-line\nexport { MenuItem };\n"]}