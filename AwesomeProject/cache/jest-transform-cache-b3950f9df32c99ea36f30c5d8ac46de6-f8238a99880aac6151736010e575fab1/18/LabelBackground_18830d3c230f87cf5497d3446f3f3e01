5653065ee4c0a02c584fd5c1311659b0
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _AnimatedText = _interopRequireDefault(require("../../Typography/AnimatedText"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var LabelBackground = function LabelBackground(_ref) {
  var parentState = _ref.parentState,
      _ref$labelProps = _ref.labelProps,
      placeholderStyle = _ref$labelProps.placeholderStyle,
      baseLabelTranslateX = _ref$labelProps.baseLabelTranslateX,
      topPosition = _ref$labelProps.topPosition,
      hasActiveOutline = _ref$labelProps.hasActiveOutline,
      label = _ref$labelProps.label,
      backgroundColor = _ref$labelProps.backgroundColor,
      labelStyle = _ref.labelStyle;
  var hasFocus = hasActiveOutline || parentState.value;
  var opacity = parentState.labeled.interpolate({
    inputRange: [0, 1],
    outputRange: [hasFocus ? 1 : 0, 0]
  });
  var labelTranslationX = {
    transform: [{
      translateX: parentState.labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [-baseLabelTranslateX, 0]
      })
    }]
  };
  return label ? [React.createElement(_reactNative.Animated.View, {
    key: "labelBackground-view",
    pointerEvents: "none",
    style: [_reactNative.StyleSheet.absoluteFill, styles.view, {
      backgroundColor: backgroundColor,
      opacity: opacity
    }, labelTranslationX]
  }), React.createElement(_AnimatedText.default, {
    key: "labelBackground-text",
    style: [placeholderStyle, labelStyle, styles.outlinedLabel, {
      top: topPosition + 1,
      backgroundColor: backgroundColor,
      opacity: opacity,
      transform: [].concat((0, _toConsumableArray2.default)(labelStyle.transform), [{
        scaleY: parentState.labeled.interpolate({
          inputRange: [0, 1],
          outputRange: [0.2, 1]
        })
      }])
    }],
    numberOfLines: 1
  }, label)] : null;
};

var _default = LabelBackground;
exports.default = _default;

var styles = _reactNative.StyleSheet.create({
  view: {
    position: 'absolute',
    top: 6,
    left: 10,
    width: 8,
    height: 2
  },
  outlinedLabel: {
    position: 'absolute',
    left: 18,
    paddingHorizontal: 0,
    color: 'transparent'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxhYmVsQmFja2dyb3VuZC50c3giXSwibmFtZXMiOlsiTGFiZWxCYWNrZ3JvdW5kIiwibGFiZWxQcm9wcyIsImJhY2tncm91bmRDb2xvciIsImxhYmVsU3R5bGUiLCJoYXNGb2N1cyIsImhhc0FjdGl2ZU91dGxpbmUiLCJwYXJlbnRTdGF0ZSIsIm9wYWNpdHkiLCJpbnB1dFJhbmdlIiwib3V0cHV0UmFuZ2UiLCJsYWJlbFRyYW5zbGF0aW9uWCIsInRyYW5zZm9ybSIsInRyYW5zbGF0ZVgiLCJsYWJlbCIsIlN0eWxlU2hlZXQiLCJzdHlsZXMiLCJ0b3AiLCJ0b3BQb3NpdGlvbiIsInNjYWxlWSIsInZpZXciLCJwb3NpdGlvbiIsImxlZnQiLCJ3aWR0aCIsImhlaWdodCIsIm91dGxpbmVkTGFiZWwiLCJwYWRkaW5nSG9yaXpvbnRhbCIsImNvbG9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLElBQUEsS0FBQSxHQUFBLHVCQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsWUFBQSxHQUFBLE9BQUEsQ0FBQSxjQUFBLENBQUE7O0FBRUEsSUFBQSxhQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsK0JBQUEsQ0FBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJQSxJQUFNQSxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLE9BV0k7QUFBQSxNQVhILFdBV0csUUFYSCxXQVdHO0FBQUEsNkJBVDFCQyxVQVMwQjtBQUFBLE1BVGQsZ0JBU2MsbUJBVGQsZ0JBU2M7QUFBQSxNQVRkLG1CQVNjLG1CQVRkLG1CQVNjO0FBQUEsTUFUZCxXQVNjLG1CQVRkLFdBU2M7QUFBQSxNQVRkLGdCQVNjLG1CQVRkLGdCQVNjO0FBQUEsTUFUZCxLQVNjLG1CQVRkLEtBU2M7QUFBQSxNQUh4QkMsZUFHd0IsbUJBSHhCQSxlQUd3QjtBQUFBLE1BRDFCQyxVQUMwQixRQUQxQkEsVUFDMEI7QUFDMUIsTUFBTUMsUUFBUSxHQUFHQyxnQkFBZ0IsSUFBSUMsV0FBVyxDQUFoRCxLQUFBO0FBQ0EsTUFBTUMsT0FBTyxHQUFHLFdBQVcsQ0FBWCxPQUFBLENBQUEsV0FBQSxDQUFnQztBQUM5Q0MsSUFBQUEsVUFBVSxFQUFFLENBQUEsQ0FBQSxFQURrQyxDQUNsQyxDQURrQztBQUU5Q0MsSUFBQUEsV0FBVyxFQUFFLENBQUNMLFFBQVEsR0FBQSxDQUFBLEdBQVQsQ0FBQSxFQUFBLENBQUE7QUFGaUMsR0FBaEMsQ0FBaEI7QUFLQSxNQUFNTSxpQkFBaUIsR0FBRztBQUN4QkMsSUFBQUEsU0FBUyxFQUFFLENBQ1Q7QUFDRUMsTUFBQUEsVUFBVSxFQUFFLFdBQVcsQ0FBWCxPQUFBLENBQUEsV0FBQSxDQUFnQztBQUMxQ0osUUFBQUEsVUFBVSxFQUFFLENBQUEsQ0FBQSxFQUQ4QixDQUM5QixDQUQ4QjtBQUUxQ0MsUUFBQUEsV0FBVyxFQUFFLENBQUMsQ0FBRCxtQkFBQSxFQUFBLENBQUE7QUFGNkIsT0FBaEM7QUFEZCxLQURTO0FBRGEsR0FBMUI7QUFXQSxTQUFPSSxLQUFLLEdBQ1IsQ0FDRSxLQUFBLENBQUEsYUFBQSxDQUFDLFlBQUEsQ0FBRCxRQUFDLENBQUQsSUFBQSxFQUFBO0FBQ0UsSUFBQSxHQUFHLEVBREwsc0JBQUE7QUFFRSxJQUFBLGFBQWEsRUFGZixNQUFBO0FBR0UsSUFBQSxLQUFLLEVBQUUsQ0FDTEMsWUFBQUEsQ0FBQUEsVUFBQUEsQ0FESyxZQUFBLEVBRUxDLE1BQU0sQ0FGRCxJQUFBLEVBR0w7QUFDRWIsTUFBQUEsZUFERixFQUNFQSxlQURGO0FBRUVLLE1BQUFBLE9BQUFBLEVBQUFBO0FBRkYsS0FISyxFQUFBLGlCQUFBO0FBSFQsR0FBQSxDQURGLEVBY0UsS0FBQSxDQUFBLGFBQUEsQ0FBQyxhQUFBLENBQUQsT0FBQSxFQUFBO0FBQ0UsSUFBQSxHQUFHLEVBREwsc0JBQUE7QUFFRSxJQUFBLEtBQUssRUFBRSxDQUFBLGdCQUFBLEVBQUEsVUFBQSxFQUdMUSxNQUFNLENBSEQsYUFBQSxFQUlMO0FBQ0VDLE1BQUFBLEdBQUcsRUFBRUMsV0FBVyxHQURsQixDQUFBO0FBRUVmLE1BQUFBLGVBRkYsRUFFRUEsZUFGRjtBQUdFSyxNQUFBQSxPQUhGLEVBR0VBLE9BSEY7QUFJRUksTUFBQUEsU0FBUyw2Q0FDSlIsVUFBVSxDQURKLFNBQUYsSUFFUDtBQUNFZSxRQUFBQSxNQUFNLEVBQUUsV0FBVyxDQUFYLE9BQUEsQ0FBQSxXQUFBLENBQWdDO0FBQ3RDVixVQUFBQSxVQUFVLEVBQUUsQ0FBQSxDQUFBLEVBRDBCLENBQzFCLENBRDBCO0FBRXRDQyxVQUFBQSxXQUFXLEVBQUUsQ0FBQSxHQUFBLEVBQUEsQ0FBQTtBQUZ5QixTQUFoQztBQURWLE9BRk87QUFKWCxLQUpLLENBRlQ7QUFxQkUsSUFBQSxhQUFhLEVBQUU7QUFyQmpCLEdBQUEsRUFmTSxLQWVOLENBZEYsQ0FEUSxHQUFaLElBQUE7QUE3QkYsQ0FBQTs7ZUF5RWVULGU7OztBQUVmLElBQU1lLE1BQU0sR0FBRyxZQUFBLENBQUEsVUFBQSxDQUFBLE1BQUEsQ0FBa0I7QUFDL0JJLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxRQUFRLEVBREosVUFBQTtBQUVKSixJQUFBQSxHQUFHLEVBRkMsQ0FBQTtBQUdKSyxJQUFBQSxJQUFJLEVBSEEsRUFBQTtBQUlKQyxJQUFBQSxLQUFLLEVBSkQsQ0FBQTtBQUtKQyxJQUFBQSxNQUFNLEVBQUU7QUFMSixHQUR5QjtBQVEvQkMsRUFBQUEsYUFBYSxFQUFFO0FBQ2JKLElBQUFBLFFBQVEsRUFESyxVQUFBO0FBRWJDLElBQUFBLElBQUksRUFGUyxFQUFBO0FBR2JJLElBQUFBLGlCQUFpQixFQUhKLENBQUE7QUFJYkMsSUFBQUEsS0FBSyxFQUFFO0FBSk07QUFSZ0IsQ0FBbEIsQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEFuaW1hdGVkLCBTdHlsZVNoZWV0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuaW1wb3J0IEFuaW1hdGVkVGV4dCBmcm9tICcuLi8uLi9UeXBvZ3JhcGh5L0FuaW1hdGVkVGV4dCc7XG5cbmltcG9ydCB0eXBlIHsgTGFiZWxCYWNrZ3JvdW5kUHJvcHMgfSBmcm9tICcuLi90eXBlcyc7XG5cbmNvbnN0IExhYmVsQmFja2dyb3VuZCA9ICh7XG4gIHBhcmVudFN0YXRlLFxuICBsYWJlbFByb3BzOiB7XG4gICAgcGxhY2Vob2xkZXJTdHlsZSxcbiAgICBiYXNlTGFiZWxUcmFuc2xhdGVYLFxuICAgIHRvcFBvc2l0aW9uLFxuICAgIGhhc0FjdGl2ZU91dGxpbmUsXG4gICAgbGFiZWwsXG4gICAgYmFja2dyb3VuZENvbG9yLFxuICB9LFxuICBsYWJlbFN0eWxlLFxufTogTGFiZWxCYWNrZ3JvdW5kUHJvcHMpID0+IHtcbiAgY29uc3QgaGFzRm9jdXMgPSBoYXNBY3RpdmVPdXRsaW5lIHx8IHBhcmVudFN0YXRlLnZhbHVlO1xuICBjb25zdCBvcGFjaXR5ID0gcGFyZW50U3RhdGUubGFiZWxlZC5pbnRlcnBvbGF0ZSh7XG4gICAgaW5wdXRSYW5nZTogWzAsIDFdLFxuICAgIG91dHB1dFJhbmdlOiBbaGFzRm9jdXMgPyAxIDogMCwgMF0sXG4gIH0pO1xuXG4gIGNvbnN0IGxhYmVsVHJhbnNsYXRpb25YID0ge1xuICAgIHRyYW5zZm9ybTogW1xuICAgICAge1xuICAgICAgICB0cmFuc2xhdGVYOiBwYXJlbnRTdGF0ZS5sYWJlbGVkLmludGVycG9sYXRlKHtcbiAgICAgICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICAgICAgb3V0cHV0UmFuZ2U6IFstYmFzZUxhYmVsVHJhbnNsYXRlWCwgMF0sXG4gICAgICAgIH0pLFxuICAgICAgfSxcbiAgICBdLFxuICB9O1xuXG4gIHJldHVybiBsYWJlbFxuICAgID8gW1xuICAgICAgICA8QW5pbWF0ZWQuVmlld1xuICAgICAgICAgIGtleT1cImxhYmVsQmFja2dyb3VuZC12aWV3XCJcbiAgICAgICAgICBwb2ludGVyRXZlbnRzPVwibm9uZVwiXG4gICAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICAgIFN0eWxlU2hlZXQuYWJzb2x1dGVGaWxsLFxuICAgICAgICAgICAgc3R5bGVzLnZpZXcsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgb3BhY2l0eSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYWJlbFRyYW5zbGF0aW9uWCxcbiAgICAgICAgICBdfVxuICAgICAgICAvPixcbiAgICAgICAgPEFuaW1hdGVkVGV4dFxuICAgICAgICAgIGtleT1cImxhYmVsQmFja2dyb3VuZC10ZXh0XCJcbiAgICAgICAgICBzdHlsZT17W1xuICAgICAgICAgICAgcGxhY2Vob2xkZXJTdHlsZSxcbiAgICAgICAgICAgIGxhYmVsU3R5bGUsXG4gICAgICAgICAgICBzdHlsZXMub3V0bGluZWRMYWJlbCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdG9wOiB0b3BQb3NpdGlvbiArIDEsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgb3BhY2l0eSxcbiAgICAgICAgICAgICAgdHJhbnNmb3JtOiBbXG4gICAgICAgICAgICAgICAgLi4ubGFiZWxTdHlsZS50cmFuc2Zvcm0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc2NhbGVZOiBwYXJlbnRTdGF0ZS5sYWJlbGVkLmludGVycG9sYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRSYW5nZTogWzAsIDFdLFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRSYW5nZTogWzAuMiwgMV0sXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdfVxuICAgICAgICAgIG51bWJlck9mTGluZXM9ezF9XG4gICAgICAgID5cbiAgICAgICAgICB7bGFiZWx9XG4gICAgICAgIDwvQW5pbWF0ZWRUZXh0PixcbiAgICAgIF1cbiAgICA6IG51bGw7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMYWJlbEJhY2tncm91bmQ7XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgdmlldzoge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogNixcbiAgICBsZWZ0OiAxMCxcbiAgICB3aWR0aDogOCxcbiAgICBoZWlnaHQ6IDIsXG4gIH0sXG4gIG91dGxpbmVkTGFiZWw6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBsZWZ0OiAxOCxcbiAgICBwYWRkaW5nSG9yaXpvbnRhbDogMCxcbiAgICBjb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgfSxcbn0pO1xuIl19