09e01b80cbebf5d5c23c86c3c19d114d
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _helpers = require("../helpers");

var _Input = _interopRequireDefault(require("../input/Input"));

var _Icon = _interopRequireDefault(require("../icons/Icon"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var defaultSearchIcon = function defaultSearchIcon(theme) {
  return {
    type: 'material',
    size: 25,
    color: theme.colors.platform.android.grey,
    name: 'search'
  };
};

var defaultCancelIcon = function defaultCancelIcon(theme) {
  return {
    type: 'material',
    size: 25,
    color: theme.colors.platform.android.grey,
    name: 'arrow-back'
  };
};

var defaultClearIcon = function defaultClearIcon(theme) {
  return {
    type: 'material',
    size: 25,
    color: theme.colors.platform.android.grey,
    name: 'clear'
  };
};

var SearchBar = function (_Component) {
  (0, _inherits2.default)(SearchBar, _Component);

  var _super = _createSuper(SearchBar);

  function SearchBar(props) {
    var _this;

    (0, _classCallCheck2.default)(this, SearchBar);
    _this = _super.call(this, props);

    _this.focus = function () {
      _this.input.focus();
    };

    _this.blur = function () {
      _this.input.blur();
    };

    _this.clear = function () {
      _this.input.clear();

      _this.onChangeText('');

      _this.props.onClear();
    };

    _this.cancel = function () {
      _this.blur();

      _this.props.onCancel();
    };

    _this.onFocus = function (event) {
      _this.props.onFocus(event);

      _this.setState({
        hasFocus: true,
        isEmpty: _this.props.value === ''
      });
    };

    _this.onBlur = function (event) {
      _this.props.onBlur(event);

      _this.setState({
        hasFocus: false
      });
    };

    _this.onChangeText = function (text) {
      _this.props.onChangeText(text);

      _this.setState({
        isEmpty: text === ''
      });
    };

    _this._keyboardDidHide = function () {
      _this.cancel();
    };

    var _props$value = props.value,
        value = _props$value === void 0 ? '' : _props$value;
    _this.state = {
      hasFocus: false,
      isEmpty: value ? value === '' : true
    };

    _reactNative.Keyboard.addListener('keyboardDidHide', _this._keyboardDidHide);

    return _this;
  }

  (0, _createClass2.default)(SearchBar, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _reactNative.Keyboard.removeListener('keyboardDidHide', this._keyboardDidHide);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _a = this.props,
          theme = _a.theme,
          _a$clearIcon = _a.clearIcon,
          clearIcon = _a$clearIcon === void 0 ? {
        name: 'clear'
      } : _a$clearIcon,
          containerStyle = _a.containerStyle,
          leftIconContainerStyle = _a.leftIconContainerStyle,
          rightIconContainerStyle = _a.rightIconContainerStyle,
          inputContainerStyle = _a.inputContainerStyle,
          inputStyle = _a.inputStyle,
          _a$searchIcon = _a.searchIcon,
          searchIcon = _a$searchIcon === void 0 ? {
        name: 'search'
      } : _a$searchIcon,
          _a$cancelIcon = _a.cancelIcon,
          cancelIcon = _a$cancelIcon === void 0 ? {
        name: 'arrow-back'
      } : _a$cancelIcon,
          _a$showLoading = _a.showLoading,
          showLoading = _a$showLoading === void 0 ? false : _a$showLoading,
          _a$loadingProps = _a.loadingProps,
          loadingProps = _a$loadingProps === void 0 ? {} : _a$loadingProps,
          attributes = __rest(_a, ["theme", "clearIcon", "containerStyle", "leftIconContainerStyle", "rightIconContainerStyle", "inputContainerStyle", "inputStyle", "searchIcon", "cancelIcon", "showLoading", "loadingProps"]);

      var _this$state = this.state,
          hasFocus = _this$state.hasFocus,
          isEmpty = _this$state.isEmpty;

      var loadingStyle = loadingProps.style,
          otherLoadingProps = __rest(loadingProps, ["style"]);

      return _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([{
          backgroundColor: theme.colors.white,
          paddingTop: 8,
          paddingBottom: 8
        }, containerStyle])
      }, _react.default.createElement(_Input.default, (0, _extends2.default)({
        testID: "searchInput",
        renderErrorMessage: false
      }, attributes, {
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        onChangeText: this.onChangeText,
        ref: function ref(input) {
          _this2.input = input;
        },
        containerStyle: {
          paddingHorizontal: 0
        },
        inputStyle: _reactNative.StyleSheet.flatten([styles.input, inputStyle]),
        inputContainerStyle: _reactNative.StyleSheet.flatten([styles.inputContainer, inputContainerStyle]),
        leftIcon: hasFocus ? (0, _helpers.renderNode)(_Icon.default, cancelIcon, Object.assign(Object.assign({}, defaultCancelIcon(theme)), {
          onPress: this.cancel
        })) : (0, _helpers.renderNode)(_Icon.default, searchIcon, defaultSearchIcon(theme)),
        leftIconContainerStyle: _reactNative.StyleSheet.flatten([styles.leftIconContainerStyle, leftIconContainerStyle]),
        rightIcon: _react.default.createElement(_reactNative.View, {
          style: {
            flexDirection: 'row'
          }
        }, showLoading && _react.default.createElement(_reactNative.ActivityIndicator, (0, _extends2.default)({
          key: "loading",
          style: _reactNative.StyleSheet.flatten([{
            marginRight: 5
          }, loadingStyle])
        }, otherLoadingProps)), !isEmpty && (0, _helpers.renderNode)(_Icon.default, clearIcon, Object.assign(Object.assign({}, defaultClearIcon(theme)), {
          key: 'cancel',
          onPress: this.clear
        }))),
        rightIconContainerStyle: _reactNative.StyleSheet.flatten([styles.rightIconContainerStyle, rightIconContainerStyle])
      })));
    }
  }]);
  return SearchBar;
}(_react.Component);

SearchBar.defaultProps = {
  onClear: function onClear() {
    return null;
  },
  onCancel: function onCancel() {
    return null;
  },
  onFocus: function onFocus() {
    return null;
  },
  onBlur: function onBlur() {
    return null;
  },
  onChangeText: function onChangeText() {
    return null;
  }
};

var styles = _reactNative.StyleSheet.create({
  input: {
    marginLeft: 24,
    marginRight: 8
  },
  inputContainer: {
    borderBottomWidth: 0,
    width: '100%'
  },
  rightIconContainerStyle: {
    marginRight: 8
  },
  leftIconContainerStyle: {
    marginLeft: 8
  }
});

var _default = SearchBar;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,