{"version":3,"sources":["MaterialCommunityIcon.tsx"],"names":["MaterialCommunityIcons","require","isErrorLogged","size","rest","e","console","styles","color","fontSize","accessibilityProps","role","focusable","accessibilityElementsHidden","importantForAccessibility","defaultIcon","allowFontScaling","transform","scaleX","direction","lineHeight","icon","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Text, Platform } from 'react-native';\n\nexport type IconProps = {\n  name: string;\n  color: string;\n  size: number;\n  direction: 'rtl' | 'ltr';\n  allowFontScaling?: boolean;\n};\n\nlet MaterialCommunityIcons: any;\n\ntry {\n  // Optionally require vector-icons\n  MaterialCommunityIcons = require('react-native-vector-icons/MaterialCommunityIcons')\n    .default;\n} catch (e) {\n  let isErrorLogged = false;\n\n  // Fallback component for icons\n  // @ts-ignore\n  MaterialCommunityIcons = ({ name, color, size, ...rest }) => {\n    /* eslint-disable no-console */\n    if (!isErrorLogged) {\n      if (\n        !/(Cannot find module|Module not found|Cannot resolve module)/.test(\n          e.message\n        )\n      ) {\n        console.error(e);\n      }\n\n      console.warn(\n        `Tried to use the icon '${name}' in a component from 'react-native-paper', but 'react-native-vector-icons/MaterialCommunityIcons' could not be loaded.`,\n        `To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/icons.html.`\n      );\n\n      isErrorLogged = true;\n    }\n\n    return (\n      <Text\n        {...rest}\n        style={[styles.icon, { color, fontSize: size }]}\n        // @ts-ignore\n        pointerEvents=\"none\"\n      >\n        â–¡\n      </Text>\n    );\n  };\n}\n\nexport const accessibilityProps =\n  Platform.OS === 'web'\n    ? {\n        role: 'img',\n        focusable: false,\n      }\n    : {\n        accessibilityElementsHidden: true,\n        importantForAccessibility: 'no-hide-descendants' as 'no-hide-descendants',\n      };\n\nconst defaultIcon = ({\n  name,\n  color,\n  size,\n  direction,\n  allowFontScaling,\n}: IconProps) => (\n  <MaterialCommunityIcons\n    allowFontScaling={allowFontScaling}\n    name={name}\n    color={color}\n    size={size}\n    style={[\n      {\n        transform: [{ scaleX: direction === 'rtl' ? -1 : 1 }],\n        lineHeight: size,\n      },\n      styles.icon,\n    ]}\n    pointerEvents=\"none\"\n    {...accessibilityProps}\n  />\n);\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent',\n  },\n});\n\nexport default defaultIcon;\n"]}