153f66e129cb072917ad4ebe5469efe0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _Text = _interopRequireDefault(require("../Typography/Text"));

var _theming = require("../../core/theming");

var _colors = require("../../styles/colors");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var defaultSize = 64;

var AvatarText = function AvatarText(_ref) {
  var label = _ref.label,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? defaultSize : _ref$size,
      style = _ref.style,
      theme = _ref.theme,
      labelStyle = _ref.labelStyle,
      color = _ref.color,
      rest = _objectWithoutProperties(_ref, ["label", "size", "style", "theme", "labelStyle", "color"]);

  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
      _ref2$backgroundColor = _ref2.backgroundColor,
      backgroundColor = _ref2$backgroundColor === void 0 ? theme.colors.primary : _ref2$backgroundColor,
      restStyle = _objectWithoutProperties(_ref2, ["backgroundColor"]);

  var textColor = color || ((0, _color.default)(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : _colors.white);
  return React.createElement(_reactNative.View, _extends({
    style: [{
      width: size,
      height: size,
      borderRadius: size / 2,
      backgroundColor: backgroundColor
    }, styles.container, restStyle]
  }, rest), React.createElement(_Text.default, {
    style: [styles.text, {
      color: textColor,
      fontSize: size / 2,
      lineHeight: size
    }, labelStyle],
    numberOfLines: 1
  }, label));
};

AvatarText.displayName = 'Avatar.Text';

var styles = _reactNative.StyleSheet.create({
  container: {
    justifyContent: 'center',
    alignItems: 'center'
  },
  text: {
    textAlign: 'center',
    textAlignVertical: 'center'
  }
});

var _default = (0, _theming.withTheme)(AvatarText);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkF2YXRhclRleHQudHN4Il0sIm5hbWVzIjpbImRlZmF1bHRTaXplIiwiQXZhdGFyVGV4dCIsInNpemUiLCJjb2xvciIsInJlc3QiLCJiYWNrZ3JvdW5kQ29sb3IiLCJ0aGVtZSIsInByaW1hcnkiLCJTdHlsZVNoZWV0IiwidGV4dENvbG9yIiwid2hpdGUiLCJ3aWR0aCIsImhlaWdodCIsImJvcmRlclJhZGl1cyIsInN0eWxlcyIsImZvbnRTaXplIiwibGluZUhlaWdodCIsImNvbnRhaW5lciIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsInRleHQiLCJ0ZXh0QWxpZ24iLCJ0ZXh0QWxpZ25WZXJ0aWNhbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUEsS0FBQSxHQUFBLHVCQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsWUFBQSxHQUFBLE9BQUEsQ0FBQSxjQUFBLENBQUE7O0FBT0EsSUFBQSxNQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxLQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsb0JBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsUUFBQSxHQUFBLE9BQUEsQ0FBQSxvQkFBQSxDQUFBOztBQUNBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxxQkFBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxXQUFXLEdBQWpCLEVBQUE7O0FBZ0RBLElBQU1DLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQUEsSUFBQSxFQVFOO0FBQUEsTUFSTyxLQVFQLEdBQUEsSUFBQSxDQVJPLEtBUVA7QUFBQSxrQkFBQSxJQUFBLENBTlhDLElBTVc7QUFBQSxNQU5YQSxJQU1XLDBCQVJPLFdBUVA7QUFBQSxNQVJPLEtBUVAsR0FBQSxJQUFBLENBUk8sS0FRUDtBQUFBLE1BUk8sS0FRUCxHQUFBLElBQUEsQ0FSTyxLQVFQO0FBQUEsTUFSTyxVQVFQLEdBQUEsSUFBQSxDQVJPLFVBUVA7QUFBQSxNQUZYQyxLQUVXLEdBQUEsSUFBQSxDQUZYQSxLQUVXO0FBQUEsTUFEUkMsSUFDUSxHQUFBLHdCQUFBLENBQUEsSUFBQSxFQUFBLENBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLFlBQUEsRUFBQSxPQUFBLENBQUEsQ0FBQTs7QUFDWCxNQUFBLEtBQUEsR0FDRUksWUFBQUEsQ0FBQUEsVUFBQUEsQ0FBQUEsT0FBQUEsQ0FBQUEsS0FBQUEsS0FERixFQUFBO0FBQUEsOEJBQUEsS0FBQSxDQUFRSCxlQUFSO0FBQUEsTUFBUUEsZUFBUixzQ0FBMEJDLEtBQUssQ0FBTEEsTUFBQUEsQ0FBYUMsT0FBdkM7QUFBQSxNQUFBLFNBQUEsR0FBQSx3QkFBQSxDQUFBLEtBQUEsRUFBQSxDQUFBLGlCQUFBLENBQUEsQ0FBQTs7QUFFQSxNQUFNRSxTQUFTLEdBQ2JOLEtBQUssS0FBSyxDQUFBLEdBQUEsTUFBQSxDQUFBLE9BQUEsRUFBQSxlQUFBLEVBQUEsT0FBQSxLQUFBLG9CQUFBLEdBQTBETyxPQUFBQSxDQUR0RSxLQUNPLENBRFA7QUFHQSxTQUNFLEtBQUEsQ0FBQSxhQUFBLENBQUMsWUFBQSxDQUFELElBQUEsRUFBQSxRQUFBLENBQUE7QUFDRSxJQUFBLEtBQUssRUFBRSxDQUNMO0FBQ0VDLE1BQUFBLEtBQUssRUFEUCxJQUFBO0FBRUVDLE1BQUFBLE1BQU0sRUFGUixJQUFBO0FBR0VDLE1BQUFBLFlBQVksRUFBRVgsSUFBSSxHQUhwQixDQUFBO0FBSUVHLE1BQUFBLGVBQUFBLEVBQUFBO0FBSkYsS0FESyxFQU9MUyxNQUFNLENBUEQsU0FBQSxFQUFBLFNBQUE7QUFEVCxHQUFBLEVBQUEsSUFBQSxDQUFBLEVBYUUsS0FBQSxDQUFBLGFBQUEsQ0FBQyxLQUFBLENBQUQsT0FBQSxFQUFBO0FBQ0UsSUFBQSxLQUFLLEVBQUUsQ0FDTEEsTUFBTSxDQURELElBQUEsRUFFTDtBQUNFWCxNQUFBQSxLQUFLLEVBRFAsU0FBQTtBQUVFWSxNQUFBQSxRQUFRLEVBQUViLElBQUksR0FGaEIsQ0FBQTtBQUdFYyxNQUFBQSxVQUFVLEVBQUVkO0FBSGQsS0FGSyxFQURULFVBQ1MsQ0FEVDtBQVVFLElBQUEsYUFBYSxFQUFFO0FBVmpCLEdBQUEsRUFkSixLQWNJLENBYkYsQ0FERjtBQWRGLENBQUE7O0FBOENBRCxVQUFVLENBQVZBLFdBQUFBLEdBQUFBLGFBQUFBOztBQUVBLElBQU1hLE1BQU0sR0FBRyxZQUFBLENBQUEsVUFBQSxDQUFBLE1BQUEsQ0FBa0I7QUFDL0JHLEVBQUFBLFNBQVMsRUFBRTtBQUNUQyxJQUFBQSxjQUFjLEVBREwsUUFBQTtBQUVUQyxJQUFBQSxVQUFVLEVBQUU7QUFGSCxHQURvQjtBQUsvQkMsRUFBQUEsSUFBSSxFQUFFO0FBQ0pDLElBQUFBLFNBQVMsRUFETCxRQUFBO0FBRUpDLElBQUFBLGlCQUFpQixFQUFFO0FBRmY7QUFMeUIsQ0FBbEIsQ0FBZjs7ZUFXZSxDQUFBLEdBQUEsUUFBQSxDQUFBLFNBQUEsRUFBQSxVQUFBLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBWaWV3LFxuICBWaWV3U3R5bGUsXG4gIFN0eWxlU2hlZXQsXG4gIFN0eWxlUHJvcCxcbiAgVGV4dFN0eWxlLFxufSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IENvbG9yIGZyb20gJ2NvbG9yJztcbmltcG9ydCBUZXh0IGZyb20gJy4uL1R5cG9ncmFwaHkvVGV4dCc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi8uLi9jb3JlL3RoZW1pbmcnO1xuaW1wb3J0IHsgd2hpdGUgfSBmcm9tICcuLi8uLi9zdHlsZXMvY29sb3JzJztcblxuY29uc3QgZGVmYXVsdFNpemUgPSA2NDtcblxudHlwZSBQcm9wcyA9IFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aFJlZjx0eXBlb2YgVmlldz4gJiB7XG4gIC8qKlxuICAgKiBJbml0aWFscyB0byBzaG93IGFzIHRoZSB0ZXh0IGluIHRoZSBgQXZhdGFyYC5cbiAgICovXG4gIGxhYmVsOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSBhdmF0YXIuXG4gICAqL1xuICBzaXplPzogbnVtYmVyO1xuICAvKipcbiAgICogQ3VzdG9tIGNvbG9yIGZvciB0aGUgdGV4dC5cbiAgICovXG4gIGNvbG9yPzogc3RyaW5nO1xuICAvKipcbiAgICogU3R5bGUgZm9yIHRleHQgY29udGFpbmVyXG4gICAqL1xuICBzdHlsZT86IFN0eWxlUHJvcDxWaWV3U3R5bGU+O1xuICAvKipcbiAgICogU3R5bGUgZm9yIHRoZSB0aXRsZS5cbiAgICovXG4gIGxhYmVsU3R5bGU/OiBTdHlsZVByb3A8VGV4dFN0eWxlPjtcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgdGhlbWU6IFJlYWN0TmF0aXZlUGFwZXIuVGhlbWU7XG59O1xuXG4vKipcbiAqIEF2YXRhcnMgY2FuIGJlIHVzZWQgdG8gcmVwcmVzZW50IHBlb3BsZSBpbiBhIGdyYXBoaWNhbCB3YXkuXG4gKlxuICogPGRpdiBjbGFzcz1cInNjcmVlbnNob3RzXCI+XG4gKiAgIDxmaWd1cmU+XG4gKiAgICAgPGltZyBjbGFzcz1cIm1lZGl1bVwiIHNyYz1cInNjcmVlbnNob3RzL2F2YXRhci10ZXh0LnBuZ1wiIC8+XG4gKiAgIDwvZmlndXJlPlxuICogPC9kaXY+XG4gKlxuICogIyMgVXNhZ2VcbiAqIGBgYGpzXG4gKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4gKiBpbXBvcnQgeyBBdmF0YXIgfSBmcm9tICdyZWFjdC1uYXRpdmUtcGFwZXInO1xuICpcbiAqIGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4gKFxuICogICA8QXZhdGFyLlRleHQgc2l6ZT17MjR9IGxhYmVsPVwiWERcIiAvPlxuICogKTtcbiAqIGBgYFxuICovXG5jb25zdCBBdmF0YXJUZXh0ID0gKHtcbiAgbGFiZWwsXG4gIHNpemUgPSBkZWZhdWx0U2l6ZSxcbiAgc3R5bGUsXG4gIHRoZW1lLFxuICBsYWJlbFN0eWxlLFxuICBjb2xvcixcbiAgLi4ucmVzdFxufTogUHJvcHMpID0+IHtcbiAgY29uc3QgeyBiYWNrZ3JvdW5kQ29sb3IgPSB0aGVtZS5jb2xvcnMucHJpbWFyeSwgLi4ucmVzdFN0eWxlIH0gPVxuICAgIFN0eWxlU2hlZXQuZmxhdHRlbihzdHlsZSkgfHwge307XG4gIGNvbnN0IHRleHRDb2xvciA9XG4gICAgY29sb3IgfHwgKENvbG9yKGJhY2tncm91bmRDb2xvcikuaXNMaWdodCgpID8gJ3JnYmEoMCwgMCwgMCwgLjU0KScgOiB3aGl0ZSk7XG5cbiAgcmV0dXJuIChcbiAgICA8Vmlld1xuICAgICAgc3R5bGU9e1tcbiAgICAgICAge1xuICAgICAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IHNpemUgLyAyLFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcixcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGVzLmNvbnRhaW5lcixcbiAgICAgICAgcmVzdFN0eWxlLFxuICAgICAgXX1cbiAgICAgIHsuLi5yZXN0fVxuICAgID5cbiAgICAgIDxUZXh0XG4gICAgICAgIHN0eWxlPXtbXG4gICAgICAgICAgc3R5bGVzLnRleHQsXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29sb3I6IHRleHRDb2xvcixcbiAgICAgICAgICAgIGZvbnRTaXplOiBzaXplIC8gMixcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IHNpemUsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBsYWJlbFN0eWxlLFxuICAgICAgICBdfVxuICAgICAgICBudW1iZXJPZkxpbmVzPXsxfVxuICAgICAgPlxuICAgICAgICB7bGFiZWx9XG4gICAgICA8L1RleHQ+XG4gICAgPC9WaWV3PlxuICApO1xufTtcblxuQXZhdGFyVGV4dC5kaXNwbGF5TmFtZSA9ICdBdmF0YXIuVGV4dCc7XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgY29udGFpbmVyOiB7XG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICB9LFxuICB0ZXh0OiB7XG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICB0ZXh0QWxpZ25WZXJ0aWNhbDogJ2NlbnRlcicsXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKEF2YXRhclRleHQpO1xuIl19