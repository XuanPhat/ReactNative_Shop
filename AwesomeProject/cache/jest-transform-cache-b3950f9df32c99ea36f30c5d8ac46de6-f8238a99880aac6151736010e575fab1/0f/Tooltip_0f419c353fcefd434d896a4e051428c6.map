{"version":3,"sources":["Tooltip.js"],"names":["defaultProps","withOverlay","overlayColor","highlightColor","withPointer","toggleOnPress","toggleAction","height","width","containerStyle","backgroundColor","onClose","onOpen","skipAndroidStatusBar","ModalComponent","Modal","closeOnlyOnBackdropPress","Tooltip","arguments","state","isVisible","yOffset","xOffset","elementWidth","elementHeight","toggleTooltip","props","getElementPosition","setState","prevState","wrapWithPress","children","flex","getTooltipStyle","ScreenWidth","ScreenHeight","x","y","StyleSheet","flatten","position","I18nManager","isRTL","renderPointer","tooltipY","pointerColor","pastMiddleLine","top","borderBottomColor","getTooltipHighlightedButtonStyle","renderTouchableHighlightedButton","TooltipHighlightedButtonStyle","renderStaticHighlightedButton","renderHighlightedButton","renderContent","withTooltip","popover","tooltipStyle","renderedElement","measure","frameOffsetX","frameOffsetY","pageOffsetX","pageOffsetY","isIOS","StatusBar","currentHeight","renderStaticModalContent","renderTogglingModalContent","renderModalContent","requestAnimationFrame","e","React","Component"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { TouchableOpacity, Modal, View, StatusBar, I18nManager, StyleSheet, } from 'react-native';\nimport { withTheme } from '../config';\nimport { ScreenWidth, ScreenHeight, isIOS } from '../helpers';\nimport Triangle from './Triangle';\nimport getTooltipCoordinate, { getElementVisibleWidth, } from './getTooltipCoordinate';\nconst defaultProps = {\n    withOverlay: true,\n    overlayColor: 'rgba(250, 250, 250, 0.70)',\n    highlightColor: 'transparent',\n    withPointer: true,\n    toggleOnPress: true,\n    toggleAction: 'onPress',\n    height: 40,\n    width: 150,\n    containerStyle: {},\n    backgroundColor: '#617080',\n    onClose: () => { },\n    onOpen: () => { },\n    skipAndroidStatusBar: false,\n    ModalComponent: Modal,\n    closeOnlyOnBackdropPress: false,\n};\nclass Tooltip extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isVisible: false,\n            yOffset: 0,\n            xOffset: 0,\n            elementWidth: 0,\n            elementHeight: 0,\n        };\n        this.toggleTooltip = () => {\n            const { onClose } = this.props;\n            this.getElementPosition();\n            this.setState((prevState) => {\n                if (prevState.isVisible) {\n                    onClose && onClose();\n                }\n                return { isVisible: !prevState.isVisible };\n            });\n        };\n        this.wrapWithPress = (toggleOnPress, toggleAction, children) => {\n            if (toggleOnPress) {\n                return (<TouchableOpacity {...{ [toggleAction]: this.toggleTooltip }} delayLongPress={250} activeOpacity={1}>\n          {children}\n        </TouchableOpacity>);\n            }\n            return children;\n        };\n        this.containerStyle = (withOverlay, overlayColor) => {\n            return {\n                backgroundColor: withOverlay ? overlayColor : 'transparent',\n                flex: 1,\n            };\n        };\n        this.getTooltipStyle = () => {\n            const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\n            const { height, backgroundColor, width, withPointer, containerStyle, } = this.props;\n            const { x, y } = getTooltipCoordinate(xOffset, yOffset, elementWidth, elementHeight, ScreenWidth, ScreenHeight, width, height, withPointer);\n            return StyleSheet.flatten([\n                {\n                    position: 'absolute',\n                    [I18nManager.isRTL ? 'right' : 'left']: x,\n                    top: y,\n                    width,\n                    height,\n                    backgroundColor,\n                    // default styles\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    flex: 1,\n                    borderRadius: 10,\n                    padding: 10,\n                },\n                containerStyle,\n            ]);\n        };\n        this.renderPointer = (tooltipY) => {\n            const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\n            const { backgroundColor, pointerColor } = this.props;\n            const pastMiddleLine = yOffset > tooltipY;\n            return (<View style={{\n                position: 'absolute',\n                top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2,\n                [I18nManager.isRTL ? 'right' : 'left']: xOffset +\n                    getElementVisibleWidth(elementWidth, xOffset, ScreenWidth) / 2 -\n                    7.5,\n            }}>\n        <Triangle style={{ borderBottomColor: pointerColor || backgroundColor }} isDown={pastMiddleLine}/>\n      </View>);\n        };\n        this.getTooltipHighlightedButtonStyle = () => {\n            const { highlightColor } = this.props;\n            const { yOffset, xOffset, elementWidth, elementHeight } = this.state;\n            return {\n                position: 'absolute',\n                top: yOffset,\n                [I18nManager.isRTL ? 'right' : 'left']: xOffset,\n                backgroundColor: highlightColor,\n                overflow: 'visible',\n                width: elementWidth,\n                height: elementHeight,\n            };\n        };\n        this.renderTouchableHighlightedButton = () => {\n            const TooltipHighlightedButtonStyle = this.getTooltipHighlightedButtonStyle();\n            return (<TouchableOpacity testID=\"tooltipTouchableHighlightedButton\" onPress={() => this.toggleTooltip()} style={TooltipHighlightedButtonStyle}>\n        {this.props.children}\n      </TouchableOpacity>);\n        };\n        this.renderStaticHighlightedButton = () => {\n            const TooltipHighlightedButtonStyle = this.getTooltipHighlightedButtonStyle();\n            return (<View style={TooltipHighlightedButtonStyle}>{this.props.children}</View>);\n        };\n        this.renderHighlightedButton = () => {\n            const { closeOnlyOnBackdropPress } = this.props;\n            if (closeOnlyOnBackdropPress) {\n                return this.renderTouchableHighlightedButton();\n            }\n            else {\n                return this.renderStaticHighlightedButton();\n            }\n        };\n        this.renderContent = (withTooltip) => {\n            const { popover, withPointer, toggleOnPress, toggleAction } = this.props;\n            if (!withTooltip) {\n                return this.wrapWithPress(toggleOnPress, toggleAction, this.props.children);\n            }\n            const tooltipStyle = this.getTooltipStyle();\n            return (<View>\n        {this.renderHighlightedButton()}\n        {withPointer && this.renderPointer(tooltipStyle.top)}\n        <View style={tooltipStyle} testID=\"tooltipPopoverContainer\">\n          {popover}\n        </View>\n      </View>);\n        };\n        this.getElementPosition = () => {\n            const { skipAndroidStatusBar } = this.props;\n            this.renderedElement &&\n                this.renderedElement.measure((frameOffsetX, frameOffsetY, width, height, pageOffsetX, pageOffsetY) => {\n                    this.setState({\n                        xOffset: pageOffsetX,\n                        yOffset: isIOS || skipAndroidStatusBar\n                            ? pageOffsetY\n                            : pageOffsetY - StatusBar.currentHeight,\n                        elementWidth: width,\n                        elementHeight: height,\n                    });\n                });\n        };\n        this.renderStaticModalContent = () => {\n            const { withOverlay, overlayColor } = this.props;\n            return (<Fragment>\n        <TouchableOpacity style={this.containerStyle(withOverlay, overlayColor)} onPress={this.toggleTooltip} activeOpacity={1}/>\n        <View>{this.renderContent(true)}</View>\n      </Fragment>);\n        };\n        this.renderTogglingModalContent = () => {\n            const { withOverlay, overlayColor } = this.props;\n            return (<TouchableOpacity style={this.containerStyle(withOverlay, overlayColor)} onPress={this.toggleTooltip} activeOpacity={1}>\n        {this.renderContent(true)}\n      </TouchableOpacity>);\n        };\n        this.renderModalContent = () => {\n            const { closeOnlyOnBackdropPress } = this.props;\n            if (closeOnlyOnBackdropPress) {\n                return this.renderStaticModalContent();\n            }\n            else {\n                return this.renderTogglingModalContent();\n            }\n        };\n    }\n    componentDidMount() {\n        // wait to compute onLayout values.\n        requestAnimationFrame(this.getElementPosition);\n    }\n    render() {\n        const { isVisible } = this.state;\n        const { onClose, onOpen, ModalComponent } = this.props;\n        return (<View collapsable={false} ref={(e) => {\n            this.renderedElement = e;\n        }}>\n        {this.renderContent(false)}\n        <ModalComponent animationType=\"fade\" visible={isVisible} transparent onDismiss={onClose} onShow={onOpen} onRequestClose={onClose}>\n          {this.renderModalContent()}\n        </ModalComponent>\n      </View>);\n    }\n}\nTooltip.defaultProps = defaultProps;\nexport { Tooltip };\n//@ts-ignore\nexport default withTheme(Tooltip, 'Tooltip');\n"]}