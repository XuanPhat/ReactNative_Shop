ce446ef1ad0cee5ff4db74b20fda2431
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Header = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeSafeAreaContext = require("react-native-safe-area-context");

var _config = require("../config");

var _helpers = require("../helpers");

var _Text = _interopRequireDefault(require("../text/Text"));

var _Icon = _interopRequireDefault(require("../icons/Icon"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var ALIGN_STYLE = {
  left: 'flex-start',
  right: 'flex-end',
  center: 'center'
};

var Children = function Children(_ref) {
  var style = _ref.style,
      placement = _ref.placement,
      children = _ref.children;
  return _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([{
      alignItems: ALIGN_STYLE[placement]
    }, style])
  }, children == null || children === false ? null : children.text ? (0, _helpers.renderNode)(_Text.default, children.text, Object.assign({
    numberOfLines: 1
  }, children)) : children.icon ? (0, _helpers.renderNode)(_Icon.default, Object.assign(Object.assign({}, children), {
    name: children.icon,
    containerStyle: _reactNative.StyleSheet.flatten([{
      alignItems: ALIGN_STYLE[placement]
    }, children.containerStyle])
  })) : (0, _helpers.renderNode)(_Text.default, children));
};

var Header = function (_Component) {
  (0, _inherits2.default)(Header, _Component);

  var _super = _createSuper(Header);

  function Header() {
    (0, _classCallCheck2.default)(this, Header);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(Header, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          linearGradientProps = _this$props.linearGradientProps,
          ViewComponent = _this$props.ViewComponent;

      if (linearGradientProps && !ViewComponent) {
        console.error("You need to pass a ViewComponent to use linearGradientProps !\nExample: ViewComponent={require('react-native-linear-gradient')}");
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _a = this.props,
          statusBarProps = _a.statusBarProps,
          leftComponent = _a.leftComponent,
          centerComponent = _a.centerComponent,
          rightComponent = _a.rightComponent,
          leftContainerStyle = _a.leftContainerStyle,
          centerContainerStyle = _a.centerContainerStyle,
          rightContainerStyle = _a.rightContainerStyle,
          backgroundColor = _a.backgroundColor,
          backgroundImage = _a.backgroundImage,
          backgroundImageStyle = _a.backgroundImageStyle,
          containerStyle = _a.containerStyle,
          _a$placement = _a.placement,
          placement = _a$placement === void 0 ? 'center' : _a$placement,
          barStyle = _a.barStyle,
          _a$children = _a.children,
          children = _a$children === void 0 ? [] : _a$children,
          linearGradientProps = _a.linearGradientProps,
          _a$ViewComponent = _a.ViewComponent,
          ViewComponent = _a$ViewComponent === void 0 ? linearGradientProps || !backgroundImage ? _reactNative.View : _reactNative.ImageBackground : _a$ViewComponent,
          theme = _a.theme,
          attributes = __rest(_a, ["statusBarProps", "leftComponent", "centerComponent", "rightComponent", "leftContainerStyle", "centerContainerStyle", "rightContainerStyle", "backgroundColor", "backgroundImage", "backgroundImageStyle", "containerStyle", "placement", "barStyle", "children", "linearGradientProps", "ViewComponent", "theme"]);

      return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.StatusBar, (0, _extends2.default)({
        barStyle: barStyle,
        translucent: true,
        backgroundColor: backgroundColor || theme.colors.primary
      }, statusBarProps)), _react.default.createElement(ViewComponent, (0, _extends2.default)({
        testID: "headerContainer"
      }, attributes, {
        style: _reactNative.StyleSheet.flatten([{
          borderBottomColor: '#f2f2f2',
          borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
          paddingHorizontal: 10,
          paddingVertical: 10,
          backgroundColor: theme.colors.primary,
          flexDirection: 'row',
          justifyContent: 'space-between',
          alignItems: 'center'
        }, backgroundColor && {
          backgroundColor: backgroundColor
        }, containerStyle]),
        source: backgroundImage,
        imageStyle: backgroundImageStyle
      }, linearGradientProps), _react.default.createElement(_reactNativeSafeAreaContext.SafeAreaView, {
        edges: ['left', 'top', 'right'],
        style: styles.headerSafeView
      }, _react.default.createElement(Children, {
        style: _reactNative.StyleSheet.flatten([placement === 'center' && styles.rightLeftContainer, leftContainerStyle]),
        placement: "left"
      }, _react.default.isValidElement(children) && children || children[0] || leftComponent), _react.default.createElement(Children, {
        style: _reactNative.StyleSheet.flatten([styles.centerContainer, placement !== 'center' && {
          paddingHorizontal: _reactNative.Platform.select({
            android: 16,
            default: 15
          })
        }, centerContainerStyle]),
        placement: placement
      }, children[1] || centerComponent), _react.default.createElement(Children, {
        style: _reactNative.StyleSheet.flatten([placement === 'center' && styles.rightLeftContainer, rightContainerStyle]),
        placement: "right"
      }, children[2] || rightComponent))));
    }
  }]);
  return Header;
}(_react.Component);

exports.Header = Header;

var styles = _reactNative.StyleSheet.create({
  headerSafeView: {
    width: '100%',
    flexDirection: 'row'
  },
  centerContainer: {
    flex: 3
  },
  rightLeftContainer: {
    flex: 1
  }
});

var _default = (0, _config.withTheme)(Header, 'Header');

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,